/*
Equinix Fabric API v4

Testing NetworksApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_NetworksApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworksApiService CreateNetwork", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NetworksApi.CreateNetwork(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService DeleteNetworkByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.NetworksApi.DeleteNetworkByUuid(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService GetConnectionsByNetworkUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.NetworksApi.GetConnectionsByNetworkUuid(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService GetNetworkByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.NetworksApi.GetNetworkByUuid(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService GetNetworkChangeByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var networkId string
		var changeId string

		resp, httpRes, err := apiClient.NetworksApi.GetNetworkChangeByUuid(context.Background(), networkId, changeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService GetNetworkChanges", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.NetworksApi.GetNetworkChanges(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService SearchNetworks", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NetworksApi.SearchNetworks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NetworksApiService UpdateNetworkByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var networkId string

		resp, httpRes, err := apiClient.NetworksApi.UpdateNetworkByUuid(context.Background(), networkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
