/*
Equinix Fabric API v4

Testing RouteFiltersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fabricv4

import (
	"context"
	"testing"

	openapiclient "github.com/equinix/equinix-sdk-go/services/fabricv4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_fabricv4_RouteFiltersApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RouteFiltersApiService AttachConnectionRouteFilter", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string
		var connectionId string

		resp, httpRes, err := apiClient.RouteFiltersApi.AttachConnectionRouteFilter(context.Background(), routeFilterId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService CreateRouteFilter", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RouteFiltersApi.CreateRouteFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService DeleteRouteFilterByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string

		resp, httpRes, err := apiClient.RouteFiltersApi.DeleteRouteFilterByUuid(context.Background(), routeFilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService DetachConnectionRouteFilter", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string
		var connectionId string

		resp, httpRes, err := apiClient.RouteFiltersApi.DetachConnectionRouteFilter(context.Background(), routeFilterId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService GetConnectionRouteFilterByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string
		var connectionId string

		resp, httpRes, err := apiClient.RouteFiltersApi.GetConnectionRouteFilterByUuid(context.Background(), routeFilterId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService GetConnectionRouteFilters", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.RouteFiltersApi.GetConnectionRouteFilters(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService GetRouteFilterByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string

		resp, httpRes, err := apiClient.RouteFiltersApi.GetRouteFilterByUuid(context.Background(), routeFilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService GetRouteFilterChangeByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string
		var changeId string

		resp, httpRes, err := apiClient.RouteFiltersApi.GetRouteFilterChangeByUuid(context.Background(), routeFilterId, changeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService GetRouteFilterChanges", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string

		resp, httpRes, err := apiClient.RouteFiltersApi.GetRouteFilterChanges(context.Background(), routeFilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService GetRouteFilterConnections", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string

		resp, httpRes, err := apiClient.RouteFiltersApi.GetRouteFilterConnections(context.Background(), routeFilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService PatchRouteFilterByUuid", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var routeFilterId string

		resp, httpRes, err := apiClient.RouteFiltersApi.PatchRouteFilterByUuid(context.Background(), routeFilterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test RouteFiltersApiService SearchRouteFilters", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RouteFiltersApi.SearchRouteFilters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
