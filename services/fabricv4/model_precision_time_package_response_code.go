/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.12
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// PrecisionTimePackageResponseCode the model 'PrecisionTimePackageResponseCode'
type PrecisionTimePackageResponseCode string

// List of precisionTimePackageResponse_code
const (
	PRECISIONTIMEPACKAGERESPONSECODE_NTP_STANDARD   PrecisionTimePackageResponseCode = "NTP_STANDARD"
	PRECISIONTIMEPACKAGERESPONSECODE_NTP_ENTERPRISE PrecisionTimePackageResponseCode = "NTP_ENTERPRISE"
	PRECISIONTIMEPACKAGERESPONSECODE_PTP_STANDARD   PrecisionTimePackageResponseCode = "PTP_STANDARD"
	PRECISIONTIMEPACKAGERESPONSECODE_PTP_ENTERPRISE PrecisionTimePackageResponseCode = "PTP_ENTERPRISE"
)

// All allowed values of PrecisionTimePackageResponseCode enum
var AllowedPrecisionTimePackageResponseCodeEnumValues = []PrecisionTimePackageResponseCode{
	"NTP_STANDARD",
	"NTP_ENTERPRISE",
	"PTP_STANDARD",
	"PTP_ENTERPRISE",
}

func (v *PrecisionTimePackageResponseCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrecisionTimePackageResponseCode(value)
	for _, existing := range AllowedPrecisionTimePackageResponseCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrecisionTimePackageResponseCode", value)
}

// NewPrecisionTimePackageResponseCodeFromValue returns a pointer to a valid PrecisionTimePackageResponseCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrecisionTimePackageResponseCodeFromValue(v string) (*PrecisionTimePackageResponseCode, error) {
	ev := PrecisionTimePackageResponseCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrecisionTimePackageResponseCode: valid values are %v", v, AllowedPrecisionTimePackageResponseCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrecisionTimePackageResponseCode) IsValid() bool {
	for _, existing := range AllowedPrecisionTimePackageResponseCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to precisionTimePackageResponse_code value
func (v PrecisionTimePackageResponseCode) Ptr() *PrecisionTimePackageResponseCode {
	return &v
}

type NullablePrecisionTimePackageResponseCode struct {
	value *PrecisionTimePackageResponseCode
	isSet bool
}

func (v NullablePrecisionTimePackageResponseCode) Get() *PrecisionTimePackageResponseCode {
	return v.value
}

func (v *NullablePrecisionTimePackageResponseCode) Set(val *PrecisionTimePackageResponseCode) {
	v.value = val
	v.isSet = true
}

func (v NullablePrecisionTimePackageResponseCode) IsSet() bool {
	return v.isSet
}

func (v *NullablePrecisionTimePackageResponseCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrecisionTimePackageResponseCode(val *PrecisionTimePackageResponseCode) *NullablePrecisionTimePackageResponseCode {
	return &NullablePrecisionTimePackageResponseCode{value: val, isSet: true}
}

func (v NullablePrecisionTimePackageResponseCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrecisionTimePackageResponseCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
