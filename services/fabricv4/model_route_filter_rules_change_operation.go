/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.12
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
	"fmt"
)

// checks if the RouteFilterRulesChangeOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteFilterRulesChangeOperation{}

// RouteFilterRulesChangeOperation Route Filter change operation data
type RouteFilterRulesChangeOperation struct {
	// name of  route filter rule
	Name string `json:"name"`
	// cust provided description
	Description *string                             `json:"description,omitempty"`
	Type        RouteFilterRulesChangeOperationType `json:"type"`
	// given prefix (does not change)
	Prefix               string                                `json:"prefix"`
	Action               RouteFilterRulesChangeOperationAction `json:"action"`
	AdditionalProperties map[string]interface{}
}

type _RouteFilterRulesChangeOperation RouteFilterRulesChangeOperation

// NewRouteFilterRulesChangeOperation instantiates a new RouteFilterRulesChangeOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteFilterRulesChangeOperation(name string, type_ RouteFilterRulesChangeOperationType, prefix string, action RouteFilterRulesChangeOperationAction) *RouteFilterRulesChangeOperation {
	this := RouteFilterRulesChangeOperation{}
	this.Name = name
	this.Type = type_
	this.Prefix = prefix
	this.Action = action
	return &this
}

// NewRouteFilterRulesChangeOperationWithDefaults instantiates a new RouteFilterRulesChangeOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteFilterRulesChangeOperationWithDefaults() *RouteFilterRulesChangeOperation {
	this := RouteFilterRulesChangeOperation{}
	return &this
}

// GetName returns the Name field value
func (o *RouteFilterRulesChangeOperation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeOperation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RouteFilterRulesChangeOperation) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RouteFilterRulesChangeOperation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeOperation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RouteFilterRulesChangeOperation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RouteFilterRulesChangeOperation) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value
func (o *RouteFilterRulesChangeOperation) GetType() RouteFilterRulesChangeOperationType {
	if o == nil {
		var ret RouteFilterRulesChangeOperationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeOperation) GetTypeOk() (*RouteFilterRulesChangeOperationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RouteFilterRulesChangeOperation) SetType(v RouteFilterRulesChangeOperationType) {
	o.Type = v
}

// GetPrefix returns the Prefix field value
func (o *RouteFilterRulesChangeOperation) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeOperation) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *RouteFilterRulesChangeOperation) SetPrefix(v string) {
	o.Prefix = v
}

// GetAction returns the Action field value
func (o *RouteFilterRulesChangeOperation) GetAction() RouteFilterRulesChangeOperationAction {
	if o == nil {
		var ret RouteFilterRulesChangeOperationAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *RouteFilterRulesChangeOperation) GetActionOk() (*RouteFilterRulesChangeOperationAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *RouteFilterRulesChangeOperation) SetAction(v RouteFilterRulesChangeOperationAction) {
	o.Action = v
}

func (o RouteFilterRulesChangeOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteFilterRulesChangeOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["type"] = o.Type
	toSerialize["prefix"] = o.Prefix
	toSerialize["action"] = o.Action

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteFilterRulesChangeOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"prefix",
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteFilterRulesChangeOperation := _RouteFilterRulesChangeOperation{}

	err = json.Unmarshal(data, &varRouteFilterRulesChangeOperation)

	if err != nil {
		return err
	}

	*o = RouteFilterRulesChangeOperation(varRouteFilterRulesChangeOperation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "type")
		delete(additionalProperties, "prefix")
		delete(additionalProperties, "action")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteFilterRulesChangeOperation struct {
	value *RouteFilterRulesChangeOperation
	isSet bool
}

func (v NullableRouteFilterRulesChangeOperation) Get() *RouteFilterRulesChangeOperation {
	return v.value
}

func (v *NullableRouteFilterRulesChangeOperation) Set(val *RouteFilterRulesChangeOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFilterRulesChangeOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFilterRulesChangeOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFilterRulesChangeOperation(val *RouteFilterRulesChangeOperation) *NullableRouteFilterRulesChangeOperation {
	return &NullableRouteFilterRulesChangeOperation{value: val, isSet: true}
}

func (v NullableRouteFilterRulesChangeOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFilterRulesChangeOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
