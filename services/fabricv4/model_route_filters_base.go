/*
Equinix Fabric API v4

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.12
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fabricv4

import (
	"encoding/json"
)

// checks if the RouteFiltersBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteFiltersBase{}

// RouteFiltersBase struct for RouteFiltersBase
type RouteFiltersBase struct {
	Type *ConnectionRouteFilterDataType `json:"type,omitempty"`
	Name *string                        `json:"name,omitempty"`
	// Customer-provided connection description
	Description *string  `json:"description,omitempty"`
	Project     *Project `json:"project,omitempty"`
	// Preferences for notifications on route filter configuration or status changes
	Notifications        []SimplifiedNotification `json:"notifications,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteFiltersBase RouteFiltersBase

// NewRouteFiltersBase instantiates a new RouteFiltersBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteFiltersBase() *RouteFiltersBase {
	this := RouteFiltersBase{}
	return &this
}

// NewRouteFiltersBaseWithDefaults instantiates a new RouteFiltersBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteFiltersBaseWithDefaults() *RouteFiltersBase {
	this := RouteFiltersBase{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RouteFiltersBase) GetType() ConnectionRouteFilterDataType {
	if o == nil || IsNil(o.Type) {
		var ret ConnectionRouteFilterDataType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFiltersBase) GetTypeOk() (*ConnectionRouteFilterDataType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RouteFiltersBase) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectionRouteFilterDataType and assigns it to the Type field.
func (o *RouteFiltersBase) SetType(v ConnectionRouteFilterDataType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RouteFiltersBase) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFiltersBase) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RouteFiltersBase) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RouteFiltersBase) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RouteFiltersBase) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFiltersBase) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RouteFiltersBase) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RouteFiltersBase) SetDescription(v string) {
	o.Description = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *RouteFiltersBase) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFiltersBase) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *RouteFiltersBase) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *RouteFiltersBase) SetProject(v Project) {
	o.Project = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *RouteFiltersBase) GetNotifications() []SimplifiedNotification {
	if o == nil || IsNil(o.Notifications) {
		var ret []SimplifiedNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteFiltersBase) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil || IsNil(o.Notifications) {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *RouteFiltersBase) HasNotifications() bool {
	if o != nil && !IsNil(o.Notifications) {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []SimplifiedNotification and assigns it to the Notifications field.
func (o *RouteFiltersBase) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

func (o RouteFiltersBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteFiltersBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Notifications) {
		toSerialize["notifications"] = o.Notifications
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteFiltersBase) UnmarshalJSON(data []byte) (err error) {
	varRouteFiltersBase := _RouteFiltersBase{}

	err = json.Unmarshal(data, &varRouteFiltersBase)

	if err != nil {
		return err
	}

	*o = RouteFiltersBase(varRouteFiltersBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "project")
		delete(additionalProperties, "notifications")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteFiltersBase struct {
	value *RouteFiltersBase
	isSet bool
}

func (v NullableRouteFiltersBase) Get() *RouteFiltersBase {
	return v.value
}

func (v *NullableRouteFiltersBase) Set(val *RouteFiltersBase) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteFiltersBase) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteFiltersBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteFiltersBase(val *RouteFiltersBase) *NullableRouteFiltersBase {
	return &NullableRouteFiltersBase{value: val, isSet: true}
}

func (v NullableRouteFiltersBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteFiltersBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
