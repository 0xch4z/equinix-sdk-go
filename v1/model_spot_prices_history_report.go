/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// SpotPricesHistoryReport struct for SpotPricesHistoryReport
type SpotPricesHistoryReport struct {
	PricesHistory *SpotPricesDatapoints `json:"prices_history,omitempty"`
}

// NewSpotPricesHistoryReport instantiates a new SpotPricesHistoryReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotPricesHistoryReport() *SpotPricesHistoryReport {
	this := SpotPricesHistoryReport{}
	return &this
}

// NewSpotPricesHistoryReportWithDefaults instantiates a new SpotPricesHistoryReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotPricesHistoryReportWithDefaults() *SpotPricesHistoryReport {
	this := SpotPricesHistoryReport{}
	return &this
}

// GetPricesHistory returns the PricesHistory field value if set, zero value otherwise.
func (o *SpotPricesHistoryReport) GetPricesHistory() SpotPricesDatapoints {
	if o == nil || o.PricesHistory == nil {
		var ret SpotPricesDatapoints
		return ret
	}
	return *o.PricesHistory
}

// GetPricesHistoryOk returns a tuple with the PricesHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotPricesHistoryReport) GetPricesHistoryOk() (*SpotPricesDatapoints, bool) {
	if o == nil || o.PricesHistory == nil {
		return nil, false
	}
	return o.PricesHistory, true
}

// HasPricesHistory returns a boolean if a field has been set.
func (o *SpotPricesHistoryReport) HasPricesHistory() bool {
	if o != nil && o.PricesHistory != nil {
		return true
	}

	return false
}

// SetPricesHistory gets a reference to the given SpotPricesDatapoints and assigns it to the PricesHistory field.
func (o *SpotPricesHistoryReport) SetPricesHistory(v SpotPricesDatapoints) {
	o.PricesHistory = &v
}

func (o SpotPricesHistoryReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PricesHistory != nil {
		toSerialize["prices_history"] = o.PricesHistory
	}
	return json.Marshal(toSerialize)
}

type NullableSpotPricesHistoryReport struct {
	value *SpotPricesHistoryReport
	isSet bool
}

func (v NullableSpotPricesHistoryReport) Get() *SpotPricesHistoryReport {
	return v.value
}

func (v *NullableSpotPricesHistoryReport) Set(val *SpotPricesHistoryReport) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotPricesHistoryReport) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotPricesHistoryReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotPricesHistoryReport(val *SpotPricesHistoryReport) *NullableSpotPricesHistoryReport {
	return &NullableSpotPricesHistoryReport{value: val, isSet: true}
}

func (v NullableSpotPricesHistoryReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotPricesHistoryReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


