/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ProjectList struct for ProjectList
type ProjectList struct {
	Projects *[]Project `json:"projects,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
}

// NewProjectList instantiates a new ProjectList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectList() *ProjectList {
	this := ProjectList{}
	return &this
}

// NewProjectListWithDefaults instantiates a new ProjectList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectListWithDefaults() *ProjectList {
	this := ProjectList{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ProjectList) GetProjects() []Project {
	if o == nil || o.Projects == nil {
		var ret []Project
		return ret
	}
	return *o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectList) GetProjectsOk() (*[]Project, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ProjectList) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []Project and assigns it to the Projects field.
func (o *ProjectList) SetProjects(v []Project) {
	o.Projects = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ProjectList) GetMeta() Meta {
	if o == nil || o.Meta == nil {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectList) GetMetaOk() (*Meta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ProjectList) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *ProjectList) SetMeta(v Meta) {
	o.Meta = &v
}

func (o ProjectList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableProjectList struct {
	value *ProjectList
	isSet bool
}

func (v NullableProjectList) Get() *ProjectList {
	return v.value
}

func (v *NullableProjectList) Set(val *ProjectList) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectList) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectList(val *ProjectList) *NullableProjectList {
	return &NullableProjectList{value: val, isSet: true}
}

func (v NullableProjectList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


