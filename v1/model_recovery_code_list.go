/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// RecoveryCodeList struct for RecoveryCodeList
type RecoveryCodeList struct {
	RecoveryCodes []string `json:"recovery_codes,omitempty"`
}

// NewRecoveryCodeList instantiates a new RecoveryCodeList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoveryCodeList() *RecoveryCodeList {
	this := RecoveryCodeList{}
	return &this
}

// NewRecoveryCodeListWithDefaults instantiates a new RecoveryCodeList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoveryCodeListWithDefaults() *RecoveryCodeList {
	this := RecoveryCodeList{}
	return &this
}

// GetRecoveryCodes returns the RecoveryCodes field value if set, zero value otherwise.
func (o *RecoveryCodeList) GetRecoveryCodes() []string {
	if o == nil || o.RecoveryCodes == nil {
		var ret []string
		return ret
	}
	return o.RecoveryCodes
}

// GetRecoveryCodesOk returns a tuple with the RecoveryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoveryCodeList) GetRecoveryCodesOk() ([]string, bool) {
	if o == nil || o.RecoveryCodes == nil {
		return nil, false
	}
	return o.RecoveryCodes, true
}

// HasRecoveryCodes returns a boolean if a field has been set.
func (o *RecoveryCodeList) HasRecoveryCodes() bool {
	if o != nil && o.RecoveryCodes != nil {
		return true
	}

	return false
}

// SetRecoveryCodes gets a reference to the given []string and assigns it to the RecoveryCodes field.
func (o *RecoveryCodeList) SetRecoveryCodes(v []string) {
	o.RecoveryCodes = v
}

func (o RecoveryCodeList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecoveryCodes != nil {
		toSerialize["recovery_codes"] = o.RecoveryCodes
	}
	return json.Marshal(toSerialize)
}

type NullableRecoveryCodeList struct {
	value *RecoveryCodeList
	isSet bool
}

func (v NullableRecoveryCodeList) Get() *RecoveryCodeList {
	return v.value
}

func (v *NullableRecoveryCodeList) Set(val *RecoveryCodeList) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryCodeList) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryCodeList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryCodeList(val *RecoveryCodeList) *NullableRecoveryCodeList {
	return &NullableRecoveryCodeList{value: val, isSet: true}
}

func (v NullableRecoveryCodeList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryCodeList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


