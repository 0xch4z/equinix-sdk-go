/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// LicenseList struct for LicenseList
type LicenseList struct {
	Licenses []License `json:"licenses,omitempty"`
}

// NewLicenseList instantiates a new LicenseList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseList() *LicenseList {
	this := LicenseList{}
	return &this
}

// NewLicenseListWithDefaults instantiates a new LicenseList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseListWithDefaults() *LicenseList {
	this := LicenseList{}
	return &this
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *LicenseList) GetLicenses() []License {
	if o == nil || o.Licenses == nil {
		var ret []License
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseList) GetLicensesOk() ([]License, bool) {
	if o == nil || o.Licenses == nil {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *LicenseList) HasLicenses() bool {
	if o != nil && o.Licenses != nil {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []License and assigns it to the Licenses field.
func (o *LicenseList) SetLicenses(v []License) {
	o.Licenses = v
}

func (o LicenseList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Licenses != nil {
		toSerialize["licenses"] = o.Licenses
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseList struct {
	value *LicenseList
	isSet bool
}

func (v NullableLicenseList) Get() *LicenseList {
	return v.value
}

func (v *NullableLicenseList) Set(val *LicenseList) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseList) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseList(val *LicenseList) *NullableLicenseList {
	return &NullableLicenseList{value: val, isSet: true}
}

func (v NullableLicenseList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


