/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// VolumeAttachmentList struct for VolumeAttachmentList
type VolumeAttachmentList struct {
	Attachments *[]VolumeAttachment `json:"attachments,omitempty"`
}

// NewVolumeAttachmentList instantiates a new VolumeAttachmentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeAttachmentList() *VolumeAttachmentList {
	this := VolumeAttachmentList{}
	return &this
}

// NewVolumeAttachmentListWithDefaults instantiates a new VolumeAttachmentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeAttachmentListWithDefaults() *VolumeAttachmentList {
	this := VolumeAttachmentList{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *VolumeAttachmentList) GetAttachments() []VolumeAttachment {
	if o == nil || o.Attachments == nil {
		var ret []VolumeAttachment
		return ret
	}
	return *o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeAttachmentList) GetAttachmentsOk() (*[]VolumeAttachment, bool) {
	if o == nil || o.Attachments == nil {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *VolumeAttachmentList) HasAttachments() bool {
	if o != nil && o.Attachments != nil {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []VolumeAttachment and assigns it to the Attachments field.
func (o *VolumeAttachmentList) SetAttachments(v []VolumeAttachment) {
	o.Attachments = &v
}

func (o VolumeAttachmentList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attachments != nil {
		toSerialize["attachments"] = o.Attachments
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeAttachmentList struct {
	value *VolumeAttachmentList
	isSet bool
}

func (v NullableVolumeAttachmentList) Get() *VolumeAttachmentList {
	return v.value
}

func (v *NullableVolumeAttachmentList) Set(val *VolumeAttachmentList) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeAttachmentList) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeAttachmentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeAttachmentList(val *VolumeAttachmentList) *NullableVolumeAttachmentList {
	return &NullableVolumeAttachmentList{value: val, isSet: true}
}

func (v NullableVolumeAttachmentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeAttachmentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


