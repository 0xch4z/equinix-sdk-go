/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// SubscribableEvent struct for SubscribableEvent
type SubscribableEvent struct {
	Id *string `json:"id,omitempty"`
	EventType *string `json:"event_type,omitempty"`
	EventName *string `json:"event_name,omitempty"`
	EventSlug *string `json:"event_slug,omitempty"`
}

// NewSubscribableEvent instantiates a new SubscribableEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscribableEvent() *SubscribableEvent {
	this := SubscribableEvent{}
	return &this
}

// NewSubscribableEventWithDefaults instantiates a new SubscribableEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscribableEventWithDefaults() *SubscribableEvent {
	this := SubscribableEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscribableEvent) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribableEvent) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscribableEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubscribableEvent) SetId(v string) {
	o.Id = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *SubscribableEvent) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribableEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *SubscribableEvent) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *SubscribableEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *SubscribableEvent) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribableEvent) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *SubscribableEvent) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *SubscribableEvent) SetEventName(v string) {
	o.EventName = &v
}

// GetEventSlug returns the EventSlug field value if set, zero value otherwise.
func (o *SubscribableEvent) GetEventSlug() string {
	if o == nil || o.EventSlug == nil {
		var ret string
		return ret
	}
	return *o.EventSlug
}

// GetEventSlugOk returns a tuple with the EventSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscribableEvent) GetEventSlugOk() (*string, bool) {
	if o == nil || o.EventSlug == nil {
		return nil, false
	}
	return o.EventSlug, true
}

// HasEventSlug returns a boolean if a field has been set.
func (o *SubscribableEvent) HasEventSlug() bool {
	if o != nil && o.EventSlug != nil {
		return true
	}

	return false
}

// SetEventSlug gets a reference to the given string and assigns it to the EventSlug field.
func (o *SubscribableEvent) SetEventSlug(v string) {
	o.EventSlug = &v
}

func (o SubscribableEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.EventType != nil {
		toSerialize["event_type"] = o.EventType
	}
	if o.EventName != nil {
		toSerialize["event_name"] = o.EventName
	}
	if o.EventSlug != nil {
		toSerialize["event_slug"] = o.EventSlug
	}
	return json.Marshal(toSerialize)
}

type NullableSubscribableEvent struct {
	value *SubscribableEvent
	isSet bool
}

func (v NullableSubscribableEvent) Get() *SubscribableEvent {
	return v.value
}

func (v *NullableSubscribableEvent) Set(val *SubscribableEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscribableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscribableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscribableEvent(val *SubscribableEvent) *NullableSubscribableEvent {
	return &NullableSubscribableEvent{value: val, isSet: true}
}

func (v NullableSubscribableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscribableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


