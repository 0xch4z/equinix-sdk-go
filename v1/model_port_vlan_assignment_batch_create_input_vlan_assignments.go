/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PortVlanAssignmentBatchCreateInputVlanAssignments struct for PortVlanAssignmentBatchCreateInputVlanAssignments
type PortVlanAssignmentBatchCreateInputVlanAssignments struct {
	Vlan *string `json:"vlan,omitempty"`
	State *string `json:"state,omitempty"`
	Native *bool `json:"native,omitempty"`
}

// NewPortVlanAssignmentBatchCreateInputVlanAssignments instantiates a new PortVlanAssignmentBatchCreateInputVlanAssignments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortVlanAssignmentBatchCreateInputVlanAssignments() *PortVlanAssignmentBatchCreateInputVlanAssignments {
	this := PortVlanAssignmentBatchCreateInputVlanAssignments{}
	return &this
}

// NewPortVlanAssignmentBatchCreateInputVlanAssignmentsWithDefaults instantiates a new PortVlanAssignmentBatchCreateInputVlanAssignments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortVlanAssignmentBatchCreateInputVlanAssignmentsWithDefaults() *PortVlanAssignmentBatchCreateInputVlanAssignments {
	this := PortVlanAssignmentBatchCreateInputVlanAssignments{}
	return &this
}

// GetVlan returns the Vlan field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) GetVlan() string {
	if o == nil || o.Vlan == nil {
		var ret string
		return ret
	}
	return *o.Vlan
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) GetVlanOk() (*string, bool) {
	if o == nil || o.Vlan == nil {
		return nil, false
	}
	return o.Vlan, true
}

// HasVlan returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) HasVlan() bool {
	if o != nil && o.Vlan != nil {
		return true
	}

	return false
}

// SetVlan gets a reference to the given string and assigns it to the Vlan field.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) SetVlan(v string) {
	o.Vlan = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) SetState(v string) {
	o.State = &v
}

// GetNative returns the Native field value if set, zero value otherwise.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) GetNative() bool {
	if o == nil || o.Native == nil {
		var ret bool
		return ret
	}
	return *o.Native
}

// GetNativeOk returns a tuple with the Native field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) GetNativeOk() (*bool, bool) {
	if o == nil || o.Native == nil {
		return nil, false
	}
	return o.Native, true
}

// HasNative returns a boolean if a field has been set.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) HasNative() bool {
	if o != nil && o.Native != nil {
		return true
	}

	return false
}

// SetNative gets a reference to the given bool and assigns it to the Native field.
func (o *PortVlanAssignmentBatchCreateInputVlanAssignments) SetNative(v bool) {
	o.Native = &v
}

func (o PortVlanAssignmentBatchCreateInputVlanAssignments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Vlan != nil {
		toSerialize["vlan"] = o.Vlan
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Native != nil {
		toSerialize["native"] = o.Native
	}
	return json.Marshal(toSerialize)
}

type NullablePortVlanAssignmentBatchCreateInputVlanAssignments struct {
	value *PortVlanAssignmentBatchCreateInputVlanAssignments
	isSet bool
}

func (v NullablePortVlanAssignmentBatchCreateInputVlanAssignments) Get() *PortVlanAssignmentBatchCreateInputVlanAssignments {
	return v.value
}

func (v *NullablePortVlanAssignmentBatchCreateInputVlanAssignments) Set(val *PortVlanAssignmentBatchCreateInputVlanAssignments) {
	v.value = val
	v.isSet = true
}

func (v NullablePortVlanAssignmentBatchCreateInputVlanAssignments) IsSet() bool {
	return v.isSet
}

func (v *NullablePortVlanAssignmentBatchCreateInputVlanAssignments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortVlanAssignmentBatchCreateInputVlanAssignments(val *PortVlanAssignmentBatchCreateInputVlanAssignments) *NullablePortVlanAssignmentBatchCreateInputVlanAssignments {
	return &NullablePortVlanAssignmentBatchCreateInputVlanAssignments{value: val, isSet: true}
}

func (v NullablePortVlanAssignmentBatchCreateInputVlanAssignments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortVlanAssignmentBatchCreateInputVlanAssignments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


