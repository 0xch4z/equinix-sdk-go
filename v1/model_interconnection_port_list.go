/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InterconnectionPortList struct for InterconnectionPortList
type InterconnectionPortList struct {
	Ports *[]InterconnectionPort `json:"ports,omitempty"`
}

// NewInterconnectionPortList instantiates a new InterconnectionPortList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnectionPortList() *InterconnectionPortList {
	this := InterconnectionPortList{}
	return &this
}

// NewInterconnectionPortListWithDefaults instantiates a new InterconnectionPortList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionPortListWithDefaults() *InterconnectionPortList {
	this := InterconnectionPortList{}
	return &this
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *InterconnectionPortList) GetPorts() []InterconnectionPort {
	if o == nil || o.Ports == nil {
		var ret []InterconnectionPort
		return ret
	}
	return *o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPortList) GetPortsOk() (*[]InterconnectionPort, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *InterconnectionPortList) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []InterconnectionPort and assigns it to the Ports field.
func (o *InterconnectionPortList) SetPorts(v []InterconnectionPort) {
	o.Ports = &v
}

func (o InterconnectionPortList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	return json.Marshal(toSerialize)
}

type NullableInterconnectionPortList struct {
	value *InterconnectionPortList
	isSet bool
}

func (v NullableInterconnectionPortList) Get() *InterconnectionPortList {
	return v.value
}

func (v *NullableInterconnectionPortList) Set(val *InterconnectionPortList) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionPortList) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionPortList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionPortList(val *InterconnectionPortList) *NullableInterconnectionPortList {
	return &NullableInterconnectionPortList{value: val, isSet: true}
}

func (v NullableInterconnectionPortList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionPortList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


