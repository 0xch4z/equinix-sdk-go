/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PlanVersion struct for PlanVersion
type PlanVersion struct {
	Id *string `json:"id,omitempty"`
	Slug *string `json:"slug,omitempty"`
	Name *string `json:"name,omitempty"`
	Specs *map[string]interface{} `json:"specs,omitempty"`
	Line *string `json:"line,omitempty"`
}

// NewPlanVersion instantiates a new PlanVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanVersion() *PlanVersion {
	this := PlanVersion{}
	return &this
}

// NewPlanVersionWithDefaults instantiates a new PlanVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanVersionWithDefaults() *PlanVersion {
	this := PlanVersion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlanVersion) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanVersion) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlanVersion) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlanVersion) SetId(v string) {
	o.Id = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *PlanVersion) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanVersion) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *PlanVersion) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *PlanVersion) SetSlug(v string) {
	o.Slug = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlanVersion) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanVersion) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlanVersion) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlanVersion) SetName(v string) {
	o.Name = &v
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *PlanVersion) GetSpecs() map[string]interface{} {
	if o == nil || o.Specs == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanVersion) GetSpecsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Specs == nil {
		return nil, false
	}
	return o.Specs, true
}

// HasSpecs returns a boolean if a field has been set.
func (o *PlanVersion) HasSpecs() bool {
	if o != nil && o.Specs != nil {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given map[string]interface{} and assigns it to the Specs field.
func (o *PlanVersion) SetSpecs(v map[string]interface{}) {
	o.Specs = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *PlanVersion) GetLine() string {
	if o == nil || o.Line == nil {
		var ret string
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanVersion) GetLineOk() (*string, bool) {
	if o == nil || o.Line == nil {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *PlanVersion) HasLine() bool {
	if o != nil && o.Line != nil {
		return true
	}

	return false
}

// SetLine gets a reference to the given string and assigns it to the Line field.
func (o *PlanVersion) SetLine(v string) {
	o.Line = &v
}

func (o PlanVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Specs != nil {
		toSerialize["specs"] = o.Specs
	}
	if o.Line != nil {
		toSerialize["line"] = o.Line
	}
	return json.Marshal(toSerialize)
}

type NullablePlanVersion struct {
	value *PlanVersion
	isSet bool
}

func (v NullablePlanVersion) Get() *PlanVersion {
	return v.value
}

func (v *NullablePlanVersion) Set(val *PlanVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanVersion(val *PlanVersion) *NullablePlanVersion {
	return &NullablePlanVersion{value: val, isSet: true}
}

func (v NullablePlanVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


