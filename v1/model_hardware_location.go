/*
 * Metal API
 *
 * This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// HardwareLocation struct for HardwareLocation
type HardwareLocation struct {
	Cage *string `json:"cage,omitempty"`
	Facility *string `json:"facility,omitempty"`
	Rack *string `json:"rack,omitempty"`
	Row *string `json:"row,omitempty"`
	Switch *string `json:"switch,omitempty"`
}

// NewHardwareLocation instantiates a new HardwareLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHardwareLocation() *HardwareLocation {
	this := HardwareLocation{}
	return &this
}

// NewHardwareLocationWithDefaults instantiates a new HardwareLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHardwareLocationWithDefaults() *HardwareLocation {
	this := HardwareLocation{}
	return &this
}

// GetCage returns the Cage field value if set, zero value otherwise.
func (o *HardwareLocation) GetCage() string {
	if o == nil || o.Cage == nil {
		var ret string
		return ret
	}
	return *o.Cage
}

// GetCageOk returns a tuple with the Cage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareLocation) GetCageOk() (*string, bool) {
	if o == nil || o.Cage == nil {
		return nil, false
	}
	return o.Cage, true
}

// HasCage returns a boolean if a field has been set.
func (o *HardwareLocation) HasCage() bool {
	if o != nil && o.Cage != nil {
		return true
	}

	return false
}

// SetCage gets a reference to the given string and assigns it to the Cage field.
func (o *HardwareLocation) SetCage(v string) {
	o.Cage = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *HardwareLocation) GetFacility() string {
	if o == nil || o.Facility == nil {
		var ret string
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareLocation) GetFacilityOk() (*string, bool) {
	if o == nil || o.Facility == nil {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *HardwareLocation) HasFacility() bool {
	if o != nil && o.Facility != nil {
		return true
	}

	return false
}

// SetFacility gets a reference to the given string and assigns it to the Facility field.
func (o *HardwareLocation) SetFacility(v string) {
	o.Facility = &v
}

// GetRack returns the Rack field value if set, zero value otherwise.
func (o *HardwareLocation) GetRack() string {
	if o == nil || o.Rack == nil {
		var ret string
		return ret
	}
	return *o.Rack
}

// GetRackOk returns a tuple with the Rack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareLocation) GetRackOk() (*string, bool) {
	if o == nil || o.Rack == nil {
		return nil, false
	}
	return o.Rack, true
}

// HasRack returns a boolean if a field has been set.
func (o *HardwareLocation) HasRack() bool {
	if o != nil && o.Rack != nil {
		return true
	}

	return false
}

// SetRack gets a reference to the given string and assigns it to the Rack field.
func (o *HardwareLocation) SetRack(v string) {
	o.Rack = &v
}

// GetRow returns the Row field value if set, zero value otherwise.
func (o *HardwareLocation) GetRow() string {
	if o == nil || o.Row == nil {
		var ret string
		return ret
	}
	return *o.Row
}

// GetRowOk returns a tuple with the Row field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareLocation) GetRowOk() (*string, bool) {
	if o == nil || o.Row == nil {
		return nil, false
	}
	return o.Row, true
}

// HasRow returns a boolean if a field has been set.
func (o *HardwareLocation) HasRow() bool {
	if o != nil && o.Row != nil {
		return true
	}

	return false
}

// SetRow gets a reference to the given string and assigns it to the Row field.
func (o *HardwareLocation) SetRow(v string) {
	o.Row = &v
}

// GetSwitch returns the Switch field value if set, zero value otherwise.
func (o *HardwareLocation) GetSwitch() string {
	if o == nil || o.Switch == nil {
		var ret string
		return ret
	}
	return *o.Switch
}

// GetSwitchOk returns a tuple with the Switch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HardwareLocation) GetSwitchOk() (*string, bool) {
	if o == nil || o.Switch == nil {
		return nil, false
	}
	return o.Switch, true
}

// HasSwitch returns a boolean if a field has been set.
func (o *HardwareLocation) HasSwitch() bool {
	if o != nil && o.Switch != nil {
		return true
	}

	return false
}

// SetSwitch gets a reference to the given string and assigns it to the Switch field.
func (o *HardwareLocation) SetSwitch(v string) {
	o.Switch = &v
}

func (o HardwareLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cage != nil {
		toSerialize["cage"] = o.Cage
	}
	if o.Facility != nil {
		toSerialize["facility"] = o.Facility
	}
	if o.Rack != nil {
		toSerialize["rack"] = o.Rack
	}
	if o.Row != nil {
		toSerialize["row"] = o.Row
	}
	if o.Switch != nil {
		toSerialize["switch"] = o.Switch
	}
	return json.Marshal(toSerialize)
}

type NullableHardwareLocation struct {
	value *HardwareLocation
	isSet bool
}

func (v NullableHardwareLocation) Get() *HardwareLocation {
	return v.value
}

func (v *NullableHardwareLocation) Set(val *HardwareLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareLocation(val *HardwareLocation) *NullableHardwareLocation {
	return &NullableHardwareLocation{value: val, isSet: true}
}

func (v NullableHardwareLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


