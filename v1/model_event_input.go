/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// EventInput struct for EventInput
type EventInput struct {
	Type *string `json:"type,omitempty"`
	Body *string `json:"body,omitempty"`
	State *string `json:"state,omitempty"`
	Private *bool `json:"private,omitempty"`
}

// NewEventInput instantiates a new EventInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventInput() *EventInput {
	this := EventInput{}
	return &this
}

// NewEventInputWithDefaults instantiates a new EventInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventInputWithDefaults() *EventInput {
	this := EventInput{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventInput) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInput) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventInput) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventInput) SetType(v string) {
	o.Type = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *EventInput) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInput) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *EventInput) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *EventInput) SetBody(v string) {
	o.Body = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EventInput) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInput) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EventInput) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EventInput) SetState(v string) {
	o.State = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *EventInput) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInput) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *EventInput) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *EventInput) SetPrivate(v bool) {
	o.Private = &v
}

func (o EventInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	return json.Marshal(toSerialize)
}

type NullableEventInput struct {
	value *EventInput
	isSet bool
}

func (v NullableEventInput) Get() *EventInput {
	return v.value
}

func (v *NullableEventInput) Set(val *EventInput) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInput) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInput(val *EventInput) *NullableEventInput {
	return &NullableEventInput{value: val, isSet: true}
}

func (v NullableEventInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


