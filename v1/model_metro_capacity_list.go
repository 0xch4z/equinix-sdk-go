/*
 * Metal API
 *
 * This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// MetroCapacityList struct for MetroCapacityList
type MetroCapacityList struct {
	Capacity *MetroCapacityReport `json:"capacity,omitempty"`
}

// NewMetroCapacityList instantiates a new MetroCapacityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroCapacityList() *MetroCapacityList {
	this := MetroCapacityList{}
	return &this
}

// NewMetroCapacityListWithDefaults instantiates a new MetroCapacityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroCapacityListWithDefaults() *MetroCapacityList {
	this := MetroCapacityList{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *MetroCapacityList) GetCapacity() MetroCapacityReport {
	if o == nil || o.Capacity == nil {
		var ret MetroCapacityReport
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroCapacityList) GetCapacityOk() (*MetroCapacityReport, bool) {
	if o == nil || o.Capacity == nil {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *MetroCapacityList) HasCapacity() bool {
	if o != nil && o.Capacity != nil {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given MetroCapacityReport and assigns it to the Capacity field.
func (o *MetroCapacityList) SetCapacity(v MetroCapacityReport) {
	o.Capacity = &v
}

func (o MetroCapacityList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capacity != nil {
		toSerialize["capacity"] = o.Capacity
	}
	return json.Marshal(toSerialize)
}

type NullableMetroCapacityList struct {
	value *MetroCapacityList
	isSet bool
}

func (v NullableMetroCapacityList) Get() *MetroCapacityList {
	return v.value
}

func (v *NullableMetroCapacityList) Set(val *MetroCapacityList) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroCapacityList) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroCapacityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroCapacityList(val *MetroCapacityList) *NullableMetroCapacityList {
	return &NullableMetroCapacityList{value: val, isSet: true}
}

func (v NullableMetroCapacityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroCapacityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


