/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DeviceUsageList struct for DeviceUsageList
type DeviceUsageList struct {
	Usages *[]DeviceUsage `json:"usages,omitempty"`
}

// NewDeviceUsageList instantiates a new DeviceUsageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceUsageList() *DeviceUsageList {
	this := DeviceUsageList{}
	return &this
}

// NewDeviceUsageListWithDefaults instantiates a new DeviceUsageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceUsageListWithDefaults() *DeviceUsageList {
	this := DeviceUsageList{}
	return &this
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *DeviceUsageList) GetUsages() []DeviceUsage {
	if o == nil || o.Usages == nil {
		var ret []DeviceUsage
		return ret
	}
	return *o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceUsageList) GetUsagesOk() (*[]DeviceUsage, bool) {
	if o == nil || o.Usages == nil {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *DeviceUsageList) HasUsages() bool {
	if o != nil && o.Usages != nil {
		return true
	}

	return false
}

// SetUsages gets a reference to the given []DeviceUsage and assigns it to the Usages field.
func (o *DeviceUsageList) SetUsages(v []DeviceUsage) {
	o.Usages = &v
}

func (o DeviceUsageList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Usages != nil {
		toSerialize["usages"] = o.Usages
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceUsageList struct {
	value *DeviceUsageList
	isSet bool
}

func (v NullableDeviceUsageList) Get() *DeviceUsageList {
	return v.value
}

func (v *NullableDeviceUsageList) Set(val *DeviceUsageList) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceUsageList) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceUsageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceUsageList(val *DeviceUsageList) *NullableDeviceUsageList {
	return &NullableDeviceUsageList{value: val, isSet: true}
}

func (v NullableDeviceUsageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceUsageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


