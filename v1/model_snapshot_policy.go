/*
 * Metal API
 *
 * This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"time"
)

// SnapshotPolicy struct for SnapshotPolicy
type SnapshotPolicy struct {
	Id *string `json:"id,omitempty"`
	SnapshotCount *int32 `json:"snapshot_count,omitempty"`
	SnapshotFrequency *string `json:"snapshot_frequency,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Volume *Href `json:"volume,omitempty"`
	Href *string `json:"href,omitempty"`
}

// NewSnapshotPolicy instantiates a new SnapshotPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotPolicy() *SnapshotPolicy {
	this := SnapshotPolicy{}
	return &this
}

// NewSnapshotPolicyWithDefaults instantiates a new SnapshotPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotPolicyWithDefaults() *SnapshotPolicy {
	this := SnapshotPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SnapshotPolicy) SetId(v string) {
	o.Id = &v
}

// GetSnapshotCount returns the SnapshotCount field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetSnapshotCount() int32 {
	if o == nil || o.SnapshotCount == nil {
		var ret int32
		return ret
	}
	return *o.SnapshotCount
}

// GetSnapshotCountOk returns a tuple with the SnapshotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetSnapshotCountOk() (*int32, bool) {
	if o == nil || o.SnapshotCount == nil {
		return nil, false
	}
	return o.SnapshotCount, true
}

// HasSnapshotCount returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasSnapshotCount() bool {
	if o != nil && o.SnapshotCount != nil {
		return true
	}

	return false
}

// SetSnapshotCount gets a reference to the given int32 and assigns it to the SnapshotCount field.
func (o *SnapshotPolicy) SetSnapshotCount(v int32) {
	o.SnapshotCount = &v
}

// GetSnapshotFrequency returns the SnapshotFrequency field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetSnapshotFrequency() string {
	if o == nil || o.SnapshotFrequency == nil {
		var ret string
		return ret
	}
	return *o.SnapshotFrequency
}

// GetSnapshotFrequencyOk returns a tuple with the SnapshotFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetSnapshotFrequencyOk() (*string, bool) {
	if o == nil || o.SnapshotFrequency == nil {
		return nil, false
	}
	return o.SnapshotFrequency, true
}

// HasSnapshotFrequency returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasSnapshotFrequency() bool {
	if o != nil && o.SnapshotFrequency != nil {
		return true
	}

	return false
}

// SetSnapshotFrequency gets a reference to the given string and assigns it to the SnapshotFrequency field.
func (o *SnapshotPolicy) SetSnapshotFrequency(v string) {
	o.SnapshotFrequency = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SnapshotPolicy) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SnapshotPolicy) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetVolume() Href {
	if o == nil || o.Volume == nil {
		var ret Href
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetVolumeOk() (*Href, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given Href and assigns it to the Volume field.
func (o *SnapshotPolicy) SetVolume(v Href) {
	o.Volume = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SnapshotPolicy) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotPolicy) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SnapshotPolicy) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SnapshotPolicy) SetHref(v string) {
	o.Href = &v
}

func (o SnapshotPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SnapshotCount != nil {
		toSerialize["snapshot_count"] = o.SnapshotCount
	}
	if o.SnapshotFrequency != nil {
		toSerialize["snapshot_frequency"] = o.SnapshotFrequency
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotPolicy struct {
	value *SnapshotPolicy
	isSet bool
}

func (v NullableSnapshotPolicy) Get() *SnapshotPolicy {
	return v.value
}

func (v *NullableSnapshotPolicy) Set(val *SnapshotPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotPolicy(val *SnapshotPolicy) *NullableSnapshotPolicy {
	return &NullableSnapshotPolicy{value: val, isSet: true}
}

func (v NullableSnapshotPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


