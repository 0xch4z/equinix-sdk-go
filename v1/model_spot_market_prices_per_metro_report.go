/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// SpotMarketPricesPerMetroReport struct for SpotMarketPricesPerMetroReport
type SpotMarketPricesPerMetroReport struct {
	Ny *SpotPricesPerFacility `json:"ny,omitempty"`
	Sv *SpotPricesPerFacility `json:"sv,omitempty"`
	Am *SpotPricesPerFacility `json:"am,omitempty"`
	Ch *SpotPricesPerFacility `json:"ch,omitempty"`
	La *SpotPricesPerFacility `json:"la,omitempty"`
	Sg *SpotPricesPerFacility `json:"sg,omitempty"`
	Da *SpotPricesPerFacility `json:"da,omitempty"`
}

// NewSpotMarketPricesPerMetroReport instantiates a new SpotMarketPricesPerMetroReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotMarketPricesPerMetroReport() *SpotMarketPricesPerMetroReport {
	this := SpotMarketPricesPerMetroReport{}
	return &this
}

// NewSpotMarketPricesPerMetroReportWithDefaults instantiates a new SpotMarketPricesPerMetroReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotMarketPricesPerMetroReportWithDefaults() *SpotMarketPricesPerMetroReport {
	this := SpotMarketPricesPerMetroReport{}
	return &this
}

// GetNy returns the Ny field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetNy() SpotPricesPerFacility {
	if o == nil || o.Ny == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Ny
}

// GetNyOk returns a tuple with the Ny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetNyOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.Ny == nil {
		return nil, false
	}
	return o.Ny, true
}

// HasNy returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasNy() bool {
	if o != nil && o.Ny != nil {
		return true
	}

	return false
}

// SetNy gets a reference to the given SpotPricesPerFacility and assigns it to the Ny field.
func (o *SpotMarketPricesPerMetroReport) SetNy(v SpotPricesPerFacility) {
	o.Ny = &v
}

// GetSv returns the Sv field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetSv() SpotPricesPerFacility {
	if o == nil || o.Sv == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Sv
}

// GetSvOk returns a tuple with the Sv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetSvOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.Sv == nil {
		return nil, false
	}
	return o.Sv, true
}

// HasSv returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasSv() bool {
	if o != nil && o.Sv != nil {
		return true
	}

	return false
}

// SetSv gets a reference to the given SpotPricesPerFacility and assigns it to the Sv field.
func (o *SpotMarketPricesPerMetroReport) SetSv(v SpotPricesPerFacility) {
	o.Sv = &v
}

// GetAm returns the Am field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetAm() SpotPricesPerFacility {
	if o == nil || o.Am == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Am
}

// GetAmOk returns a tuple with the Am field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetAmOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.Am == nil {
		return nil, false
	}
	return o.Am, true
}

// HasAm returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasAm() bool {
	if o != nil && o.Am != nil {
		return true
	}

	return false
}

// SetAm gets a reference to the given SpotPricesPerFacility and assigns it to the Am field.
func (o *SpotMarketPricesPerMetroReport) SetAm(v SpotPricesPerFacility) {
	o.Am = &v
}

// GetCh returns the Ch field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetCh() SpotPricesPerFacility {
	if o == nil || o.Ch == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Ch
}

// GetChOk returns a tuple with the Ch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetChOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.Ch == nil {
		return nil, false
	}
	return o.Ch, true
}

// HasCh returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasCh() bool {
	if o != nil && o.Ch != nil {
		return true
	}

	return false
}

// SetCh gets a reference to the given SpotPricesPerFacility and assigns it to the Ch field.
func (o *SpotMarketPricesPerMetroReport) SetCh(v SpotPricesPerFacility) {
	o.Ch = &v
}

// GetLa returns the La field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetLa() SpotPricesPerFacility {
	if o == nil || o.La == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.La
}

// GetLaOk returns a tuple with the La field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetLaOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.La == nil {
		return nil, false
	}
	return o.La, true
}

// HasLa returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasLa() bool {
	if o != nil && o.La != nil {
		return true
	}

	return false
}

// SetLa gets a reference to the given SpotPricesPerFacility and assigns it to the La field.
func (o *SpotMarketPricesPerMetroReport) SetLa(v SpotPricesPerFacility) {
	o.La = &v
}

// GetSg returns the Sg field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetSg() SpotPricesPerFacility {
	if o == nil || o.Sg == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Sg
}

// GetSgOk returns a tuple with the Sg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetSgOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.Sg == nil {
		return nil, false
	}
	return o.Sg, true
}

// HasSg returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasSg() bool {
	if o != nil && o.Sg != nil {
		return true
	}

	return false
}

// SetSg gets a reference to the given SpotPricesPerFacility and assigns it to the Sg field.
func (o *SpotMarketPricesPerMetroReport) SetSg(v SpotPricesPerFacility) {
	o.Sg = &v
}

// GetDa returns the Da field value if set, zero value otherwise.
func (o *SpotMarketPricesPerMetroReport) GetDa() SpotPricesPerFacility {
	if o == nil || o.Da == nil {
		var ret SpotPricesPerFacility
		return ret
	}
	return *o.Da
}

// GetDaOk returns a tuple with the Da field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotMarketPricesPerMetroReport) GetDaOk() (*SpotPricesPerFacility, bool) {
	if o == nil || o.Da == nil {
		return nil, false
	}
	return o.Da, true
}

// HasDa returns a boolean if a field has been set.
func (o *SpotMarketPricesPerMetroReport) HasDa() bool {
	if o != nil && o.Da != nil {
		return true
	}

	return false
}

// SetDa gets a reference to the given SpotPricesPerFacility and assigns it to the Da field.
func (o *SpotMarketPricesPerMetroReport) SetDa(v SpotPricesPerFacility) {
	o.Da = &v
}

func (o SpotMarketPricesPerMetroReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ny != nil {
		toSerialize["ny"] = o.Ny
	}
	if o.Sv != nil {
		toSerialize["sv"] = o.Sv
	}
	if o.Am != nil {
		toSerialize["am"] = o.Am
	}
	if o.Ch != nil {
		toSerialize["ch"] = o.Ch
	}
	if o.La != nil {
		toSerialize["la"] = o.La
	}
	if o.Sg != nil {
		toSerialize["sg"] = o.Sg
	}
	if o.Da != nil {
		toSerialize["da"] = o.Da
	}
	return json.Marshal(toSerialize)
}

type NullableSpotMarketPricesPerMetroReport struct {
	value *SpotMarketPricesPerMetroReport
	isSet bool
}

func (v NullableSpotMarketPricesPerMetroReport) Get() *SpotMarketPricesPerMetroReport {
	return v.value
}

func (v *NullableSpotMarketPricesPerMetroReport) Set(val *SpotMarketPricesPerMetroReport) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotMarketPricesPerMetroReport) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotMarketPricesPerMetroReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotMarketPricesPerMetroReport(val *SpotMarketPricesPerMetroReport) *NullableSpotMarketPricesPerMetroReport {
	return &NullableSpotMarketPricesPerMetroReport{value: val, isSet: true}
}

func (v NullableSpotMarketPricesPerMetroReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotMarketPricesPerMetroReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


