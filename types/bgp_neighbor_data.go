// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BGPNeighborData Bgp neighbor data
//
// swagger:model BgpNeighborData
type BGPNeighborData struct {

	// Address Family for IP Address
	AddressFamily int64 `json:"address_family,omitempty"`

	// The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.
	CustomerAs int64 `json:"customer_as,omitempty"`

	// The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.
	CustomerIP string `json:"customer_ip,omitempty"`

	// True if an MD5 password is configured for the project.
	Md5Enabled bool `json:"md5_enabled,omitempty"`

	// The MD5 password configured for the project, if set.
	Md5Password string `json:"md5_password,omitempty"`

	// True when the BGP session should be configured as multihop.
	Multihop bool `json:"multihop,omitempty"`

	// The Peer ASN to use when configuring BGP on your device.
	PeerAs int64 `json:"peer_as,omitempty"`

	// A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.
	PeerIps []string `json:"peer_ips"`

	// A list of project subnets
	RoutesIn []*BGPNeighborDataRoutesInItems0 `json:"routes_in"`

	// A list of outgoing routes. Only populated if the BGP session has default route enabled.
	RoutesOut []*BGPNeighborDataRoutesOutItems0 `json:"routes_out"`
}

// Validate validates this Bgp neighbor data
func (m *BGPNeighborData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoutesIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutesOut(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BGPNeighborData) validateRoutesIn(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutesIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutesIn); i++ {
		if swag.IsZero(m.RoutesIn[i]) { // not required
			continue
		}

		if m.RoutesIn[i] != nil {
			if err := m.RoutesIn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes_in" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BGPNeighborData) validateRoutesOut(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutesOut) { // not required
		return nil
	}

	for i := 0; i < len(m.RoutesOut); i++ {
		if swag.IsZero(m.RoutesOut[i]) { // not required
			continue
		}

		if m.RoutesOut[i] != nil {
			if err := m.RoutesOut[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes_out" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BGPNeighborData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPNeighborData) UnmarshalBinary(b []byte) error {
	var res BGPNeighborData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPNeighborDataRoutesInItems0 BGP neighbor data routes in items0
//
// swagger:model BGPNeighborDataRoutesInItems0
type BGPNeighborDataRoutesInItems0 struct {

	// exact
	Exact bool `json:"exact,omitempty"`

	// A project network
	Route string `json:"route,omitempty"`
}

// Validate validates this BGP neighbor data routes in items0
func (m *BGPNeighborDataRoutesInItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPNeighborDataRoutesInItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPNeighborDataRoutesInItems0) UnmarshalBinary(b []byte) error {
	var res BGPNeighborDataRoutesInItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BGPNeighborDataRoutesOutItems0 BGP neighbor data routes out items0
//
// swagger:model BGPNeighborDataRoutesOutItems0
type BGPNeighborDataRoutesOutItems0 struct {

	// exact
	Exact bool `json:"exact,omitempty"`

	// route
	Route string `json:"route,omitempty"`
}

// Validate validates this BGP neighbor data routes out items0
func (m *BGPNeighborDataRoutesOutItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPNeighborDataRoutesOutItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPNeighborDataRoutesOutItems0) UnmarshalBinary(b []byte) error {
	var res BGPNeighborDataRoutesOutItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
