// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SpotMarketRequestCreateInput spot market request create input
//
// swagger:model SpotMarketRequestCreateInput
type SpotMarketRequestCreateInput struct {

	// devices max
	DevicesMax int64 `json:"devices_max,omitempty"`

	// devices min
	DevicesMin int64 `json:"devices_min,omitempty"`

	// end at
	// Format: date-time
	EndAt strfmt.DateTime `json:"end_at,omitempty"`

	// facilities
	Facilities []strfmt.UUID `json:"facilities"`

	// instance attributes
	InstanceAttributes *SpotMarketRequestCreateInputInstanceAttributes `json:"instance_attributes,omitempty"`

	// max bid price
	MaxBidPrice float32 `json:"max_bid_price,omitempty"`
}

// Validate validates this spot market request create input
func (m *SpotMarketRequestCreateInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpotMarketRequestCreateInput) validateEndAt(formats strfmt.Registry) error {
	if swag.IsZero(m.EndAt) { // not required
		return nil
	}

	if err := validate.FormatOf("end_at", "body", "date-time", m.EndAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SpotMarketRequestCreateInput) validateFacilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Facilities) { // not required
		return nil
	}

	for i := 0; i < len(m.Facilities); i++ {

		if err := validate.FormatOf("facilities"+"."+strconv.Itoa(i), "body", "uuid", m.Facilities[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SpotMarketRequestCreateInput) validateInstanceAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.InstanceAttributes) { // not required
		return nil
	}

	if m.InstanceAttributes != nil {
		if err := m.InstanceAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_attributes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this spot market request create input based on the context it is used
func (m *SpotMarketRequestCreateInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstanceAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpotMarketRequestCreateInput) contextValidateInstanceAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.InstanceAttributes != nil {
		if err := m.InstanceAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instance_attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpotMarketRequestCreateInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpotMarketRequestCreateInput) UnmarshalBinary(b []byte) error {
	var res SpotMarketRequestCreateInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SpotMarketRequestCreateInputInstanceAttributes spot market request create input instance attributes
//
// swagger:model SpotMarketRequestCreateInputInstanceAttributes
type SpotMarketRequestCreateInputInstanceAttributes struct {

	// always pxe
	AlwaysPxe bool `json:"always_pxe,omitempty"`

	// billing cycle
	BillingCycle string `json:"billing_cycle,omitempty"`

	// customdata
	Customdata interface{} `json:"customdata,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// features
	Features []string `json:"features"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// hostnames
	Hostnames []string `json:"hostnames"`

	// locked
	Locked bool `json:"locked,omitempty"`

	// operating system
	OperatingSystem string `json:"operating_system,omitempty"`

	// plan
	Plan string `json:"plan,omitempty"`

	// private ipv4 subnet size
	PrivateIPV4SubnetSize int64 `json:"private_ipv4_subnet_size,omitempty"`

	// project ssh keys
	ProjectSSHKeys []strfmt.UUID `json:"project_ssh_keys"`

	// public ipv4 subnet size
	PublicIPV4SubnetSize int64 `json:"public_ipv4_subnet_size,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// termination time
	// Format: date-time
	TerminationTime strfmt.DateTime `json:"termination_time,omitempty"`

	// The UUIDs of users whose SSH keys should be included on the provisioned device.
	UserSSHKeys []strfmt.UUID `json:"user_ssh_keys"`

	// userdata
	Userdata string `json:"userdata,omitempty"`
}

// Validate validates this spot market request create input instance attributes
func (m *SpotMarketRequestCreateInputInstanceAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectSSHKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserSSHKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpotMarketRequestCreateInputInstanceAttributes) validateProjectSSHKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectSSHKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.ProjectSSHKeys); i++ {

		if err := validate.FormatOf("instance_attributes"+"."+"project_ssh_keys"+"."+strconv.Itoa(i), "body", "uuid", m.ProjectSSHKeys[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SpotMarketRequestCreateInputInstanceAttributes) validateTerminationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.TerminationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("instance_attributes"+"."+"termination_time", "body", "date-time", m.TerminationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SpotMarketRequestCreateInputInstanceAttributes) validateUserSSHKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.UserSSHKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.UserSSHKeys); i++ {

		if err := validate.FormatOf("instance_attributes"+"."+"user_ssh_keys"+"."+strconv.Itoa(i), "body", "uuid", m.UserSSHKeys[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this spot market request create input instance attributes based on context it is used
func (m *SpotMarketRequestCreateInputInstanceAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SpotMarketRequestCreateInputInstanceAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpotMarketRequestCreateInputInstanceAttributes) UnmarshalBinary(b []byte) error {
	var res SpotMarketRequestCreateInputInstanceAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
