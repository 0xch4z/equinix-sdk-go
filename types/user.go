// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// avatar thumb url
	AvatarThumbURL string `json:"avatar_thumb_url,omitempty"`

	// avatar url
	AvatarURL string `json:"avatar_url,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// customdata
	Customdata interface{} `json:"customdata,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// emails
	Emails []*Href `json:"emails"`

	// first name
	FirstName string `json:"first_name,omitempty"`

	// fraud score
	FraudScore string `json:"fraud_score,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// last login at
	// Format: date-time
	LastLoginAt strfmt.DateTime `json:"last_login_at,omitempty"`

	// last name
	LastName string `json:"last_name,omitempty"`

	// max organizations
	MaxOrganizations int64 `json:"max_organizations,omitempty"`

	// max projects
	MaxProjects int64 `json:"max_projects,omitempty"`

	// phone number
	PhoneNumber string `json:"phone_number,omitempty"`

	// short id
	ShortID string `json:"short_id,omitempty"`

	// timezone
	Timezone string `json:"timezone,omitempty"`

	// two factor auth
	TwoFactorAuth string `json:"two_factor_auth,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastLoginAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLoginAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_login_at", "body", "date-time", m.LastLoginAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
