// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPAssignment IP assignment
//
// swagger:model IPAssignment
type IPAssignment struct {

	// address
	Address string `json:"address,omitempty"`

	// address family
	AddressFamily int64 `json:"address_family,omitempty"`

	// assigned to
	AssignedTo *Href `json:"assigned_to,omitempty"`

	// cidr
	Cidr int64 `json:"cidr,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// gateway
	Gateway string `json:"gateway,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// manageable
	Manageable bool `json:"manageable,omitempty"`

	// management
	Management bool `json:"management,omitempty"`

	// netmask
	Netmask string `json:"netmask,omitempty"`

	// network
	Network string `json:"network,omitempty"`

	// parent block
	ParentBlock *ParentBlock `json:"parent_block,omitempty"`

	// public
	Public bool `json:"public,omitempty"`
}

// Validate validates this IP assignment
func (m *IPAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentBlock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAssignment) validateAssignedTo(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedTo) { // not required
		return nil
	}

	if m.AssignedTo != nil {
		if err := m.AssignedTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_to")
			}
			return err
		}
	}

	return nil
}

func (m *IPAssignment) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IPAssignment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *IPAssignment) validateParentBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentBlock) { // not required
		return nil
	}

	if m.ParentBlock != nil {
		if err := m.ParentBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_block")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this IP assignment based on the context it is used
func (m *IPAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPAssignment) contextValidateAssignedTo(ctx context.Context, formats strfmt.Registry) error {

	if m.AssignedTo != nil {
		if err := m.AssignedTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assigned_to")
			}
			return err
		}
	}

	return nil
}

func (m *IPAssignment) contextValidateParentBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentBlock != nil {
		if err := m.ParentBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parent_block")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPAssignment) UnmarshalBinary(b []byte) error {
	var res IPAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
