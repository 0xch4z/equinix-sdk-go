// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualCircuit virtual circuit
//
// swagger:model VirtualCircuit
type VirtualCircuit struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nni vlan
	NniVLAN int64 `json:"nni_vlan,omitempty"`

	// project
	Project *Href `json:"project,omitempty"`

	// integer representing bps speed
	Speed int64 `json:"speed,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// virtual network
	VirtualNetwork *Href `json:"virtual_network,omitempty"`

	// vnid
	Vnid int64 `json:"vnid,omitempty"`
}

// Validate validates this virtual circuit
func (m *VirtualCircuit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualCircuit) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualCircuit) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualCircuit) validateVirtualNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualNetwork) { // not required
		return nil
	}

	if m.VirtualNetwork != nil {
		if err := m.VirtualNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtual_network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualCircuit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualCircuit) UnmarshalBinary(b []byte) error {
	var res VirtualCircuit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
