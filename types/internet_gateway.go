// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternetGateway internet gateway
//
// swagger:model InternetGateway
type InternetGateway struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// created by
	CreatedBy string `json:"created_by,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// ip reservations
	IPReservations []*Href `json:"ip_reservations"`

	// virtual network
	VirtualNetwork *Href `json:"virtual_network,omitempty"`
}

// Validate validates this internet gateway
func (m *InternetGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPReservations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetwork(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternetGateway) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternetGateway) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InternetGateway) validateIPReservations(formats strfmt.Registry) error {
	if swag.IsZero(m.IPReservations) { // not required
		return nil
	}

	for i := 0; i < len(m.IPReservations); i++ {
		if swag.IsZero(m.IPReservations[i]) { // not required
			continue
		}

		if m.IPReservations[i] != nil {
			if err := m.IPReservations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_reservations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InternetGateway) validateVirtualNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualNetwork) { // not required
		return nil
	}

	if m.VirtualNetwork != nil {
		if err := m.VirtualNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtual_network")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this internet gateway based on the context it is used
func (m *InternetGateway) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPReservations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternetGateway) contextValidateIPReservations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPReservations); i++ {

		if m.IPReservations[i] != nil {
			if err := m.IPReservations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_reservations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InternetGateway) contextValidateVirtualNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualNetwork != nil {
		if err := m.VirtualNetwork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtual_network")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternetGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternetGateway) UnmarshalBinary(b []byte) error {
	var res InternetGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
