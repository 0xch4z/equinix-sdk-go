// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CapacityReport capacity report
//
// swagger:model CapacityReport
type CapacityReport struct {

	// ams1
	Ams1 *CapacityPerFacility `json:"ams1,omitempty"`

	// atl1
	Atl1 *CapacityPerNewFacility `json:"atl1,omitempty"`

	// dfw1
	Dfw1 *CapacityPerNewFacility `json:"dfw1,omitempty"`

	// ewr1
	Ewr1 *CapacityPerFacility `json:"ewr1,omitempty"`

	// fra1
	Fra1 *CapacityPerNewFacility `json:"fra1,omitempty"`

	// iad1
	Iad1 *CapacityPerNewFacility `json:"iad1,omitempty"`

	// lax1
	Lax1 *CapacityPerNewFacility `json:"lax1,omitempty"`

	// nrt1
	Nrt1 *CapacityPerFacility `json:"nrt1,omitempty"`

	// ord1
	Ord1 *CapacityPerNewFacility `json:"ord1,omitempty"`

	// sea1
	Sea1 *CapacityPerNewFacility `json:"sea1,omitempty"`

	// sin1
	Sin1 *CapacityPerNewFacility `json:"sin1,omitempty"`

	// sjc1
	Sjc1 *CapacityPerFacility `json:"sjc1,omitempty"`

	// syd1
	Syd1 *CapacityPerNewFacility `json:"syd1,omitempty"`

	// yyz1
	Yyz1 *CapacityPerNewFacility `json:"yyz1,omitempty"`
}

// Validate validates this capacity report
func (m *CapacityReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAms1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAtl1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDfw1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEwr1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFra1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIad1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLax1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNrt1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrd1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSea1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSin1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSjc1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyd1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYyz1(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapacityReport) validateAms1(formats strfmt.Registry) error {
	if swag.IsZero(m.Ams1) { // not required
		return nil
	}

	if m.Ams1 != nil {
		if err := m.Ams1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ams1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateAtl1(formats strfmt.Registry) error {
	if swag.IsZero(m.Atl1) { // not required
		return nil
	}

	if m.Atl1 != nil {
		if err := m.Atl1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atl1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateDfw1(formats strfmt.Registry) error {
	if swag.IsZero(m.Dfw1) { // not required
		return nil
	}

	if m.Dfw1 != nil {
		if err := m.Dfw1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dfw1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateEwr1(formats strfmt.Registry) error {
	if swag.IsZero(m.Ewr1) { // not required
		return nil
	}

	if m.Ewr1 != nil {
		if err := m.Ewr1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ewr1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateFra1(formats strfmt.Registry) error {
	if swag.IsZero(m.Fra1) { // not required
		return nil
	}

	if m.Fra1 != nil {
		if err := m.Fra1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fra1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateIad1(formats strfmt.Registry) error {
	if swag.IsZero(m.Iad1) { // not required
		return nil
	}

	if m.Iad1 != nil {
		if err := m.Iad1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iad1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateLax1(formats strfmt.Registry) error {
	if swag.IsZero(m.Lax1) { // not required
		return nil
	}

	if m.Lax1 != nil {
		if err := m.Lax1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lax1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateNrt1(formats strfmt.Registry) error {
	if swag.IsZero(m.Nrt1) { // not required
		return nil
	}

	if m.Nrt1 != nil {
		if err := m.Nrt1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nrt1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateOrd1(formats strfmt.Registry) error {
	if swag.IsZero(m.Ord1) { // not required
		return nil
	}

	if m.Ord1 != nil {
		if err := m.Ord1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ord1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateSea1(formats strfmt.Registry) error {
	if swag.IsZero(m.Sea1) { // not required
		return nil
	}

	if m.Sea1 != nil {
		if err := m.Sea1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sea1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateSin1(formats strfmt.Registry) error {
	if swag.IsZero(m.Sin1) { // not required
		return nil
	}

	if m.Sin1 != nil {
		if err := m.Sin1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sin1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateSjc1(formats strfmt.Registry) error {
	if swag.IsZero(m.Sjc1) { // not required
		return nil
	}

	if m.Sjc1 != nil {
		if err := m.Sjc1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sjc1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateSyd1(formats strfmt.Registry) error {
	if swag.IsZero(m.Syd1) { // not required
		return nil
	}

	if m.Syd1 != nil {
		if err := m.Syd1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syd1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) validateYyz1(formats strfmt.Registry) error {
	if swag.IsZero(m.Yyz1) { // not required
		return nil
	}

	if m.Yyz1 != nil {
		if err := m.Yyz1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yyz1")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this capacity report based on the context it is used
func (m *CapacityReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAms1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAtl1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDfw1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEwr1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFra1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIad1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLax1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNrt1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrd1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSea1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSin1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSjc1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyd1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateYyz1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapacityReport) contextValidateAms1(ctx context.Context, formats strfmt.Registry) error {

	if m.Ams1 != nil {
		if err := m.Ams1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ams1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateAtl1(ctx context.Context, formats strfmt.Registry) error {

	if m.Atl1 != nil {
		if err := m.Atl1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atl1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateDfw1(ctx context.Context, formats strfmt.Registry) error {

	if m.Dfw1 != nil {
		if err := m.Dfw1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dfw1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateEwr1(ctx context.Context, formats strfmt.Registry) error {

	if m.Ewr1 != nil {
		if err := m.Ewr1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ewr1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateFra1(ctx context.Context, formats strfmt.Registry) error {

	if m.Fra1 != nil {
		if err := m.Fra1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fra1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateIad1(ctx context.Context, formats strfmt.Registry) error {

	if m.Iad1 != nil {
		if err := m.Iad1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iad1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateLax1(ctx context.Context, formats strfmt.Registry) error {

	if m.Lax1 != nil {
		if err := m.Lax1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lax1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateNrt1(ctx context.Context, formats strfmt.Registry) error {

	if m.Nrt1 != nil {
		if err := m.Nrt1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nrt1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateOrd1(ctx context.Context, formats strfmt.Registry) error {

	if m.Ord1 != nil {
		if err := m.Ord1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ord1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateSea1(ctx context.Context, formats strfmt.Registry) error {

	if m.Sea1 != nil {
		if err := m.Sea1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sea1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateSin1(ctx context.Context, formats strfmt.Registry) error {

	if m.Sin1 != nil {
		if err := m.Sin1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sin1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateSjc1(ctx context.Context, formats strfmt.Registry) error {

	if m.Sjc1 != nil {
		if err := m.Sjc1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sjc1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateSyd1(ctx context.Context, formats strfmt.Registry) error {

	if m.Syd1 != nil {
		if err := m.Syd1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syd1")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityReport) contextValidateYyz1(ctx context.Context, formats strfmt.Registry) error {

	if m.Yyz1 != nil {
		if err := m.Yyz1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yyz1")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapacityReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapacityReport) UnmarshalBinary(b []byte) error {
	var res CapacityReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
