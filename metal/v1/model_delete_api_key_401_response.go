/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DeleteAPIKey401Response Error responses are included with 4xx and 5xx HTTP responses from the API service. Either \"error\" or \"errors\" will be set.
type DeleteAPIKey401Response struct {
	// A description of the error that caused the request to fail.
	Error *string `json:"error,omitempty"`
	// A list of errors that contributed to the request failing.
	Errors []string `json:"errors,omitempty"`
}

// NewDeleteAPIKey401Response instantiates a new DeleteAPIKey401Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteAPIKey401Response() *DeleteAPIKey401Response {
	this := DeleteAPIKey401Response{}
	return &this
}

// NewDeleteAPIKey401ResponseWithDefaults instantiates a new DeleteAPIKey401Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteAPIKey401ResponseWithDefaults() *DeleteAPIKey401Response {
	this := DeleteAPIKey401Response{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DeleteAPIKey401Response) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteAPIKey401Response) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DeleteAPIKey401Response) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *DeleteAPIKey401Response) SetError(v string) {
	o.Error = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *DeleteAPIKey401Response) GetErrors() []string {
	if o == nil || o.Errors == nil {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteAPIKey401Response) GetErrorsOk() ([]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *DeleteAPIKey401Response) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *DeleteAPIKey401Response) SetErrors(v []string) {
	o.Errors = v
}

func (o DeleteAPIKey401Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteAPIKey401Response struct {
	value *DeleteAPIKey401Response
	isSet bool
}

func (v NullableDeleteAPIKey401Response) Get() *DeleteAPIKey401Response {
	return v.value
}

func (v *NullableDeleteAPIKey401Response) Set(val *DeleteAPIKey401Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteAPIKey401Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteAPIKey401Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteAPIKey401Response(val *DeleteAPIKey401Response) *NullableDeleteAPIKey401Response {
	return &NullableDeleteAPIKey401Response{value: val, isSet: true}
}

func (v NullableDeleteAPIKey401Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteAPIKey401Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
