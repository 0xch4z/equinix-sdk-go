/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// OperatingSystemList struct for OperatingSystemList
type OperatingSystemList struct {
	OperatingSystems []OperatingSystem `json:"operating_systems,omitempty"`
}

// NewOperatingSystemList instantiates a new OperatingSystemList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatingSystemList() *OperatingSystemList {
	this := OperatingSystemList{}
	return &this
}

// NewOperatingSystemListWithDefaults instantiates a new OperatingSystemList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatingSystemListWithDefaults() *OperatingSystemList {
	this := OperatingSystemList{}
	return &this
}

// GetOperatingSystems returns the OperatingSystems field value if set, zero value otherwise.
func (o *OperatingSystemList) GetOperatingSystems() []OperatingSystem {
	if o == nil || o.OperatingSystems == nil {
		var ret []OperatingSystem
		return ret
	}
	return o.OperatingSystems
}

// GetOperatingSystemsOk returns a tuple with the OperatingSystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatingSystemList) GetOperatingSystemsOk() ([]OperatingSystem, bool) {
	if o == nil || o.OperatingSystems == nil {
		return nil, false
	}
	return o.OperatingSystems, true
}

// HasOperatingSystems returns a boolean if a field has been set.
func (o *OperatingSystemList) HasOperatingSystems() bool {
	if o != nil && o.OperatingSystems != nil {
		return true
	}

	return false
}

// SetOperatingSystems gets a reference to the given []OperatingSystem and assigns it to the OperatingSystems field.
func (o *OperatingSystemList) SetOperatingSystems(v []OperatingSystem) {
	o.OperatingSystems = v
}

func (o OperatingSystemList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OperatingSystems != nil {
		toSerialize["operating_systems"] = o.OperatingSystems
	}
	return json.Marshal(toSerialize)
}

type NullableOperatingSystemList struct {
	value *OperatingSystemList
	isSet bool
}

func (v NullableOperatingSystemList) Get() *OperatingSystemList {
	return v.value
}

func (v *NullableOperatingSystemList) Set(val *OperatingSystemList) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatingSystemList) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatingSystemList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatingSystemList(val *OperatingSystemList) *NullableOperatingSystemList {
	return &NullableOperatingSystemList{value: val, isSet: true}
}

func (v NullableOperatingSystemList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatingSystemList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
