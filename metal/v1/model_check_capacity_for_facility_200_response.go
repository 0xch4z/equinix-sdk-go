/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CheckCapacityForFacility200Response struct for CheckCapacityForFacility200Response
type CheckCapacityForFacility200Response struct {
	Servers []CheckCapacityForFacility200ResponseServersInner `json:"servers,omitempty"`
}

// NewCheckCapacityForFacility200Response instantiates a new CheckCapacityForFacility200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCapacityForFacility200Response() *CheckCapacityForFacility200Response {
	this := CheckCapacityForFacility200Response{}
	return &this
}

// NewCheckCapacityForFacility200ResponseWithDefaults instantiates a new CheckCapacityForFacility200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCapacityForFacility200ResponseWithDefaults() *CheckCapacityForFacility200Response {
	this := CheckCapacityForFacility200Response{}
	return &this
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *CheckCapacityForFacility200Response) GetServers() []CheckCapacityForFacility200ResponseServersInner {
	if o == nil || o.Servers == nil {
		var ret []CheckCapacityForFacility200ResponseServersInner
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacityForFacility200Response) GetServersOk() ([]CheckCapacityForFacility200ResponseServersInner, bool) {
	if o == nil || o.Servers == nil {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *CheckCapacityForFacility200Response) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

// SetServers gets a reference to the given []CheckCapacityForFacility200ResponseServersInner and assigns it to the Servers field.
func (o *CheckCapacityForFacility200Response) SetServers(v []CheckCapacityForFacility200ResponseServersInner) {
	o.Servers = v
}

func (o CheckCapacityForFacility200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	return json.Marshal(toSerialize)
}

type NullableCheckCapacityForFacility200Response struct {
	value *CheckCapacityForFacility200Response
	isSet bool
}

func (v NullableCheckCapacityForFacility200Response) Get() *CheckCapacityForFacility200Response {
	return v.value
}

func (v *NullableCheckCapacityForFacility200Response) Set(val *CheckCapacityForFacility200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCapacityForFacility200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCapacityForFacility200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCapacityForFacility200Response(val *CheckCapacityForFacility200Response) *NullableCheckCapacityForFacility200Response {
	return &NullableCheckCapacityForFacility200Response{value: val, isSet: true}
}

func (v NullableCheckCapacityForFacility200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCapacityForFacility200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
