/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindFacilities200Response struct for FindFacilities200Response
type FindFacilities200Response struct {
	Facilities []FindDeviceById200ResponseFacility `json:"facilities,omitempty"`
}

// NewFindFacilities200Response instantiates a new FindFacilities200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindFacilities200Response() *FindFacilities200Response {
	this := FindFacilities200Response{}
	return &this
}

// NewFindFacilities200ResponseWithDefaults instantiates a new FindFacilities200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindFacilities200ResponseWithDefaults() *FindFacilities200Response {
	this := FindFacilities200Response{}
	return &this
}

// GetFacilities returns the Facilities field value if set, zero value otherwise.
func (o *FindFacilities200Response) GetFacilities() []FindDeviceById200ResponseFacility {
	if o == nil || o.Facilities == nil {
		var ret []FindDeviceById200ResponseFacility
		return ret
	}
	return o.Facilities
}

// GetFacilitiesOk returns a tuple with the Facilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindFacilities200Response) GetFacilitiesOk() ([]FindDeviceById200ResponseFacility, bool) {
	if o == nil || o.Facilities == nil {
		return nil, false
	}
	return o.Facilities, true
}

// HasFacilities returns a boolean if a field has been set.
func (o *FindFacilities200Response) HasFacilities() bool {
	if o != nil && o.Facilities != nil {
		return true
	}

	return false
}

// SetFacilities gets a reference to the given []FindDeviceById200ResponseFacility and assigns it to the Facilities field.
func (o *FindFacilities200Response) SetFacilities(v []FindDeviceById200ResponseFacility) {
	o.Facilities = v
}

func (o FindFacilities200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Facilities != nil {
		toSerialize["facilities"] = o.Facilities
	}
	return json.Marshal(toSerialize)
}

type NullableFindFacilities200Response struct {
	value *FindFacilities200Response
	isSet bool
}

func (v NullableFindFacilities200Response) Get() *FindFacilities200Response {
	return v.value
}

func (v *NullableFindFacilities200Response) Set(val *FindFacilities200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindFacilities200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindFacilities200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindFacilities200Response(val *FindFacilities200Response) *NullableFindFacilities200Response {
	return &NullableFindFacilities200Response{value: val, isSet: true}
}

func (v NullableFindFacilities200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindFacilities200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
