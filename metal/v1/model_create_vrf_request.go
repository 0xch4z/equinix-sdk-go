/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CreateVrfRequest struct for CreateVrfRequest
type CreateVrfRequest struct {
	Description *string `json:"description,omitempty"`
	// A list of CIDR network addresses. Like [\"10.0.0.0/16\", \"2001:d78::/56\"]. IPv4 blocks must be between /8 and /29 in size. IPv6 blocks must be between /56 and /64. A VRF\\'s IP ranges must be defined in order to create VRF IP Reservations, which can then be used for Metal Gateways or Virtual Circuits.
	IpRanges []string `json:"ip_ranges,omitempty"`
	LocalAsn *int32   `json:"local_asn,omitempty"`
	// The UUID (or metro code) for the Metro in which to create this VRF.
	Metro     string `json:"metro"`
	Name      string `json:"name"`
	ProjectId string `json:"project_id"`
}

// NewCreateVrfRequest instantiates a new CreateVrfRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVrfRequest(metro string, name string, projectId string) *CreateVrfRequest {
	this := CreateVrfRequest{}
	this.Metro = metro
	this.Name = name
	this.ProjectId = projectId
	return &this
}

// NewCreateVrfRequestWithDefaults instantiates a new CreateVrfRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVrfRequestWithDefaults() *CreateVrfRequest {
	this := CreateVrfRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateVrfRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVrfRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateVrfRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateVrfRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIpRanges returns the IpRanges field value if set, zero value otherwise.
func (o *CreateVrfRequest) GetIpRanges() []string {
	if o == nil || o.IpRanges == nil {
		var ret []string
		return ret
	}
	return o.IpRanges
}

// GetIpRangesOk returns a tuple with the IpRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVrfRequest) GetIpRangesOk() ([]string, bool) {
	if o == nil || o.IpRanges == nil {
		return nil, false
	}
	return o.IpRanges, true
}

// HasIpRanges returns a boolean if a field has been set.
func (o *CreateVrfRequest) HasIpRanges() bool {
	if o != nil && o.IpRanges != nil {
		return true
	}

	return false
}

// SetIpRanges gets a reference to the given []string and assigns it to the IpRanges field.
func (o *CreateVrfRequest) SetIpRanges(v []string) {
	o.IpRanges = v
}

// GetLocalAsn returns the LocalAsn field value if set, zero value otherwise.
func (o *CreateVrfRequest) GetLocalAsn() int32 {
	if o == nil || o.LocalAsn == nil {
		var ret int32
		return ret
	}
	return *o.LocalAsn
}

// GetLocalAsnOk returns a tuple with the LocalAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVrfRequest) GetLocalAsnOk() (*int32, bool) {
	if o == nil || o.LocalAsn == nil {
		return nil, false
	}
	return o.LocalAsn, true
}

// HasLocalAsn returns a boolean if a field has been set.
func (o *CreateVrfRequest) HasLocalAsn() bool {
	if o != nil && o.LocalAsn != nil {
		return true
	}

	return false
}

// SetLocalAsn gets a reference to the given int32 and assigns it to the LocalAsn field.
func (o *CreateVrfRequest) SetLocalAsn(v int32) {
	o.LocalAsn = &v
}

// GetMetro returns the Metro field value
func (o *CreateVrfRequest) GetMetro() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metro
}

// GetMetroOk returns a tuple with the Metro field value
// and a boolean to check if the value has been set.
func (o *CreateVrfRequest) GetMetroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metro, true
}

// SetMetro sets field value
func (o *CreateVrfRequest) SetMetro(v string) {
	o.Metro = v
}

// GetName returns the Name field value
func (o *CreateVrfRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVrfRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVrfRequest) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *CreateVrfRequest) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CreateVrfRequest) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CreateVrfRequest) SetProjectId(v string) {
	o.ProjectId = v
}

func (o CreateVrfRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IpRanges != nil {
		toSerialize["ip_ranges"] = o.IpRanges
	}
	if o.LocalAsn != nil {
		toSerialize["local_asn"] = o.LocalAsn
	}
	if true {
		toSerialize["metro"] = o.Metro
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["project_id"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableCreateVrfRequest struct {
	value *CreateVrfRequest
	isSet bool
}

func (v NullableCreateVrfRequest) Get() *CreateVrfRequest {
	return v.value
}

func (v *NullableCreateVrfRequest) Set(val *CreateVrfRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVrfRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVrfRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVrfRequest(val *CreateVrfRequest) *NullableCreateVrfRequest {
	return &NullableCreateVrfRequest{value: val, isSet: true}
}

func (v NullableCreateVrfRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVrfRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
