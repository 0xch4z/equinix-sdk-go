/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// MetroList struct for MetroList
type MetroList struct {
	Metros []Metro `json:"metros,omitempty"`
}

// NewMetroList instantiates a new MetroList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroList() *MetroList {
	this := MetroList{}
	return &this
}

// NewMetroListWithDefaults instantiates a new MetroList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroListWithDefaults() *MetroList {
	this := MetroList{}
	return &this
}

// GetMetros returns the Metros field value if set, zero value otherwise.
func (o *MetroList) GetMetros() []Metro {
	if o == nil || o.Metros == nil {
		var ret []Metro
		return ret
	}
	return o.Metros
}

// GetMetrosOk returns a tuple with the Metros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroList) GetMetrosOk() ([]Metro, bool) {
	if o == nil || o.Metros == nil {
		return nil, false
	}
	return o.Metros, true
}

// HasMetros returns a boolean if a field has been set.
func (o *MetroList) HasMetros() bool {
	if o != nil && o.Metros != nil {
		return true
	}

	return false
}

// SetMetros gets a reference to the given []Metro and assigns it to the Metros field.
func (o *MetroList) SetMetros(v []Metro) {
	o.Metros = v
}

func (o MetroList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metros != nil {
		toSerialize["metros"] = o.Metros
	}
	return json.Marshal(toSerialize)
}

type NullableMetroList struct {
	value *MetroList
	isSet bool
}

func (v NullableMetroList) Get() *MetroList {
	return v.value
}

func (v *NullableMetroList) Set(val *MetroList) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroList) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroList(val *MetroList) *NullableMetroList {
	return &NullableMetroList{value: val, isSet: true}
}

func (v NullableMetroList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
