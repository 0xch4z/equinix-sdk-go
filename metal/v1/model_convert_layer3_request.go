/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ConvertLayer3Request struct for ConvertLayer3Request
type ConvertLayer3Request struct {
	RequestIps []ConvertLayer3RequestRequestIpsInner `json:"request_ips,omitempty"`
}

// NewConvertLayer3Request instantiates a new ConvertLayer3Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvertLayer3Request() *ConvertLayer3Request {
	this := ConvertLayer3Request{}
	return &this
}

// NewConvertLayer3RequestWithDefaults instantiates a new ConvertLayer3Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvertLayer3RequestWithDefaults() *ConvertLayer3Request {
	this := ConvertLayer3Request{}
	return &this
}

// GetRequestIps returns the RequestIps field value if set, zero value otherwise.
func (o *ConvertLayer3Request) GetRequestIps() []ConvertLayer3RequestRequestIpsInner {
	if o == nil || o.RequestIps == nil {
		var ret []ConvertLayer3RequestRequestIpsInner
		return ret
	}
	return o.RequestIps
}

// GetRequestIpsOk returns a tuple with the RequestIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvertLayer3Request) GetRequestIpsOk() ([]ConvertLayer3RequestRequestIpsInner, bool) {
	if o == nil || o.RequestIps == nil {
		return nil, false
	}
	return o.RequestIps, true
}

// HasRequestIps returns a boolean if a field has been set.
func (o *ConvertLayer3Request) HasRequestIps() bool {
	if o != nil && o.RequestIps != nil {
		return true
	}

	return false
}

// SetRequestIps gets a reference to the given []ConvertLayer3RequestRequestIpsInner and assigns it to the RequestIps field.
func (o *ConvertLayer3Request) SetRequestIps(v []ConvertLayer3RequestRequestIpsInner) {
	o.RequestIps = v
}

func (o ConvertLayer3Request) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestIps != nil {
		toSerialize["request_ips"] = o.RequestIps
	}
	return json.Marshal(toSerialize)
}

type NullableConvertLayer3Request struct {
	value *ConvertLayer3Request
	isSet bool
}

func (v NullableConvertLayer3Request) Get() *ConvertLayer3Request {
	return v.value
}

func (v *NullableConvertLayer3Request) Set(val *ConvertLayer3Request) {
	v.value = val
	v.isSet = true
}

func (v NullableConvertLayer3Request) IsSet() bool {
	return v.isSet
}

func (v *NullableConvertLayer3Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvertLayer3Request(val *ConvertLayer3Request) *NullableConvertLayer3Request {
	return &NullableConvertLayer3Request{value: val, isSet: true}
}

func (v NullableConvertLayer3Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvertLayer3Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
