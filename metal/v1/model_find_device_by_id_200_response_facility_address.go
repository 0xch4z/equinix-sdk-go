/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindDeviceById200ResponseFacilityAddress struct for FindDeviceById200ResponseFacilityAddress
type FindDeviceById200ResponseFacilityAddress struct {
	Address     string                                               `json:"address"`
	Address2    *string                                              `json:"address2,omitempty"`
	City        *string                                              `json:"city,omitempty"`
	Coordinates *FindDeviceById200ResponseFacilityAddressCoordinates `json:"coordinates,omitempty"`
	Country     string                                               `json:"country"`
	State       *string                                              `json:"state,omitempty"`
	ZipCode     string                                               `json:"zip_code"`
}

// NewFindDeviceById200ResponseFacilityAddress instantiates a new FindDeviceById200ResponseFacilityAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindDeviceById200ResponseFacilityAddress(address string, country string, zipCode string) *FindDeviceById200ResponseFacilityAddress {
	this := FindDeviceById200ResponseFacilityAddress{}
	this.Address = address
	this.Country = country
	this.ZipCode = zipCode
	return &this
}

// NewFindDeviceById200ResponseFacilityAddressWithDefaults instantiates a new FindDeviceById200ResponseFacilityAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindDeviceById200ResponseFacilityAddressWithDefaults() *FindDeviceById200ResponseFacilityAddress {
	this := FindDeviceById200ResponseFacilityAddress{}
	return &this
}

// GetAddress returns the Address field value
func (o *FindDeviceById200ResponseFacilityAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *FindDeviceById200ResponseFacilityAddress) SetAddress(v string) {
	o.Address = v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *FindDeviceById200ResponseFacilityAddress) GetAddress2() string {
	if o == nil || o.Address2 == nil {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || o.Address2 == nil {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *FindDeviceById200ResponseFacilityAddress) HasAddress2() bool {
	if o != nil && o.Address2 != nil {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *FindDeviceById200ResponseFacilityAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *FindDeviceById200ResponseFacilityAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *FindDeviceById200ResponseFacilityAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *FindDeviceById200ResponseFacilityAddress) SetCity(v string) {
	o.City = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *FindDeviceById200ResponseFacilityAddress) GetCoordinates() FindDeviceById200ResponseFacilityAddressCoordinates {
	if o == nil || o.Coordinates == nil {
		var ret FindDeviceById200ResponseFacilityAddressCoordinates
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetCoordinatesOk() (*FindDeviceById200ResponseFacilityAddressCoordinates, bool) {
	if o == nil || o.Coordinates == nil {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *FindDeviceById200ResponseFacilityAddress) HasCoordinates() bool {
	if o != nil && o.Coordinates != nil {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given FindDeviceById200ResponseFacilityAddressCoordinates and assigns it to the Coordinates field.
func (o *FindDeviceById200ResponseFacilityAddress) SetCoordinates(v FindDeviceById200ResponseFacilityAddressCoordinates) {
	o.Coordinates = &v
}

// GetCountry returns the Country field value
func (o *FindDeviceById200ResponseFacilityAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *FindDeviceById200ResponseFacilityAddress) SetCountry(v string) {
	o.Country = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FindDeviceById200ResponseFacilityAddress) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FindDeviceById200ResponseFacilityAddress) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FindDeviceById200ResponseFacilityAddress) SetState(v string) {
	o.State = &v
}

// GetZipCode returns the ZipCode field value
func (o *FindDeviceById200ResponseFacilityAddress) GetZipCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponseFacilityAddress) GetZipCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZipCode, true
}

// SetZipCode sets field value
func (o *FindDeviceById200ResponseFacilityAddress) SetZipCode(v string) {
	o.ZipCode = v
}

func (o FindDeviceById200ResponseFacilityAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.Address2 != nil {
		toSerialize["address2"] = o.Address2
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Coordinates != nil {
		toSerialize["coordinates"] = o.Coordinates
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["zip_code"] = o.ZipCode
	}
	return json.Marshal(toSerialize)
}

type NullableFindDeviceById200ResponseFacilityAddress struct {
	value *FindDeviceById200ResponseFacilityAddress
	isSet bool
}

func (v NullableFindDeviceById200ResponseFacilityAddress) Get() *FindDeviceById200ResponseFacilityAddress {
	return v.value
}

func (v *NullableFindDeviceById200ResponseFacilityAddress) Set(val *FindDeviceById200ResponseFacilityAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableFindDeviceById200ResponseFacilityAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableFindDeviceById200ResponseFacilityAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindDeviceById200ResponseFacilityAddress(val *FindDeviceById200ResponseFacilityAddress) *NullableFindDeviceById200ResponseFacilityAddress {
	return &NullableFindDeviceById200ResponseFacilityAddress{value: val, isSet: true}
}

func (v NullableFindDeviceById200ResponseFacilityAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindDeviceById200ResponseFacilityAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
