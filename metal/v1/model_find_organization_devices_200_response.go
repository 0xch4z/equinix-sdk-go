/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindOrganizationDevices200Response struct for FindOrganizationDevices200Response
type FindOrganizationDevices200Response struct {
	Devices []FindDeviceById200Response      `json:"devices,omitempty"`
	Meta    *FindDeviceEvents200ResponseMeta `json:"meta,omitempty"`
}

// NewFindOrganizationDevices200Response instantiates a new FindOrganizationDevices200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindOrganizationDevices200Response() *FindOrganizationDevices200Response {
	this := FindOrganizationDevices200Response{}
	return &this
}

// NewFindOrganizationDevices200ResponseWithDefaults instantiates a new FindOrganizationDevices200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindOrganizationDevices200ResponseWithDefaults() *FindOrganizationDevices200Response {
	this := FindOrganizationDevices200Response{}
	return &this
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *FindOrganizationDevices200Response) GetDevices() []FindDeviceById200Response {
	if o == nil || o.Devices == nil {
		var ret []FindDeviceById200Response
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindOrganizationDevices200Response) GetDevicesOk() ([]FindDeviceById200Response, bool) {
	if o == nil || o.Devices == nil {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *FindOrganizationDevices200Response) HasDevices() bool {
	if o != nil && o.Devices != nil {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []FindDeviceById200Response and assigns it to the Devices field.
func (o *FindOrganizationDevices200Response) SetDevices(v []FindDeviceById200Response) {
	o.Devices = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FindOrganizationDevices200Response) GetMeta() FindDeviceEvents200ResponseMeta {
	if o == nil || o.Meta == nil {
		var ret FindDeviceEvents200ResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindOrganizationDevices200Response) GetMetaOk() (*FindDeviceEvents200ResponseMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FindOrganizationDevices200Response) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given FindDeviceEvents200ResponseMeta and assigns it to the Meta field.
func (o *FindOrganizationDevices200Response) SetMeta(v FindDeviceEvents200ResponseMeta) {
	o.Meta = &v
}

func (o FindOrganizationDevices200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Devices != nil {
		toSerialize["devices"] = o.Devices
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableFindOrganizationDevices200Response struct {
	value *FindOrganizationDevices200Response
	isSet bool
}

func (v NullableFindOrganizationDevices200Response) Get() *FindOrganizationDevices200Response {
	return v.value
}

func (v *NullableFindOrganizationDevices200Response) Set(val *FindOrganizationDevices200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindOrganizationDevices200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindOrganizationDevices200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindOrganizationDevices200Response(val *FindOrganizationDevices200Response) *NullableFindOrganizationDevices200Response {
	return &NullableFindOrganizationDevices200Response{value: val, isSet: true}
}

func (v NullableFindOrganizationDevices200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindOrganizationDevices200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
