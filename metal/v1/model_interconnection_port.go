/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InterconnectionPort struct for InterconnectionPort
type InterconnectionPort struct {
	Id *string `json:"id,omitempty"`
	// Either 'primary' or 'secondary'.
	Role   *string `json:"role,omitempty"`
	Status *string `json:"status,omitempty"`
	// A switch 'short ID'
	SwitchId        *string             `json:"switch_id,omitempty"`
	VirtualCircuits *VirtualCircuitList `json:"virtual_circuits,omitempty"`
	Organization    *Href               `json:"organization,omitempty"`
}

// NewInterconnectionPort instantiates a new InterconnectionPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnectionPort() *InterconnectionPort {
	this := InterconnectionPort{}
	return &this
}

// NewInterconnectionPortWithDefaults instantiates a new InterconnectionPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionPortWithDefaults() *InterconnectionPort {
	this := InterconnectionPort{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InterconnectionPort) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPort) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InterconnectionPort) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InterconnectionPort) SetId(v string) {
	o.Id = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *InterconnectionPort) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPort) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *InterconnectionPort) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *InterconnectionPort) SetRole(v string) {
	o.Role = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InterconnectionPort) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPort) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InterconnectionPort) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InterconnectionPort) SetStatus(v string) {
	o.Status = &v
}

// GetSwitchId returns the SwitchId field value if set, zero value otherwise.
func (o *InterconnectionPort) GetSwitchId() string {
	if o == nil || o.SwitchId == nil {
		var ret string
		return ret
	}
	return *o.SwitchId
}

// GetSwitchIdOk returns a tuple with the SwitchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPort) GetSwitchIdOk() (*string, bool) {
	if o == nil || o.SwitchId == nil {
		return nil, false
	}
	return o.SwitchId, true
}

// HasSwitchId returns a boolean if a field has been set.
func (o *InterconnectionPort) HasSwitchId() bool {
	if o != nil && o.SwitchId != nil {
		return true
	}

	return false
}

// SetSwitchId gets a reference to the given string and assigns it to the SwitchId field.
func (o *InterconnectionPort) SetSwitchId(v string) {
	o.SwitchId = &v
}

// GetVirtualCircuits returns the VirtualCircuits field value if set, zero value otherwise.
func (o *InterconnectionPort) GetVirtualCircuits() VirtualCircuitList {
	if o == nil || o.VirtualCircuits == nil {
		var ret VirtualCircuitList
		return ret
	}
	return *o.VirtualCircuits
}

// GetVirtualCircuitsOk returns a tuple with the VirtualCircuits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPort) GetVirtualCircuitsOk() (*VirtualCircuitList, bool) {
	if o == nil || o.VirtualCircuits == nil {
		return nil, false
	}
	return o.VirtualCircuits, true
}

// HasVirtualCircuits returns a boolean if a field has been set.
func (o *InterconnectionPort) HasVirtualCircuits() bool {
	if o != nil && o.VirtualCircuits != nil {
		return true
	}

	return false
}

// SetVirtualCircuits gets a reference to the given VirtualCircuitList and assigns it to the VirtualCircuits field.
func (o *InterconnectionPort) SetVirtualCircuits(v VirtualCircuitList) {
	o.VirtualCircuits = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *InterconnectionPort) GetOrganization() Href {
	if o == nil || o.Organization == nil {
		var ret Href
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionPort) GetOrganizationOk() (*Href, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *InterconnectionPort) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given Href and assigns it to the Organization field.
func (o *InterconnectionPort) SetOrganization(v Href) {
	o.Organization = &v
}

func (o InterconnectionPort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SwitchId != nil {
		toSerialize["switch_id"] = o.SwitchId
	}
	if o.VirtualCircuits != nil {
		toSerialize["virtual_circuits"] = o.VirtualCircuits
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	return json.Marshal(toSerialize)
}

type NullableInterconnectionPort struct {
	value *InterconnectionPort
	isSet bool
}

func (v NullableInterconnectionPort) Get() *InterconnectionPort {
	return v.value
}

func (v *NullableInterconnectionPort) Set(val *InterconnectionPort) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionPort) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionPort(val *InterconnectionPort) *NullableInterconnectionPort {
	return &NullableInterconnectionPort{value: val, isSet: true}
}

func (v NullableInterconnectionPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
