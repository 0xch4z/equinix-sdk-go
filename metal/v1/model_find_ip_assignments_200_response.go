/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindIPAssignments200Response struct for FindIPAssignments200Response
type FindIPAssignments200Response struct {
	IpAddresses []FindDeviceById200ResponseIpAddressesInner `json:"ip_addresses,omitempty"`
}

// NewFindIPAssignments200Response instantiates a new FindIPAssignments200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindIPAssignments200Response() *FindIPAssignments200Response {
	this := FindIPAssignments200Response{}
	return &this
}

// NewFindIPAssignments200ResponseWithDefaults instantiates a new FindIPAssignments200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindIPAssignments200ResponseWithDefaults() *FindIPAssignments200Response {
	this := FindIPAssignments200Response{}
	return &this
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *FindIPAssignments200Response) GetIpAddresses() []FindDeviceById200ResponseIpAddressesInner {
	if o == nil || o.IpAddresses == nil {
		var ret []FindDeviceById200ResponseIpAddressesInner
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindIPAssignments200Response) GetIpAddressesOk() ([]FindDeviceById200ResponseIpAddressesInner, bool) {
	if o == nil || o.IpAddresses == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *FindIPAssignments200Response) HasIpAddresses() bool {
	if o != nil && o.IpAddresses != nil {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []FindDeviceById200ResponseIpAddressesInner and assigns it to the IpAddresses field.
func (o *FindIPAssignments200Response) SetIpAddresses(v []FindDeviceById200ResponseIpAddressesInner) {
	o.IpAddresses = v
}

func (o FindIPAssignments200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddresses != nil {
		toSerialize["ip_addresses"] = o.IpAddresses
	}
	return json.Marshal(toSerialize)
}

type NullableFindIPAssignments200Response struct {
	value *FindIPAssignments200Response
	isSet bool
}

func (v NullableFindIPAssignments200Response) Get() *FindIPAssignments200Response {
	return v.value
}

func (v *NullableFindIPAssignments200Response) Set(val *FindIPAssignments200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindIPAssignments200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindIPAssignments200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindIPAssignments200Response(val *FindIPAssignments200Response) *NullableFindIPAssignments200Response {
	return &NullableFindIPAssignments200Response{value: val, isSet: true}
}

func (v NullableFindIPAssignments200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindIPAssignments200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
