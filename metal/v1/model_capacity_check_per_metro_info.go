/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CapacityCheckPerMetroInfo struct for CapacityCheckPerMetroInfo
type CapacityCheckPerMetroInfo struct {
	// The metro ID or code sent to check capacity.
	Metro *string `json:"metro,omitempty"`
	// The plan ID or slug sent to check capacity.
	Plan *string `json:"plan,omitempty"`
	// The number of servers sent to check capacity.
	Quantity *string `json:"quantity,omitempty"`
	// Returns true if there is enough capacity in the metro to fulfill the quantity set. Returns false if there is not enough.
	Available *bool `json:"available,omitempty"`
}

// NewCapacityCheckPerMetroInfo instantiates a new CapacityCheckPerMetroInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacityCheckPerMetroInfo() *CapacityCheckPerMetroInfo {
	this := CapacityCheckPerMetroInfo{}
	return &this
}

// NewCapacityCheckPerMetroInfoWithDefaults instantiates a new CapacityCheckPerMetroInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityCheckPerMetroInfoWithDefaults() *CapacityCheckPerMetroInfo {
	this := CapacityCheckPerMetroInfo{}
	return &this
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *CapacityCheckPerMetroInfo) GetMetro() string {
	if o == nil || o.Metro == nil {
		var ret string
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityCheckPerMetroInfo) GetMetroOk() (*string, bool) {
	if o == nil || o.Metro == nil {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *CapacityCheckPerMetroInfo) HasMetro() bool {
	if o != nil && o.Metro != nil {
		return true
	}

	return false
}

// SetMetro gets a reference to the given string and assigns it to the Metro field.
func (o *CapacityCheckPerMetroInfo) SetMetro(v string) {
	o.Metro = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *CapacityCheckPerMetroInfo) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityCheckPerMetroInfo) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *CapacityCheckPerMetroInfo) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *CapacityCheckPerMetroInfo) SetPlan(v string) {
	o.Plan = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CapacityCheckPerMetroInfo) GetQuantity() string {
	if o == nil || o.Quantity == nil {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityCheckPerMetroInfo) GetQuantityOk() (*string, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CapacityCheckPerMetroInfo) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *CapacityCheckPerMetroInfo) SetQuantity(v string) {
	o.Quantity = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *CapacityCheckPerMetroInfo) GetAvailable() bool {
	if o == nil || o.Available == nil {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityCheckPerMetroInfo) GetAvailableOk() (*bool, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *CapacityCheckPerMetroInfo) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *CapacityCheckPerMetroInfo) SetAvailable(v bool) {
	o.Available = &v
}

func (o CapacityCheckPerMetroInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metro != nil {
		toSerialize["metro"] = o.Metro
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	return json.Marshal(toSerialize)
}

type NullableCapacityCheckPerMetroInfo struct {
	value *CapacityCheckPerMetroInfo
	isSet bool
}

func (v NullableCapacityCheckPerMetroInfo) Get() *CapacityCheckPerMetroInfo {
	return v.value
}

func (v *NullableCapacityCheckPerMetroInfo) Set(val *CapacityCheckPerMetroInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacityCheckPerMetroInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacityCheckPerMetroInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacityCheckPerMetroInfo(val *CapacityCheckPerMetroInfo) *NullableCapacityCheckPerMetroInfo {
	return &NullableCapacityCheckPerMetroInfo{value: val, isSet: true}
}

func (v NullableCapacityCheckPerMetroInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacityCheckPerMetroInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
