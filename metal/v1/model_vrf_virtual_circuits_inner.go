/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// checks if the VrfVirtualCircuitsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VrfVirtualCircuitsInner{}

// VrfVirtualCircuitsInner struct for VrfVirtualCircuitsInner
type VrfVirtualCircuitsInner struct {
	Id     *string `json:"id,omitempty"`
	Name   *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
	// The MD5 password for the BGP peering in plaintext (not a checksum).
	Md5 *string `json:"md5,omitempty"`
	// The peer ASN that will be used with the VRF on the Virtual Circuit.
	PeerAsn *int32 `json:"peer_asn,omitempty"`
	// The /30 or /31 subnet of one of the VRF IP Blocks that will be used with the VRF for the Virtual Circuit. This subnet does not have to be an existing VRF IP reservation, as we will create the VRF IP reservation on creation if it does not exist. The Metal IP and Customer IP must be IPs from this subnet. For /30 subnets, the network and broadcast IPs cannot be used as the Metal or Customer IP.
	Subnet *string `json:"subnet,omitempty"`
	// An IP address from the subnet that will be used on the Metal side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Customer IP. By default, the first usable IP address in the subnet will be used.
	MetalIp *string `json:"metal_ip,omitempty"`
	// An IP address from the subnet that will be used on the Customer side. This parameter is optional, but if supplied, we will use the other usable IP address in the subnet as the Metal IP. By default, the last usable IP address in the subnet will be used.
	CustomerIp           *string `json:"customer_ip,omitempty"`
	Port                 *Href   `json:"port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VrfVirtualCircuitsInner VrfVirtualCircuitsInner

// NewVrfVirtualCircuitsInner instantiates a new VrfVirtualCircuitsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfVirtualCircuitsInner() *VrfVirtualCircuitsInner {
	this := VrfVirtualCircuitsInner{}
	return &this
}

// NewVrfVirtualCircuitsInnerWithDefaults instantiates a new VrfVirtualCircuitsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfVirtualCircuitsInnerWithDefaults() *VrfVirtualCircuitsInner {
	this := VrfVirtualCircuitsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *VrfVirtualCircuitsInner) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VrfVirtualCircuitsInner) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *VrfVirtualCircuitsInner) SetStatus(v string) {
	o.Status = &v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetMd5() string {
	if o == nil || isNil(o.Md5) {
		var ret string
		return ret
	}
	return *o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetMd5Ok() (*string, bool) {
	if o == nil || isNil(o.Md5) {
		return nil, false
	}
	return o.Md5, true
}

// HasMd5 returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasMd5() bool {
	if o != nil && !isNil(o.Md5) {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given string and assigns it to the Md5 field.
func (o *VrfVirtualCircuitsInner) SetMd5(v string) {
	o.Md5 = &v
}

// GetPeerAsn returns the PeerAsn field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetPeerAsn() int32 {
	if o == nil || isNil(o.PeerAsn) {
		var ret int32
		return ret
	}
	return *o.PeerAsn
}

// GetPeerAsnOk returns a tuple with the PeerAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetPeerAsnOk() (*int32, bool) {
	if o == nil || isNil(o.PeerAsn) {
		return nil, false
	}
	return o.PeerAsn, true
}

// HasPeerAsn returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasPeerAsn() bool {
	if o != nil && !isNil(o.PeerAsn) {
		return true
	}

	return false
}

// SetPeerAsn gets a reference to the given int32 and assigns it to the PeerAsn field.
func (o *VrfVirtualCircuitsInner) SetPeerAsn(v int32) {
	o.PeerAsn = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetSubnet() string {
	if o == nil || isNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetSubnetOk() (*string, bool) {
	if o == nil || isNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasSubnet() bool {
	if o != nil && !isNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *VrfVirtualCircuitsInner) SetSubnet(v string) {
	o.Subnet = &v
}

// GetMetalIp returns the MetalIp field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetMetalIp() string {
	if o == nil || isNil(o.MetalIp) {
		var ret string
		return ret
	}
	return *o.MetalIp
}

// GetMetalIpOk returns a tuple with the MetalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetMetalIpOk() (*string, bool) {
	if o == nil || isNil(o.MetalIp) {
		return nil, false
	}
	return o.MetalIp, true
}

// HasMetalIp returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasMetalIp() bool {
	if o != nil && !isNil(o.MetalIp) {
		return true
	}

	return false
}

// SetMetalIp gets a reference to the given string and assigns it to the MetalIp field.
func (o *VrfVirtualCircuitsInner) SetMetalIp(v string) {
	o.MetalIp = &v
}

// GetCustomerIp returns the CustomerIp field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetCustomerIp() string {
	if o == nil || isNil(o.CustomerIp) {
		var ret string
		return ret
	}
	return *o.CustomerIp
}

// GetCustomerIpOk returns a tuple with the CustomerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetCustomerIpOk() (*string, bool) {
	if o == nil || isNil(o.CustomerIp) {
		return nil, false
	}
	return o.CustomerIp, true
}

// HasCustomerIp returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasCustomerIp() bool {
	if o != nil && !isNil(o.CustomerIp) {
		return true
	}

	return false
}

// SetCustomerIp gets a reference to the given string and assigns it to the CustomerIp field.
func (o *VrfVirtualCircuitsInner) SetCustomerIp(v string) {
	o.CustomerIp = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *VrfVirtualCircuitsInner) GetPort() Href {
	if o == nil || isNil(o.Port) {
		var ret Href
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfVirtualCircuitsInner) GetPortOk() (*Href, bool) {
	if o == nil || isNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *VrfVirtualCircuitsInner) HasPort() bool {
	if o != nil && !isNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given Href and assigns it to the Port field.
func (o *VrfVirtualCircuitsInner) SetPort(v Href) {
	o.Port = &v
}

func (o VrfVirtualCircuitsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VrfVirtualCircuitsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Md5) {
		toSerialize["md5"] = o.Md5
	}
	if !isNil(o.PeerAsn) {
		toSerialize["peer_asn"] = o.PeerAsn
	}
	if !isNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !isNil(o.MetalIp) {
		toSerialize["metal_ip"] = o.MetalIp
	}
	if !isNil(o.CustomerIp) {
		toSerialize["customer_ip"] = o.CustomerIp
	}
	if !isNil(o.Port) {
		toSerialize["port"] = o.Port
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VrfVirtualCircuitsInner) UnmarshalJSON(bytes []byte) (err error) {
	varVrfVirtualCircuitsInner := _VrfVirtualCircuitsInner{}

	if err = json.Unmarshal(bytes, &varVrfVirtualCircuitsInner); err == nil {
		*o = VrfVirtualCircuitsInner(varVrfVirtualCircuitsInner)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "status")
		delete(additionalProperties, "md5")
		delete(additionalProperties, "peer_asn")
		delete(additionalProperties, "subnet")
		delete(additionalProperties, "metal_ip")
		delete(additionalProperties, "customer_ip")
		delete(additionalProperties, "port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVrfVirtualCircuitsInner struct {
	value *VrfVirtualCircuitsInner
	isSet bool
}

func (v NullableVrfVirtualCircuitsInner) Get() *VrfVirtualCircuitsInner {
	return v.value
}

func (v *NullableVrfVirtualCircuitsInner) Set(val *VrfVirtualCircuitsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfVirtualCircuitsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfVirtualCircuitsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfVirtualCircuitsInner(val *VrfVirtualCircuitsInner) *NullableVrfVirtualCircuitsInner {
	return &NullableVrfVirtualCircuitsInner{value: val, isSet: true}
}

func (v NullableVrfVirtualCircuitsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfVirtualCircuitsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
