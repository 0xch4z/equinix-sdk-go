/*
Metal API

# Introduction Equinix Metal provides a RESTful HTTP API which can be reached at <https://api.equinix.com/metal/v1>. This document describes the API and how to use it.  The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account. Every feature of the Equinix Metal web interface is accessible through the API.  The API docs are generated from the Equinix Metal OpenAPI specification and are officially hosted at <https://metal.equinix.com/developers/api>.  # Common Parameters  The Equinix Metal API uses a few methods to minimize network traffic and improve throughput. These parameters are not used in all API calls, but are used often enough to warrant their own section. Look for these parameters in the documentation for the API calls that support them.  ## Pagination  Pagination is used to limit the number of results returned in a single request. The API will return a maximum of 100 results per page. To retrieve additional results, you can use the `page` and `per_page` query parameters.  The `page` parameter is used to specify the page number. The first page is `1`. The `per_page` parameter is used to specify the number of results per page. The maximum number of results differs by resource type.  ## Sorting  Where offered, the API allows you to sort results by a specific field. To sort results use the `sort_by` query parameter with the root level field name as the value. The `sort_direction` parameter is used to specify the sort direction, either either `asc` (ascending) or `desc` (descending).  ## Filtering  Filtering is used to limit the results returned in a single request. The API supports filtering by certain fields in the response. To filter results, you can use the field as a query parameter.  For example, to filter the IP list to only return public IPv4 addresses, you can filter by the `type` field, as in the following request:  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/projects/id/ips?type=public_ipv4 ```  Only IP addresses with the `type` field set to `public_ipv4` will be returned.  ## Searching  Searching is used to find matching resources using multiple field comparissons. The API supports searching in resources that define this behavior. The fields available for search differ by resource, as does the search strategy.  To search resources you can use the `search` query parameter.  ## Include and Exclude  For resources that contain references to other resources, sucha as a Device that refers to the Project it resides in, the Equinix Metal API will returns `href` values (API links) to the associated resource.  ```json {   ...   \"project\": {     \"href\": \"/metal/v1/projects/f3f131c8-f302-49ef-8c44-9405022dc6dd\"   } } ```  If you're going need the project details, you can avoid a second API request.  Specify the contained `href` resources and collections that you'd like to have included in the response using the `include` query parameter.  For example:    ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=projects ```  The `include` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests where `href` resources are presented.  To have multiple resources include, use a comma-separated list (e.g. `?include=emails,projects,memberships`).  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=emails,projects,memberships ```  You may also include nested associations up to three levels deep using dot notation (`?include=memberships.projects`):  ```sh curl -H 'X-Auth-Token: my_authentication_token' \\   https://api.equinix.com/metal/v1/user?include=memberships.projects ```  To exclude resources, and optimize response delivery, use the `exclude` query parameter. The `exclude` parameter is generally accepted in `GET`, `POST`, `PUT`, and `PATCH` requests for fields with nested object responses. When excluded, these fields will be replaced with an object that contains only an `href` field.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// GetInterconnection200Response struct for GetInterconnection200Response
type GetInterconnection200Response struct {
	ContactEmail *string                               `json:"contact_email,omitempty"`
	Description  *string                               `json:"description,omitempty"`
	Facility     *FindBatchById200ResponseDevicesInner `json:"facility,omitempty"`
	Id           *string                               `json:"id,omitempty"`
	Metro        *GetInterconnection200ResponseMetro   `json:"metro,omitempty"`
	// The mode of the interconnection (only relevant to Dedicated Ports). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
	Mode         *string                               `json:"mode,omitempty"`
	Name         *string                               `json:"name,omitempty"`
	Organization *FindBatchById200ResponseDevicesInner `json:"organization,omitempty"`
	// For Fabric VCs, these represent Virtual Port(s) created for the interconnection. For dedicated interconnections, these represent the Dedicated Port(s).
	Ports []GetInterconnection200ResponsePortsInner `json:"ports,omitempty"`
	// Either 'primary', meaning a single interconnection, or 'redundant', meaning a redundant interconnection.
	Redundancy *string `json:"redundancy,omitempty"`
	// For Fabric VCs (Metal Billed), this will show details of the A-Side service tokens issued for the interconnection. For Fabric VCs (Fabric Billed), this will show the details of the Z-Side service tokens issued for the interconnection. Dedicated interconnections will not have any service tokens issued. There will be one per interconnection, so for redundant interconnections, there should be two service tokens issued.
	ServiceTokens []GetInterconnection200ResponseServiceTokensInner `json:"service_tokens,omitempty"`
	// For interconnections on Dedicated Ports and shared connections, this represents the interconnection's speed in bps. For Fabric VCs, this field refers to the maximum speed of the interconnection in bps. This value will default to 10Gbps for Fabric VCs (Fabric Billed).
	Speed  *int32   `json:"speed,omitempty"`
	Status *string  `json:"status,omitempty"`
	Tags   []string `json:"tags,omitempty"`
	// This token is used for shared interconnections to be used as the Fabric Token. This field is entirely deprecated.
	Token *string `json:"token,omitempty"`
	// The 'shared' type of interconnection refers to shared connections, or later also known as Fabric Virtual Connections (or Fabric VCs). The 'dedicated' type of interconnection refers to interconnections created with Dedicated Ports.
	Type *string `json:"type,omitempty"`
}

// NewGetInterconnection200Response instantiates a new GetInterconnection200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetInterconnection200Response() *GetInterconnection200Response {
	this := GetInterconnection200Response{}
	return &this
}

// NewGetInterconnection200ResponseWithDefaults instantiates a new GetInterconnection200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetInterconnection200ResponseWithDefaults() *GetInterconnection200Response {
	this := GetInterconnection200Response{}
	return &this
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetContactEmail() string {
	if o == nil || isNil(o.ContactEmail) {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetContactEmailOk() (*string, bool) {
	if o == nil || isNil(o.ContactEmail) {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasContactEmail() bool {
	if o != nil && !isNil(o.ContactEmail) {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *GetInterconnection200Response) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GetInterconnection200Response) SetDescription(v string) {
	o.Description = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetFacility() FindBatchById200ResponseDevicesInner {
	if o == nil || isNil(o.Facility) {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetFacilityOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || isNil(o.Facility) {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasFacility() bool {
	if o != nil && !isNil(o.Facility) {
		return true
	}

	return false
}

// SetFacility gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the Facility field.
func (o *GetInterconnection200Response) SetFacility(v FindBatchById200ResponseDevicesInner) {
	o.Facility = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetInterconnection200Response) SetId(v string) {
	o.Id = &v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetMetro() GetInterconnection200ResponseMetro {
	if o == nil || isNil(o.Metro) {
		var ret GetInterconnection200ResponseMetro
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetMetroOk() (*GetInterconnection200ResponseMetro, bool) {
	if o == nil || isNil(o.Metro) {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasMetro() bool {
	if o != nil && !isNil(o.Metro) {
		return true
	}

	return false
}

// SetMetro gets a reference to the given GetInterconnection200ResponseMetro and assigns it to the Metro field.
func (o *GetInterconnection200Response) SetMetro(v GetInterconnection200ResponseMetro) {
	o.Metro = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetMode() string {
	if o == nil || isNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetModeOk() (*string, bool) {
	if o == nil || isNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasMode() bool {
	if o != nil && !isNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *GetInterconnection200Response) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetInterconnection200Response) SetName(v string) {
	o.Name = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetOrganization() FindBatchById200ResponseDevicesInner {
	if o == nil || isNil(o.Organization) {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetOrganizationOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || isNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasOrganization() bool {
	if o != nil && !isNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the Organization field.
func (o *GetInterconnection200Response) SetOrganization(v FindBatchById200ResponseDevicesInner) {
	o.Organization = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetPorts() []GetInterconnection200ResponsePortsInner {
	if o == nil || isNil(o.Ports) {
		var ret []GetInterconnection200ResponsePortsInner
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetPortsOk() ([]GetInterconnection200ResponsePortsInner, bool) {
	if o == nil || isNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasPorts() bool {
	if o != nil && !isNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []GetInterconnection200ResponsePortsInner and assigns it to the Ports field.
func (o *GetInterconnection200Response) SetPorts(v []GetInterconnection200ResponsePortsInner) {
	o.Ports = v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetRedundancy() string {
	if o == nil || isNil(o.Redundancy) {
		var ret string
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetRedundancyOk() (*string, bool) {
	if o == nil || isNil(o.Redundancy) {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasRedundancy() bool {
	if o != nil && !isNil(o.Redundancy) {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given string and assigns it to the Redundancy field.
func (o *GetInterconnection200Response) SetRedundancy(v string) {
	o.Redundancy = &v
}

// GetServiceTokens returns the ServiceTokens field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetServiceTokens() []GetInterconnection200ResponseServiceTokensInner {
	if o == nil || isNil(o.ServiceTokens) {
		var ret []GetInterconnection200ResponseServiceTokensInner
		return ret
	}
	return o.ServiceTokens
}

// GetServiceTokensOk returns a tuple with the ServiceTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetServiceTokensOk() ([]GetInterconnection200ResponseServiceTokensInner, bool) {
	if o == nil || isNil(o.ServiceTokens) {
		return nil, false
	}
	return o.ServiceTokens, true
}

// HasServiceTokens returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasServiceTokens() bool {
	if o != nil && !isNil(o.ServiceTokens) {
		return true
	}

	return false
}

// SetServiceTokens gets a reference to the given []GetInterconnection200ResponseServiceTokensInner and assigns it to the ServiceTokens field.
func (o *GetInterconnection200Response) SetServiceTokens(v []GetInterconnection200ResponseServiceTokensInner) {
	o.ServiceTokens = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetSpeed() int32 {
	if o == nil || isNil(o.Speed) {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetSpeedOk() (*int32, bool) {
	if o == nil || isNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasSpeed() bool {
	if o != nil && !isNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *GetInterconnection200Response) SetSpeed(v int32) {
	o.Speed = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GetInterconnection200Response) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *GetInterconnection200Response) SetTags(v []string) {
	o.Tags = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetToken() string {
	if o == nil || isNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetTokenOk() (*string, bool) {
	if o == nil || isNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasToken() bool {
	if o != nil && !isNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *GetInterconnection200Response) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetInterconnection200Response) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInterconnection200Response) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetInterconnection200Response) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetInterconnection200Response) SetType(v string) {
	o.Type = &v
}

func (o GetInterconnection200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ContactEmail) {
		toSerialize["contact_email"] = o.ContactEmail
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Facility) {
		toSerialize["facility"] = o.Facility
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Metro) {
		toSerialize["metro"] = o.Metro
	}
	if !isNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !isNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !isNil(o.Redundancy) {
		toSerialize["redundancy"] = o.Redundancy
	}
	if !isNil(o.ServiceTokens) {
		toSerialize["service_tokens"] = o.ServiceTokens
	}
	if !isNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableGetInterconnection200Response struct {
	value *GetInterconnection200Response
	isSet bool
}

func (v NullableGetInterconnection200Response) Get() *GetInterconnection200Response {
	return v.value
}

func (v *NullableGetInterconnection200Response) Set(val *GetInterconnection200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInterconnection200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInterconnection200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInterconnection200Response(val *GetInterconnection200Response) *NullableGetInterconnection200Response {
	return &NullableGetInterconnection200Response{value: val, isSet: true}
}

func (v NullableGetInterconnection200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInterconnection200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
