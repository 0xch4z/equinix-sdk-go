/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// TransferRequestList struct for TransferRequestList
type TransferRequestList struct {
	Transfers []TransferRequest `json:"transfers,omitempty"`
}

// NewTransferRequestList instantiates a new TransferRequestList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferRequestList() *TransferRequestList {
	this := TransferRequestList{}
	return &this
}

// NewTransferRequestListWithDefaults instantiates a new TransferRequestList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferRequestListWithDefaults() *TransferRequestList {
	this := TransferRequestList{}
	return &this
}

// GetTransfers returns the Transfers field value if set, zero value otherwise.
func (o *TransferRequestList) GetTransfers() []TransferRequest {
	if o == nil || o.Transfers == nil {
		var ret []TransferRequest
		return ret
	}
	return o.Transfers
}

// GetTransfersOk returns a tuple with the Transfers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferRequestList) GetTransfersOk() ([]TransferRequest, bool) {
	if o == nil || o.Transfers == nil {
		return nil, false
	}
	return o.Transfers, true
}

// HasTransfers returns a boolean if a field has been set.
func (o *TransferRequestList) HasTransfers() bool {
	if o != nil && o.Transfers != nil {
		return true
	}

	return false
}

// SetTransfers gets a reference to the given []TransferRequest and assigns it to the Transfers field.
func (o *TransferRequestList) SetTransfers(v []TransferRequest) {
	o.Transfers = v
}

func (o TransferRequestList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transfers != nil {
		toSerialize["transfers"] = o.Transfers
	}
	return json.Marshal(toSerialize)
}

type NullableTransferRequestList struct {
	value *TransferRequestList
	isSet bool
}

func (v NullableTransferRequestList) Get() *TransferRequestList {
	return v.value
}

func (v *NullableTransferRequestList) Set(val *TransferRequestList) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRequestList) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRequestList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRequestList(val *TransferRequestList) *NullableTransferRequestList {
	return &NullableTransferRequestList{value: val, isSet: true}
}

func (v NullableTransferRequestList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRequestList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
