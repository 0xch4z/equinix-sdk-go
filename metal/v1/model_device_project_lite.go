/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DeviceProjectLite struct for DeviceProjectLite
type DeviceProjectLite struct {
	Href string `json:"href"`
}

// NewDeviceProjectLite instantiates a new DeviceProjectLite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceProjectLite(href string) *DeviceProjectLite {
	this := DeviceProjectLite{}
	this.Href = href
	return &this
}

// NewDeviceProjectLiteWithDefaults instantiates a new DeviceProjectLite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceProjectLiteWithDefaults() *DeviceProjectLite {
	this := DeviceProjectLite{}
	return &this
}

// GetHref returns the Href field value
func (o *DeviceProjectLite) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *DeviceProjectLite) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *DeviceProjectLite) SetHref(v string) {
	o.Href = v
}

func (o DeviceProjectLite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["href"] = o.Href
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceProjectLite struct {
	value *DeviceProjectLite
	isSet bool
}

func (v NullableDeviceProjectLite) Get() *DeviceProjectLite {
	return v.value
}

func (v *NullableDeviceProjectLite) Set(val *DeviceProjectLite) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceProjectLite) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceProjectLite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceProjectLite(val *DeviceProjectLite) *NullableDeviceProjectLite {
	return &NullableDeviceProjectLite{value: val, isSet: true}
}

func (v NullableDeviceProjectLite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceProjectLite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
