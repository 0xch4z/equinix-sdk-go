/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// MetroServerInfo struct for MetroServerInfo
type MetroServerInfo struct {
	// The metro ID or code to check the capacity in.
	Metro *string `json:"metro,omitempty"`
	// The plan ID or slug to check the capacity of.
	Plan *string `json:"plan,omitempty"`
	// The number of servers to check the capacity of.
	Quantity *string `json:"quantity,omitempty"`
}

// NewMetroServerInfo instantiates a new MetroServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetroServerInfo() *MetroServerInfo {
	this := MetroServerInfo{}
	return &this
}

// NewMetroServerInfoWithDefaults instantiates a new MetroServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroServerInfoWithDefaults() *MetroServerInfo {
	this := MetroServerInfo{}
	return &this
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *MetroServerInfo) GetMetro() string {
	if o == nil || o.Metro == nil {
		var ret string
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroServerInfo) GetMetroOk() (*string, bool) {
	if o == nil || o.Metro == nil {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *MetroServerInfo) HasMetro() bool {
	if o != nil && o.Metro != nil {
		return true
	}

	return false
}

// SetMetro gets a reference to the given string and assigns it to the Metro field.
func (o *MetroServerInfo) SetMetro(v string) {
	o.Metro = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *MetroServerInfo) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroServerInfo) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *MetroServerInfo) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *MetroServerInfo) SetPlan(v string) {
	o.Plan = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *MetroServerInfo) GetQuantity() string {
	if o == nil || o.Quantity == nil {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetroServerInfo) GetQuantityOk() (*string, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *MetroServerInfo) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *MetroServerInfo) SetQuantity(v string) {
	o.Quantity = &v
}

func (o MetroServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metro != nil {
		toSerialize["metro"] = o.Metro
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	return json.Marshal(toSerialize)
}

type NullableMetroServerInfo struct {
	value *MetroServerInfo
	isSet bool
}

func (v NullableMetroServerInfo) Get() *MetroServerInfo {
	return v.value
}

func (v *NullableMetroServerInfo) Set(val *MetroServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMetroServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMetroServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetroServerInfo(val *MetroServerInfo) *NullableMetroServerInfo {
	return &NullableMetroServerInfo{value: val, isSet: true}
}

func (v NullableMetroServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetroServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
