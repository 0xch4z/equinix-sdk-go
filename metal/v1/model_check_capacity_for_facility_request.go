/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CheckCapacityForFacilityRequest struct for CheckCapacityForFacilityRequest
type CheckCapacityForFacilityRequest struct {
	Servers []CheckCapacityForFacilityRequestServersInner `json:"servers,omitempty"`
}

// NewCheckCapacityForFacilityRequest instantiates a new CheckCapacityForFacilityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckCapacityForFacilityRequest() *CheckCapacityForFacilityRequest {
	this := CheckCapacityForFacilityRequest{}
	return &this
}

// NewCheckCapacityForFacilityRequestWithDefaults instantiates a new CheckCapacityForFacilityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckCapacityForFacilityRequestWithDefaults() *CheckCapacityForFacilityRequest {
	this := CheckCapacityForFacilityRequest{}
	return &this
}

// GetServers returns the Servers field value if set, zero value otherwise.
func (o *CheckCapacityForFacilityRequest) GetServers() []CheckCapacityForFacilityRequestServersInner {
	if o == nil || o.Servers == nil {
		var ret []CheckCapacityForFacilityRequestServersInner
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckCapacityForFacilityRequest) GetServersOk() ([]CheckCapacityForFacilityRequestServersInner, bool) {
	if o == nil || o.Servers == nil {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *CheckCapacityForFacilityRequest) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

// SetServers gets a reference to the given []CheckCapacityForFacilityRequestServersInner and assigns it to the Servers field.
func (o *CheckCapacityForFacilityRequest) SetServers(v []CheckCapacityForFacilityRequestServersInner) {
	o.Servers = v
}

func (o CheckCapacityForFacilityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	return json.Marshal(toSerialize)
}

type NullableCheckCapacityForFacilityRequest struct {
	value *CheckCapacityForFacilityRequest
	isSet bool
}

func (v NullableCheckCapacityForFacilityRequest) Get() *CheckCapacityForFacilityRequest {
	return v.value
}

func (v *NullableCheckCapacityForFacilityRequest) Set(val *CheckCapacityForFacilityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckCapacityForFacilityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckCapacityForFacilityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckCapacityForFacilityRequest(val *CheckCapacityForFacilityRequest) *NullableCheckCapacityForFacilityRequest {
	return &NullableCheckCapacityForFacilityRequest{value: val, isSet: true}
}

func (v NullableCheckCapacityForFacilityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckCapacityForFacilityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
