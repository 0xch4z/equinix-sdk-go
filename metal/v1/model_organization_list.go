/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// OrganizationList struct for OrganizationList
type OrganizationList struct {
	Meta          *FindDeviceEvents200ResponseMeta                 `json:"meta,omitempty"`
	Organizations []FindOrganizations200ResponseOrganizationsInner `json:"organizations,omitempty"`
}

// NewOrganizationList instantiates a new OrganizationList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationList() *OrganizationList {
	this := OrganizationList{}
	return &this
}

// NewOrganizationListWithDefaults instantiates a new OrganizationList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationListWithDefaults() *OrganizationList {
	this := OrganizationList{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *OrganizationList) GetMeta() FindDeviceEvents200ResponseMeta {
	if o == nil || o.Meta == nil {
		var ret FindDeviceEvents200ResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationList) GetMetaOk() (*FindDeviceEvents200ResponseMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *OrganizationList) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given FindDeviceEvents200ResponseMeta and assigns it to the Meta field.
func (o *OrganizationList) SetMeta(v FindDeviceEvents200ResponseMeta) {
	o.Meta = &v
}

// GetOrganizations returns the Organizations field value if set, zero value otherwise.
func (o *OrganizationList) GetOrganizations() []FindOrganizations200ResponseOrganizationsInner {
	if o == nil || o.Organizations == nil {
		var ret []FindOrganizations200ResponseOrganizationsInner
		return ret
	}
	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationList) GetOrganizationsOk() ([]FindOrganizations200ResponseOrganizationsInner, bool) {
	if o == nil || o.Organizations == nil {
		return nil, false
	}
	return o.Organizations, true
}

// HasOrganizations returns a boolean if a field has been set.
func (o *OrganizationList) HasOrganizations() bool {
	if o != nil && o.Organizations != nil {
		return true
	}

	return false
}

// SetOrganizations gets a reference to the given []FindOrganizations200ResponseOrganizationsInner and assigns it to the Organizations field.
func (o *OrganizationList) SetOrganizations(v []FindOrganizations200ResponseOrganizationsInner) {
	o.Organizations = v
}

func (o OrganizationList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Organizations != nil {
		toSerialize["organizations"] = o.Organizations
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationList struct {
	value *OrganizationList
	isSet bool
}

func (v NullableOrganizationList) Get() *OrganizationList {
	return v.value
}

func (v *NullableOrganizationList) Set(val *OrganizationList) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationList) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationList(val *OrganizationList) *NullableOrganizationList {
	return &NullableOrganizationList{value: val, isSet: true}
}

func (v NullableOrganizationList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
