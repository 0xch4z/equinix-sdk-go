/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InterconnectionList struct for InterconnectionList
type InterconnectionList struct {
	Interconnections []Interconnection `json:"interconnections,omitempty"`
}

// NewInterconnectionList instantiates a new InterconnectionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnectionList() *InterconnectionList {
	this := InterconnectionList{}
	return &this
}

// NewInterconnectionListWithDefaults instantiates a new InterconnectionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionListWithDefaults() *InterconnectionList {
	this := InterconnectionList{}
	return &this
}

// GetInterconnections returns the Interconnections field value if set, zero value otherwise.
func (o *InterconnectionList) GetInterconnections() []Interconnection {
	if o == nil || o.Interconnections == nil {
		var ret []Interconnection
		return ret
	}
	return o.Interconnections
}

// GetInterconnectionsOk returns a tuple with the Interconnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionList) GetInterconnectionsOk() ([]Interconnection, bool) {
	if o == nil || o.Interconnections == nil {
		return nil, false
	}
	return o.Interconnections, true
}

// HasInterconnections returns a boolean if a field has been set.
func (o *InterconnectionList) HasInterconnections() bool {
	if o != nil && o.Interconnections != nil {
		return true
	}

	return false
}

// SetInterconnections gets a reference to the given []Interconnection and assigns it to the Interconnections field.
func (o *InterconnectionList) SetInterconnections(v []Interconnection) {
	o.Interconnections = v
}

func (o InterconnectionList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Interconnections != nil {
		toSerialize["interconnections"] = o.Interconnections
	}
	return json.Marshal(toSerialize)
}

type NullableInterconnectionList struct {
	value *InterconnectionList
	isSet bool
}

func (v NullableInterconnectionList) Get() *InterconnectionList {
	return v.value
}

func (v *NullableInterconnectionList) Set(val *InterconnectionList) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionList) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionList(val *InterconnectionList) *NullableInterconnectionList {
	return &NullableInterconnectionList{value: val, isSet: true}
}

func (v NullableInterconnectionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
