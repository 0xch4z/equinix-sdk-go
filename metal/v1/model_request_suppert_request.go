/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// RequestSuppertRequest struct for RequestSuppertRequest
type RequestSuppertRequest struct {
	DeviceId  *string `json:"device_id,omitempty"`
	Message   string  `json:"message"`
	Priority  *string `json:"priority,omitempty"`
	ProjectId *string `json:"project_id,omitempty"`
	Subject   string  `json:"subject"`
}

// NewRequestSuppertRequest instantiates a new RequestSuppertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestSuppertRequest(message string, subject string) *RequestSuppertRequest {
	this := RequestSuppertRequest{}
	this.Message = message
	this.Subject = subject
	return &this
}

// NewRequestSuppertRequestWithDefaults instantiates a new RequestSuppertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestSuppertRequestWithDefaults() *RequestSuppertRequest {
	this := RequestSuppertRequest{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *RequestSuppertRequest) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSuppertRequest) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *RequestSuppertRequest) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *RequestSuppertRequest) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetMessage returns the Message field value
func (o *RequestSuppertRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RequestSuppertRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RequestSuppertRequest) SetMessage(v string) {
	o.Message = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *RequestSuppertRequest) GetPriority() string {
	if o == nil || o.Priority == nil {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSuppertRequest) GetPriorityOk() (*string, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *RequestSuppertRequest) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *RequestSuppertRequest) SetPriority(v string) {
	o.Priority = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *RequestSuppertRequest) GetProjectId() string {
	if o == nil || o.ProjectId == nil {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSuppertRequest) GetProjectIdOk() (*string, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *RequestSuppertRequest) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *RequestSuppertRequest) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetSubject returns the Subject field value
func (o *RequestSuppertRequest) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *RequestSuppertRequest) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *RequestSuppertRequest) SetSubject(v string) {
	o.Subject = v
}

func (o RequestSuppertRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceId != nil {
		toSerialize["device_id"] = o.DeviceId
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.ProjectId != nil {
		toSerialize["project_id"] = o.ProjectId
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	return json.Marshal(toSerialize)
}

type NullableRequestSuppertRequest struct {
	value *RequestSuppertRequest
	isSet bool
}

func (v NullableRequestSuppertRequest) Get() *RequestSuppertRequest {
	return v.value
}

func (v *NullableRequestSuppertRequest) Set(val *RequestSuppertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestSuppertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestSuppertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestSuppertRequest(val *RequestSuppertRequest) *NullableRequestSuppertRequest {
	return &NullableRequestSuppertRequest{value: val, isSet: true}
}

func (v NullableRequestSuppertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestSuppertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
