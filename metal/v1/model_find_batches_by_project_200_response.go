/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindBatchesByProject200Response struct for FindBatchesByProject200Response
type FindBatchesByProject200Response struct {
	Batches []FindBatchById200Response `json:"batches,omitempty"`
}

// NewFindBatchesByProject200Response instantiates a new FindBatchesByProject200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindBatchesByProject200Response() *FindBatchesByProject200Response {
	this := FindBatchesByProject200Response{}
	return &this
}

// NewFindBatchesByProject200ResponseWithDefaults instantiates a new FindBatchesByProject200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindBatchesByProject200ResponseWithDefaults() *FindBatchesByProject200Response {
	this := FindBatchesByProject200Response{}
	return &this
}

// GetBatches returns the Batches field value if set, zero value otherwise.
func (o *FindBatchesByProject200Response) GetBatches() []FindBatchById200Response {
	if o == nil || o.Batches == nil {
		var ret []FindBatchById200Response
		return ret
	}
	return o.Batches
}

// GetBatchesOk returns a tuple with the Batches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindBatchesByProject200Response) GetBatchesOk() ([]FindBatchById200Response, bool) {
	if o == nil || o.Batches == nil {
		return nil, false
	}
	return o.Batches, true
}

// HasBatches returns a boolean if a field has been set.
func (o *FindBatchesByProject200Response) HasBatches() bool {
	if o != nil && o.Batches != nil {
		return true
	}

	return false
}

// SetBatches gets a reference to the given []FindBatchById200Response and assigns it to the Batches field.
func (o *FindBatchesByProject200Response) SetBatches(v []FindBatchById200Response) {
	o.Batches = v
}

func (o FindBatchesByProject200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Batches != nil {
		toSerialize["batches"] = o.Batches
	}
	return json.Marshal(toSerialize)
}

type NullableFindBatchesByProject200Response struct {
	value *FindBatchesByProject200Response
	isSet bool
}

func (v NullableFindBatchesByProject200Response) Get() *FindBatchesByProject200Response {
	return v.value
}

func (v *NullableFindBatchesByProject200Response) Set(val *FindBatchesByProject200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindBatchesByProject200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindBatchesByProject200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindBatchesByProject200Response(val *FindBatchesByProject200Response) *NullableFindBatchesByProject200Response {
	return &NullableFindBatchesByProject200Response{value: val, isSet: true}
}

func (v NullableFindBatchesByProject200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindBatchesByProject200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
