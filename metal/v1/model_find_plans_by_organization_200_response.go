/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindPlansByOrganization200Response struct for FindPlansByOrganization200Response
type FindPlansByOrganization200Response struct {
	Plans []FindDeviceById200ResponsePlan `json:"plans,omitempty"`
}

// NewFindPlansByOrganization200Response instantiates a new FindPlansByOrganization200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindPlansByOrganization200Response() *FindPlansByOrganization200Response {
	this := FindPlansByOrganization200Response{}
	return &this
}

// NewFindPlansByOrganization200ResponseWithDefaults instantiates a new FindPlansByOrganization200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindPlansByOrganization200ResponseWithDefaults() *FindPlansByOrganization200Response {
	this := FindPlansByOrganization200Response{}
	return &this
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *FindPlansByOrganization200Response) GetPlans() []FindDeviceById200ResponsePlan {
	if o == nil || o.Plans == nil {
		var ret []FindDeviceById200ResponsePlan
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindPlansByOrganization200Response) GetPlansOk() ([]FindDeviceById200ResponsePlan, bool) {
	if o == nil || o.Plans == nil {
		return nil, false
	}
	return o.Plans, true
}

// HasPlans returns a boolean if a field has been set.
func (o *FindPlansByOrganization200Response) HasPlans() bool {
	if o != nil && o.Plans != nil {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []FindDeviceById200ResponsePlan and assigns it to the Plans field.
func (o *FindPlansByOrganization200Response) SetPlans(v []FindDeviceById200ResponsePlan) {
	o.Plans = v
}

func (o FindPlansByOrganization200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Plans != nil {
		toSerialize["plans"] = o.Plans
	}
	return json.Marshal(toSerialize)
}

type NullableFindPlansByOrganization200Response struct {
	value *FindPlansByOrganization200Response
	isSet bool
}

func (v NullableFindPlansByOrganization200Response) Get() *FindPlansByOrganization200Response {
	return v.value
}

func (v *NullableFindPlansByOrganization200Response) Set(val *FindPlansByOrganization200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindPlansByOrganization200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindPlansByOrganization200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindPlansByOrganization200Response(val *FindPlansByOrganization200Response) *NullableFindPlansByOrganization200Response {
	return &NullableFindPlansByOrganization200Response{value: val, isSet: true}
}

func (v NullableFindPlansByOrganization200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindPlansByOrganization200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
