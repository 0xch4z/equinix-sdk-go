/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindPortVlanAssignments200Response struct for FindPortVlanAssignments200Response
type FindPortVlanAssignments200Response struct {
	VlanAssignments []FindPortVlanAssignments200ResponseVlanAssignmentsInner `json:"vlan_assignments,omitempty"`
}

// NewFindPortVlanAssignments200Response instantiates a new FindPortVlanAssignments200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindPortVlanAssignments200Response() *FindPortVlanAssignments200Response {
	this := FindPortVlanAssignments200Response{}
	return &this
}

// NewFindPortVlanAssignments200ResponseWithDefaults instantiates a new FindPortVlanAssignments200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindPortVlanAssignments200ResponseWithDefaults() *FindPortVlanAssignments200Response {
	this := FindPortVlanAssignments200Response{}
	return &this
}

// GetVlanAssignments returns the VlanAssignments field value if set, zero value otherwise.
func (o *FindPortVlanAssignments200Response) GetVlanAssignments() []FindPortVlanAssignments200ResponseVlanAssignmentsInner {
	if o == nil || o.VlanAssignments == nil {
		var ret []FindPortVlanAssignments200ResponseVlanAssignmentsInner
		return ret
	}
	return o.VlanAssignments
}

// GetVlanAssignmentsOk returns a tuple with the VlanAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindPortVlanAssignments200Response) GetVlanAssignmentsOk() ([]FindPortVlanAssignments200ResponseVlanAssignmentsInner, bool) {
	if o == nil || o.VlanAssignments == nil {
		return nil, false
	}
	return o.VlanAssignments, true
}

// HasVlanAssignments returns a boolean if a field has been set.
func (o *FindPortVlanAssignments200Response) HasVlanAssignments() bool {
	if o != nil && o.VlanAssignments != nil {
		return true
	}

	return false
}

// SetVlanAssignments gets a reference to the given []FindPortVlanAssignments200ResponseVlanAssignmentsInner and assigns it to the VlanAssignments field.
func (o *FindPortVlanAssignments200Response) SetVlanAssignments(v []FindPortVlanAssignments200ResponseVlanAssignmentsInner) {
	o.VlanAssignments = v
}

func (o FindPortVlanAssignments200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VlanAssignments != nil {
		toSerialize["vlan_assignments"] = o.VlanAssignments
	}
	return json.Marshal(toSerialize)
}

type NullableFindPortVlanAssignments200Response struct {
	value *FindPortVlanAssignments200Response
	isSet bool
}

func (v NullableFindPortVlanAssignments200Response) Get() *FindPortVlanAssignments200Response {
	return v.value
}

func (v *NullableFindPortVlanAssignments200Response) Set(val *FindPortVlanAssignments200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindPortVlanAssignments200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindPortVlanAssignments200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindPortVlanAssignments200Response(val *FindPortVlanAssignments200Response) *NullableFindPortVlanAssignments200Response {
	return &NullableFindPortVlanAssignments200Response{value: val, isSet: true}
}

func (v NullableFindPortVlanAssignments200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindPortVlanAssignments200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
