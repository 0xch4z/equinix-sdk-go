// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Device device
//
// swagger:model Device
type Device struct {

	// always pxe
	AlwaysPxe bool `json:"always_pxe,omitempty"`

	// billing cycle
	BillingCycle string `json:"billing_cycle,omitempty"`

	// bonding mode
	BondingMode int64 `json:"bonding_mode,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// customdata
	Customdata string `json:"customdata,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// facility
	Facility *Facility `json:"facility,omitempty"`

	// hardware reservation
	HardwareReservation *Href `json:"hardware_reservation,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// href
	Href string `json:"href,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// image url
	ImageURL string `json:"image_url,omitempty"`

	// ip addresses
	IPAddresses []*IPAssignment `json:"ip_addresses"`

	// ipxe script url
	IpxeScriptURL string `json:"ipxe_script_url,omitempty"`

	// iqn
	Iqn string `json:"iqn,omitempty"`

	// location
	Location *HardwareLocation `json:"location,omitempty"`

	// locked
	Locked bool `json:"locked,omitempty"`

	// operating system
	OperatingSystem *OperatingSystem `json:"operating_system,omitempty"`

	// plan
	Plan *Plan `json:"plan,omitempty"`

	// Full version of project object when included
	Project *Href `json:"project,omitempty"`

	// Lite version of project object when included
	ProjectLite *Href `json:"project_lite,omitempty"`

	// provisioning events
	ProvisioningEvents []*Event `json:"provisioning_events"`

	// provisioning percentage
	ProvisioningPercentage float32 `json:"provisioning_percentage,omitempty"`

	// root password
	RootPassword string `json:"root_password,omitempty"`

	// short id
	ShortID string `json:"short_id,omitempty"`

	// spot instance
	SpotInstance bool `json:"spot_instance,omitempty"`

	// spot price max
	SpotPriceMax float32 `json:"spot_price_max,omitempty"`

	// ssh keys
	SSHKeys []*Href `json:"ssh_keys"`

	// state
	State string `json:"state,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// termination time
	// Format: date-time
	TerminationTime strfmt.DateTime `json:"termination_time,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// userdata
	Userdata string `json:"userdata,omitempty"`

	// volumes
	Volumes []*Href `json:"volumes"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardwareReservation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectLite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerminationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateFacility(formats strfmt.Registry) error {

	if swag.IsZero(m.Facility) { // not required
		return nil
	}

	if m.Facility != nil {
		if err := m.Facility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("facility")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateHardwareReservation(formats strfmt.Registry) error {

	if swag.IsZero(m.HardwareReservation) { // not required
		return nil
	}

	if m.HardwareReservation != nil {
		if err := m.HardwareReservation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hardware_reservation")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateIPAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.IPAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.IPAddresses); i++ {
		if swag.IsZero(m.IPAddresses[i]) { // not required
			continue
		}

		if m.IPAddresses[i] != nil {
			if err := m.IPAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ip_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Device) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateOperatingSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	if m.OperatingSystem != nil {
		if err := m.OperatingSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operating_system")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validatePlan(formats strfmt.Registry) error {

	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateProjectLite(formats strfmt.Registry) error {

	if swag.IsZero(m.ProjectLite) { // not required
		return nil
	}

	if m.ProjectLite != nil {
		if err := m.ProjectLite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_lite")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateProvisioningEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisioningEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.ProvisioningEvents); i++ {
		if swag.IsZero(m.ProvisioningEvents[i]) { // not required
			continue
		}

		if m.ProvisioningEvents[i] != nil {
			if err := m.ProvisioningEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("provisioning_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Device) validateSSHKeys(formats strfmt.Registry) error {

	if swag.IsZero(m.SSHKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.SSHKeys); i++ {
		if swag.IsZero(m.SSHKeys[i]) { // not required
			continue
		}

		if m.SSHKeys[i] != nil {
			if err := m.SSHKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ssh_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Device) validateTerminationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TerminationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("termination_time", "body", "date-time", m.TerminationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Device) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
