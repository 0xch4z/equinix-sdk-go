// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterconnectionPort interconnection port
//
// swagger:model InterconnectionPort
type InterconnectionPort struct {

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// organization
	Organization *Href `json:"organization,omitempty"`

	// Either 'primary' or 'secondary'.
	Role string `json:"role,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// A switch 'short ID'
	SwitchID string `json:"switch_id,omitempty"`

	// virtual circuits
	VirtualCircuits *VirtualCircuitList `json:"virtual_circuits,omitempty"`
}

// Validate validates this interconnection port
func (m *InterconnectionPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualCircuits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InterconnectionPort) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InterconnectionPort) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *InterconnectionPort) validateVirtualCircuits(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualCircuits) { // not required
		return nil
	}

	if m.VirtualCircuits != nil {
		if err := m.VirtualCircuits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtual_circuits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InterconnectionPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterconnectionPort) UnmarshalBinary(b []byte) error {
	var res InterconnectionPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
