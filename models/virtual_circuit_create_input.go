// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualCircuitCreateInput virtual circuit create input
//
// swagger:model VirtualCircuitCreateInput
type VirtualCircuitCreateInput struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nni vlan
	// Maximum: 4094
	// Minimum: 2
	NniVlan int64 `json:"nni_vlan,omitempty"`

	// project
	// Format: uuid
	Project strfmt.UUID `json:"project,omitempty"`

	// speed can be passed as integer number representing bps speed or string (e.g. '52m' or '100g' or '4 gbps')
	Speed int64 `json:"speed,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// A Virtual Network record UUID or the VNID of a Virtual Network in your project (sent as integer).
	// Format: uuid
	Vnid strfmt.UUID `json:"vnid,omitempty"`
}

// Validate validates this virtual circuit create input
func (m *VirtualCircuitCreateInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNniVlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualCircuitCreateInput) validateNniVlan(formats strfmt.Registry) error {

	if swag.IsZero(m.NniVlan) { // not required
		return nil
	}

	if err := validate.MinimumInt("nni_vlan", "body", int64(m.NniVlan), 2, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("nni_vlan", "body", int64(m.NniVlan), 4094, false); err != nil {
		return err
	}

	return nil
}

func (m *VirtualCircuitCreateInput) validateProject(formats strfmt.Registry) error {

	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if err := validate.FormatOf("project", "body", "uuid", m.Project.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualCircuitCreateInput) validateVnid(formats strfmt.Registry) error {

	if swag.IsZero(m.Vnid) { // not required
		return nil
	}

	if err := validate.FormatOf("vnid", "body", "uuid", m.Vnid.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualCircuitCreateInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualCircuitCreateInput) UnmarshalBinary(b []byte) error {
	var res VirtualCircuitCreateInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
