diff --git b/metal/v1/model_facility_input_facility.go a/metal/v1/model_facility_input_facility.go
index b4d2e82..911e10f 100644
--- b/metal/v1/model_facility_input_facility.go
+++ a/metal/v1/model_facility_input_facility.go
@@ -18,37 +18,37 @@ import (
 
 // FacilityInputFacility The datacenter where the device should be created.  Either metro or facility must be provided.  The API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.  Additionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail.
 type FacilityInputFacility struct {
-	[]string *[]string
-	string *string
+	ArrayOfString *[]string
+	String        *string
 }
 
 // Unmarshal JSON data into any of the pointers in the struct
 func (dst *FacilityInputFacility) UnmarshalJSON(data []byte) error {
 	var err error
 	// try to unmarshal JSON data into []string
-	err = json.Unmarshal(data, &dst.[]string);
+	err = json.Unmarshal(data, &dst.ArrayOfString)
 	if err == nil {
-		json[]string, _ := json.Marshal(dst.[]string)
-		if string(json[]string) == "{}" { // empty struct
-			dst.[]string = nil
+		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
+		if string(jsonArrayOfString) == "{}" { // empty struct
+			dst.ArrayOfString = nil
 		} else {
-			return nil // data stored in dst.[]string, return on the first match
+			return nil // data stored in dst.ArrayOfString, return on the first match
 		}
 	} else {
-		dst.[]string = nil
+		dst.ArrayOfString = nil
 	}
 
 	// try to unmarshal JSON data into string
-	err = json.Unmarshal(data, &dst.string);
+	err = json.Unmarshal(data, &dst.String)
 	if err == nil {
-		jsonstring, _ := json.Marshal(dst.string)
-		if string(jsonstring) == "{}" { // empty struct
-			dst.string = nil
+		jsonString, _ := json.Marshal(dst.String)
+		if string(jsonString) == "{}" { // empty struct
+			dst.String = nil
 		} else {
-			return nil // data stored in dst.string, return on the first match
+			return nil // data stored in dst.String, return on the first match
 		}
 	} else {
-		dst.string = nil
+		dst.String = nil
 	}
 
 	return fmt.Errorf("data failed to match schemas in anyOf(FacilityInputFacility)")
@@ -56,12 +56,12 @@ func (dst *FacilityInputFacility) UnmarshalJSON(data []byte) error {
 
 // Marshal data from the first non-nil pointers in the struct to JSON
 func (src *FacilityInputFacility) MarshalJSON() ([]byte, error) {
-	if src.[]string != nil {
-		return json.Marshal(&src.[]string)
+	if src.ArrayOfString != nil {
+		return json.Marshal(&src.ArrayOfString)
 	}
 
-	if src.string != nil {
-		return json.Marshal(&src.string)
+	if src.String != nil {
+		return json.Marshal(&src.String)
 	}
 
 	return nil, nil // no data in anyOf schemas
