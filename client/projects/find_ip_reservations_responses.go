// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindIPReservationsReader is a Reader for the FindIPReservations structure.
type FindIPReservationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindIPReservationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindIPReservationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindIPReservationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindIPReservationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindIPReservationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindIPReservationsOK creates a FindIPReservationsOK with default headers values
func NewFindIPReservationsOK() *FindIPReservationsOK {
	return &FindIPReservationsOK{}
}

/*FindIPReservationsOK handles this case with default header values.

ok
*/
type FindIPReservationsOK struct {
	Payload *types.IPReservationList
}

func (o *FindIPReservationsOK) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/ips][%d] findIpReservationsOK  %+v", 200, o.Payload)
}

func (o *FindIPReservationsOK) GetPayload() *types.IPReservationList {
	return o.Payload
}

func (o *FindIPReservationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.IPReservationList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindIPReservationsUnauthorized creates a FindIPReservationsUnauthorized with default headers values
func NewFindIPReservationsUnauthorized() *FindIPReservationsUnauthorized {
	return &FindIPReservationsUnauthorized{}
}

/*FindIPReservationsUnauthorized handles this case with default header values.

unauthorized
*/
type FindIPReservationsUnauthorized struct {
}

func (o *FindIPReservationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/ips][%d] findIpReservationsUnauthorized ", 401)
}

func (o *FindIPReservationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindIPReservationsForbidden creates a FindIPReservationsForbidden with default headers values
func NewFindIPReservationsForbidden() *FindIPReservationsForbidden {
	return &FindIPReservationsForbidden{}
}

/*FindIPReservationsForbidden handles this case with default header values.

forbidden
*/
type FindIPReservationsForbidden struct {
}

func (o *FindIPReservationsForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/ips][%d] findIpReservationsForbidden ", 403)
}

func (o *FindIPReservationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindIPReservationsNotFound creates a FindIPReservationsNotFound with default headers values
func NewFindIPReservationsNotFound() *FindIPReservationsNotFound {
	return &FindIPReservationsNotFound{}
}

/*FindIPReservationsNotFound handles this case with default header values.

not found
*/
type FindIPReservationsNotFound struct {
}

func (o *FindIPReservationsNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{id}/ips][%d] findIpReservationsNotFound ", 404)
}

func (o *FindIPReservationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
