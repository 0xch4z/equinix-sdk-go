// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/models"
)

// NewCreateLicenseParams creates a new CreateLicenseParams object
// with the default values initialized.
func NewCreateLicenseParams() *CreateLicenseParams {
	var ()
	return &CreateLicenseParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateLicenseParamsWithTimeout creates a new CreateLicenseParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateLicenseParamsWithTimeout(timeout time.Duration) *CreateLicenseParams {
	var ()
	return &CreateLicenseParams{

		timeout: timeout,
	}
}

// NewCreateLicenseParamsWithContext creates a new CreateLicenseParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateLicenseParamsWithContext(ctx context.Context) *CreateLicenseParams {
	var ()
	return &CreateLicenseParams{

		Context: ctx,
	}
}

// NewCreateLicenseParamsWithHTTPClient creates a new CreateLicenseParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateLicenseParamsWithHTTPClient(client *http.Client) *CreateLicenseParams {
	var ()
	return &CreateLicenseParams{
		HTTPClient: client,
	}
}

/*CreateLicenseParams contains all the parameters to send to the API endpoint
for the create license operation typically these are written to a http.Request
*/
type CreateLicenseParams struct {

	/*ID
	  Project UUID

	*/
	ID strfmt.UUID
	/*License
	  License to create

	*/
	License *models.LicenseCreateInput

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create license params
func (o *CreateLicenseParams) WithTimeout(timeout time.Duration) *CreateLicenseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create license params
func (o *CreateLicenseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create license params
func (o *CreateLicenseParams) WithContext(ctx context.Context) *CreateLicenseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create license params
func (o *CreateLicenseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create license params
func (o *CreateLicenseParams) WithHTTPClient(client *http.Client) *CreateLicenseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create license params
func (o *CreateLicenseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the create license params
func (o *CreateLicenseParams) WithID(id strfmt.UUID) *CreateLicenseParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the create license params
func (o *CreateLicenseParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithLicense adds the license to the create license params
func (o *CreateLicenseParams) WithLicense(license *models.LicenseCreateInput) *CreateLicenseParams {
	o.SetLicense(license)
	return o
}

// SetLicense adds the license to the create license params
func (o *CreateLicenseParams) SetLicense(license *models.LicenseCreateInput) {
	o.License = license
}

// WriteToRequest writes these params to a swagger request
func (o *CreateLicenseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.License != nil {
		if err := r.SetBodyParam(o.License); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
