// Code generated by go-swagger; DO NOT EDIT.

package ssh_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindSSHKeyByIDReader is a Reader for the FindSSHKeyByID structure.
type FindSSHKeyByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindSSHKeyByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindSSHKeyByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindSSHKeyByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindSSHKeyByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindSSHKeyByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindSSHKeyByIDOK creates a FindSSHKeyByIDOK with default headers values
func NewFindSSHKeyByIDOK() *FindSSHKeyByIDOK {
	return &FindSSHKeyByIDOK{}
}

/* FindSSHKeyByIDOK describes a response with status code 200, with default header values.

ok
*/
type FindSSHKeyByIDOK struct {
	Payload *types.SSHKey
}

func (o *FindSSHKeyByIDOK) Error() string {
	return fmt.Sprintf("[GET /ssh-keys/{id}][%d] findSshKeyByIdOK  %+v", 200, o.Payload)
}
func (o *FindSSHKeyByIDOK) GetPayload() *types.SSHKey {
	return o.Payload
}

func (o *FindSSHKeyByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.SSHKey)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindSSHKeyByIDUnauthorized creates a FindSSHKeyByIDUnauthorized with default headers values
func NewFindSSHKeyByIDUnauthorized() *FindSSHKeyByIDUnauthorized {
	return &FindSSHKeyByIDUnauthorized{}
}

/* FindSSHKeyByIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindSSHKeyByIDUnauthorized struct {
}

func (o *FindSSHKeyByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ssh-keys/{id}][%d] findSshKeyByIdUnauthorized ", 401)
}

func (o *FindSSHKeyByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindSSHKeyByIDForbidden creates a FindSSHKeyByIDForbidden with default headers values
func NewFindSSHKeyByIDForbidden() *FindSSHKeyByIDForbidden {
	return &FindSSHKeyByIDForbidden{}
}

/* FindSSHKeyByIDForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindSSHKeyByIDForbidden struct {
}

func (o *FindSSHKeyByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /ssh-keys/{id}][%d] findSshKeyByIdForbidden ", 403)
}

func (o *FindSSHKeyByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindSSHKeyByIDNotFound creates a FindSSHKeyByIDNotFound with default headers values
func NewFindSSHKeyByIDNotFound() *FindSSHKeyByIDNotFound {
	return &FindSSHKeyByIDNotFound{}
}

/* FindSSHKeyByIDNotFound describes a response with status code 404, with default header values.

not found
*/
type FindSSHKeyByIDNotFound struct {
}

func (o *FindSSHKeyByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /ssh-keys/{id}][%d] findSshKeyByIdNotFound ", 404)
}

func (o *FindSSHKeyByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
