// Code generated by go-swagger; DO NOT EDIT.

package operating_systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindOperatingSystemsByOrganizationReader is a Reader for the FindOperatingSystemsByOrganization structure.
type FindOperatingSystemsByOrganizationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindOperatingSystemsByOrganizationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindOperatingSystemsByOrganizationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindOperatingSystemsByOrganizationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindOperatingSystemsByOrganizationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindOperatingSystemsByOrganizationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindOperatingSystemsByOrganizationOK creates a FindOperatingSystemsByOrganizationOK with default headers values
func NewFindOperatingSystemsByOrganizationOK() *FindOperatingSystemsByOrganizationOK {
	return &FindOperatingSystemsByOrganizationOK{}
}

/*FindOperatingSystemsByOrganizationOK handles this case with default header values.

ok
*/
type FindOperatingSystemsByOrganizationOK struct {
	Payload types.OperatingSystemList
}

func (o *FindOperatingSystemsByOrganizationOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/operating-systems][%d] findOperatingSystemsByOrganizationOK  %+v", 200, o.Payload)
}

func (o *FindOperatingSystemsByOrganizationOK) GetPayload() types.OperatingSystemList {
	return o.Payload
}

func (o *FindOperatingSystemsByOrganizationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOperatingSystemsByOrganizationUnauthorized creates a FindOperatingSystemsByOrganizationUnauthorized with default headers values
func NewFindOperatingSystemsByOrganizationUnauthorized() *FindOperatingSystemsByOrganizationUnauthorized {
	return &FindOperatingSystemsByOrganizationUnauthorized{}
}

/*FindOperatingSystemsByOrganizationUnauthorized handles this case with default header values.

unauthorized
*/
type FindOperatingSystemsByOrganizationUnauthorized struct {
}

func (o *FindOperatingSystemsByOrganizationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/operating-systems][%d] findOperatingSystemsByOrganizationUnauthorized ", 401)
}

func (o *FindOperatingSystemsByOrganizationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindOperatingSystemsByOrganizationForbidden creates a FindOperatingSystemsByOrganizationForbidden with default headers values
func NewFindOperatingSystemsByOrganizationForbidden() *FindOperatingSystemsByOrganizationForbidden {
	return &FindOperatingSystemsByOrganizationForbidden{}
}

/*FindOperatingSystemsByOrganizationForbidden handles this case with default header values.

forbidden
*/
type FindOperatingSystemsByOrganizationForbidden struct {
}

func (o *FindOperatingSystemsByOrganizationForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/operating-systems][%d] findOperatingSystemsByOrganizationForbidden ", 403)
}

func (o *FindOperatingSystemsByOrganizationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindOperatingSystemsByOrganizationNotFound creates a FindOperatingSystemsByOrganizationNotFound with default headers values
func NewFindOperatingSystemsByOrganizationNotFound() *FindOperatingSystemsByOrganizationNotFound {
	return &FindOperatingSystemsByOrganizationNotFound{}
}

/*FindOperatingSystemsByOrganizationNotFound handles this case with default header values.

not found
*/
type FindOperatingSystemsByOrganizationNotFound struct {
}

func (o *FindOperatingSystemsByOrganizationNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/operating-systems][%d] findOperatingSystemsByOrganizationNotFound ", 404)
}

func (o *FindOperatingSystemsByOrganizationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
