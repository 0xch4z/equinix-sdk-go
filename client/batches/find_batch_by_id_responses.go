// Code generated by go-swagger; DO NOT EDIT.

package batches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindBatchByIDReader is a Reader for the FindBatchByID structure.
type FindBatchByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindBatchByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindBatchByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindBatchByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindBatchByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindBatchByIDOK creates a FindBatchByIDOK with default headers values
func NewFindBatchByIDOK() *FindBatchByIDOK {
	return &FindBatchByIDOK{}
}

/* FindBatchByIDOK describes a response with status code 200, with default header values.

ok
*/
type FindBatchByIDOK struct {
	Payload *types.Batch
}

func (o *FindBatchByIDOK) Error() string {
	return fmt.Sprintf("[GET /batches/{id}][%d] findBatchByIdOK  %+v", 200, o.Payload)
}
func (o *FindBatchByIDOK) GetPayload() *types.Batch {
	return o.Payload
}

func (o *FindBatchByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Batch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindBatchByIDUnauthorized creates a FindBatchByIDUnauthorized with default headers values
func NewFindBatchByIDUnauthorized() *FindBatchByIDUnauthorized {
	return &FindBatchByIDUnauthorized{}
}

/* FindBatchByIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindBatchByIDUnauthorized struct {
}

func (o *FindBatchByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /batches/{id}][%d] findBatchByIdUnauthorized ", 401)
}

func (o *FindBatchByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindBatchByIDNotFound creates a FindBatchByIDNotFound with default headers values
func NewFindBatchByIDNotFound() *FindBatchByIDNotFound {
	return &FindBatchByIDNotFound{}
}

/* FindBatchByIDNotFound describes a response with status code 404, with default header values.

not found
*/
type FindBatchByIDNotFound struct {
}

func (o *FindBatchByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /batches/{id}][%d] findBatchByIdNotFound ", 404)
}

func (o *FindBatchByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
