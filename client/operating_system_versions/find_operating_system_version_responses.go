// Code generated by go-swagger; DO NOT EDIT.

package operating_system_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindOperatingSystemVersionReader is a Reader for the FindOperatingSystemVersion structure.
type FindOperatingSystemVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindOperatingSystemVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindOperatingSystemVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindOperatingSystemVersionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindOperatingSystemVersionOK creates a FindOperatingSystemVersionOK with default headers values
func NewFindOperatingSystemVersionOK() *FindOperatingSystemVersionOK {
	return &FindOperatingSystemVersionOK{}
}

/*FindOperatingSystemVersionOK handles this case with default header values.

ok
*/
type FindOperatingSystemVersionOK struct {
	Payload types.OperatingSystemList
}

func (o *FindOperatingSystemVersionOK) Error() string {
	return fmt.Sprintf("[GET /operating-system-versions][%d] findOperatingSystemVersionOK  %+v", 200, o.Payload)
}

func (o *FindOperatingSystemVersionOK) GetPayload() types.OperatingSystemList {
	return o.Payload
}

func (o *FindOperatingSystemVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOperatingSystemVersionUnauthorized creates a FindOperatingSystemVersionUnauthorized with default headers values
func NewFindOperatingSystemVersionUnauthorized() *FindOperatingSystemVersionUnauthorized {
	return &FindOperatingSystemVersionUnauthorized{}
}

/*FindOperatingSystemVersionUnauthorized handles this case with default header values.

unauthorized
*/
type FindOperatingSystemVersionUnauthorized struct {
}

func (o *FindOperatingSystemVersionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /operating-system-versions][%d] findOperatingSystemVersionUnauthorized ", 401)
}

func (o *FindOperatingSystemVersionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
