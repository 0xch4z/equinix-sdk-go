// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// NewCreateIPAssignmentParams creates a new CreateIPAssignmentParams object
// with the default values initialized.
func NewCreateIPAssignmentParams() *CreateIPAssignmentParams {
	var ()
	return &CreateIPAssignmentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateIPAssignmentParamsWithTimeout creates a new CreateIPAssignmentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateIPAssignmentParamsWithTimeout(timeout time.Duration) *CreateIPAssignmentParams {
	var ()
	return &CreateIPAssignmentParams{

		timeout: timeout,
	}
}

// NewCreateIPAssignmentParamsWithContext creates a new CreateIPAssignmentParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateIPAssignmentParamsWithContext(ctx context.Context) *CreateIPAssignmentParams {
	var ()
	return &CreateIPAssignmentParams{

		Context: ctx,
	}
}

// NewCreateIPAssignmentParamsWithHTTPClient creates a new CreateIPAssignmentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateIPAssignmentParamsWithHTTPClient(client *http.Client) *CreateIPAssignmentParams {
	var ()
	return &CreateIPAssignmentParams{
		HTTPClient: client,
	}
}

/*CreateIPAssignmentParams contains all the parameters to send to the API endpoint
for the create IP assignment operation typically these are written to a http.Request
*/
type CreateIPAssignmentParams struct {

	/*ID
	  Device UUID

	*/
	ID strfmt.UUID
	/*IPAssignment
	  IPAssignment to create

	*/
	IPAssignment *types.IPAssignmentInput

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create IP assignment params
func (o *CreateIPAssignmentParams) WithTimeout(timeout time.Duration) *CreateIPAssignmentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create IP assignment params
func (o *CreateIPAssignmentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create IP assignment params
func (o *CreateIPAssignmentParams) WithContext(ctx context.Context) *CreateIPAssignmentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create IP assignment params
func (o *CreateIPAssignmentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create IP assignment params
func (o *CreateIPAssignmentParams) WithHTTPClient(client *http.Client) *CreateIPAssignmentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create IP assignment params
func (o *CreateIPAssignmentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the create IP assignment params
func (o *CreateIPAssignmentParams) WithID(id strfmt.UUID) *CreateIPAssignmentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the create IP assignment params
func (o *CreateIPAssignmentParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithIPAssignment adds the iPAssignment to the create IP assignment params
func (o *CreateIPAssignmentParams) WithIPAssignment(iPAssignment *types.IPAssignmentInput) *CreateIPAssignmentParams {
	o.SetIPAssignment(iPAssignment)
	return o
}

// SetIPAssignment adds the ipAssignment to the create IP assignment params
func (o *CreateIPAssignmentParams) SetIPAssignment(iPAssignment *types.IPAssignmentInput) {
	o.IPAssignment = iPAssignment
}

// WriteToRequest writes these params to a swagger request
func (o *CreateIPAssignmentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.IPAssignment != nil {
		if err := r.SetBodyParam(o.IPAssignment); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
