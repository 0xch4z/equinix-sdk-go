// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindDeviceByIDReader is a Reader for the FindDeviceByID structure.
type FindDeviceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindDeviceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindDeviceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindDeviceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindDeviceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindDeviceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindDeviceByIDOK creates a FindDeviceByIDOK with default headers values
func NewFindDeviceByIDOK() *FindDeviceByIDOK {
	return &FindDeviceByIDOK{}
}

/*FindDeviceByIDOK handles this case with default header values.

ok
*/
type FindDeviceByIDOK struct {
	Payload *types.Device
}

func (o *FindDeviceByIDOK) Error() string {
	return fmt.Sprintf("[GET /devices/{id}][%d] findDeviceByIdOK  %+v", 200, o.Payload)
}

func (o *FindDeviceByIDOK) GetPayload() *types.Device {
	return o.Payload
}

func (o *FindDeviceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Device)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindDeviceByIDUnauthorized creates a FindDeviceByIDUnauthorized with default headers values
func NewFindDeviceByIDUnauthorized() *FindDeviceByIDUnauthorized {
	return &FindDeviceByIDUnauthorized{}
}

/*FindDeviceByIDUnauthorized handles this case with default header values.

unauthorized
*/
type FindDeviceByIDUnauthorized struct {
}

func (o *FindDeviceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/{id}][%d] findDeviceByIdUnauthorized ", 401)
}

func (o *FindDeviceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDeviceByIDForbidden creates a FindDeviceByIDForbidden with default headers values
func NewFindDeviceByIDForbidden() *FindDeviceByIDForbidden {
	return &FindDeviceByIDForbidden{}
}

/*FindDeviceByIDForbidden handles this case with default header values.

forbidden
*/
type FindDeviceByIDForbidden struct {
}

func (o *FindDeviceByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/{id}][%d] findDeviceByIdForbidden ", 403)
}

func (o *FindDeviceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDeviceByIDNotFound creates a FindDeviceByIDNotFound with default headers values
func NewFindDeviceByIDNotFound() *FindDeviceByIDNotFound {
	return &FindDeviceByIDNotFound{}
}

/*FindDeviceByIDNotFound handles this case with default header values.

not found
*/
type FindDeviceByIDNotFound struct {
}

func (o *FindDeviceByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/{id}][%d] findDeviceByIdNotFound ", 404)
}

func (o *FindDeviceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
