// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// FindTrafficReader is a Reader for the FindTraffic structure.
type FindTrafficReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindTrafficReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindTrafficOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindTrafficUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindTrafficForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindTrafficNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindTrafficOK creates a FindTrafficOK with default headers values
func NewFindTrafficOK() *FindTrafficOK {
	return &FindTrafficOK{}
}

/*FindTrafficOK handles this case with default header values.

ok
*/
type FindTrafficOK struct {
}

func (o *FindTrafficOK) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/traffic][%d] findTrafficOK ", 200)
}

func (o *FindTrafficOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindTrafficUnauthorized creates a FindTrafficUnauthorized with default headers values
func NewFindTrafficUnauthorized() *FindTrafficUnauthorized {
	return &FindTrafficUnauthorized{}
}

/*FindTrafficUnauthorized handles this case with default header values.

unauthorized
*/
type FindTrafficUnauthorized struct {
}

func (o *FindTrafficUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/traffic][%d] findTrafficUnauthorized ", 401)
}

func (o *FindTrafficUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindTrafficForbidden creates a FindTrafficForbidden with default headers values
func NewFindTrafficForbidden() *FindTrafficForbidden {
	return &FindTrafficForbidden{}
}

/*FindTrafficForbidden handles this case with default header values.

forbidden
*/
type FindTrafficForbidden struct {
}

func (o *FindTrafficForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/traffic][%d] findTrafficForbidden ", 403)
}

func (o *FindTrafficForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindTrafficNotFound creates a FindTrafficNotFound with default headers values
func NewFindTrafficNotFound() *FindTrafficNotFound {
	return &FindTrafficNotFound{}
}

/*FindTrafficNotFound handles this case with default header values.

not found
*/
type FindTrafficNotFound struct {
}

func (o *FindTrafficNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/traffic][%d] findTrafficNotFound ", 404)
}

func (o *FindTrafficNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
