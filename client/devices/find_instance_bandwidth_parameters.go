// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindInstanceBandwidthParams creates a new FindInstanceBandwidthParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindInstanceBandwidthParams() *FindInstanceBandwidthParams {
	return &FindInstanceBandwidthParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindInstanceBandwidthParamsWithTimeout creates a new FindInstanceBandwidthParams object
// with the ability to set a timeout on a request.
func NewFindInstanceBandwidthParamsWithTimeout(timeout time.Duration) *FindInstanceBandwidthParams {
	return &FindInstanceBandwidthParams{
		timeout: timeout,
	}
}

// NewFindInstanceBandwidthParamsWithContext creates a new FindInstanceBandwidthParams object
// with the ability to set a context for a request.
func NewFindInstanceBandwidthParamsWithContext(ctx context.Context) *FindInstanceBandwidthParams {
	return &FindInstanceBandwidthParams{
		Context: ctx,
	}
}

// NewFindInstanceBandwidthParamsWithHTTPClient creates a new FindInstanceBandwidthParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindInstanceBandwidthParamsWithHTTPClient(client *http.Client) *FindInstanceBandwidthParams {
	return &FindInstanceBandwidthParams{
		HTTPClient: client,
	}
}

/* FindInstanceBandwidthParams contains all the parameters to send to the API endpoint
   for the find instance bandwidth operation.

   Typically these are written to a http.Request.
*/
type FindInstanceBandwidthParams struct {

	/* From.

	   Timestamp from range
	*/
	From string

	/* ID.

	   Device UUID

	   Format: uuid
	*/
	ID strfmt.UUID

	/* Until.

	   Timestamp to range
	*/
	Until string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find instance bandwidth params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindInstanceBandwidthParams) WithDefaults() *FindInstanceBandwidthParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find instance bandwidth params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindInstanceBandwidthParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) WithTimeout(timeout time.Duration) *FindInstanceBandwidthParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) WithContext(ctx context.Context) *FindInstanceBandwidthParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) WithHTTPClient(client *http.Client) *FindInstanceBandwidthParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) WithFrom(from string) *FindInstanceBandwidthParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) SetFrom(from string) {
	o.From = from
}

// WithID adds the id to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) WithID(id strfmt.UUID) *FindInstanceBandwidthParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithUntil adds the until to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) WithUntil(until string) *FindInstanceBandwidthParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the find instance bandwidth params
func (o *FindInstanceBandwidthParams) SetUntil(until string) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *FindInstanceBandwidthParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {

		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// query param until
	qrUntil := o.Until
	qUntil := qrUntil
	if qUntil != "" {

		if err := r.SetQueryParam("until", qUntil); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
