// Code generated by go-swagger; DO NOT EDIT.

package invitations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeclineInvitationReader is a Reader for the DeclineInvitation structure.
type DeclineInvitationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeclineInvitationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeclineInvitationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeclineInvitationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeclineInvitationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeclineInvitationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeclineInvitationNoContent creates a DeclineInvitationNoContent with default headers values
func NewDeclineInvitationNoContent() *DeclineInvitationNoContent {
	return &DeclineInvitationNoContent{}
}

/*DeclineInvitationNoContent handles this case with default header values.

no content
*/
type DeclineInvitationNoContent struct {
}

func (o *DeclineInvitationNoContent) Error() string {
	return fmt.Sprintf("[DELETE /invitations/{id}][%d] declineInvitationNoContent ", 204)
}

func (o *DeclineInvitationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeclineInvitationUnauthorized creates a DeclineInvitationUnauthorized with default headers values
func NewDeclineInvitationUnauthorized() *DeclineInvitationUnauthorized {
	return &DeclineInvitationUnauthorized{}
}

/*DeclineInvitationUnauthorized handles this case with default header values.

unauthorized
*/
type DeclineInvitationUnauthorized struct {
}

func (o *DeclineInvitationUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /invitations/{id}][%d] declineInvitationUnauthorized ", 401)
}

func (o *DeclineInvitationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeclineInvitationForbidden creates a DeclineInvitationForbidden with default headers values
func NewDeclineInvitationForbidden() *DeclineInvitationForbidden {
	return &DeclineInvitationForbidden{}
}

/*DeclineInvitationForbidden handles this case with default header values.

forbidden
*/
type DeclineInvitationForbidden struct {
}

func (o *DeclineInvitationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /invitations/{id}][%d] declineInvitationForbidden ", 403)
}

func (o *DeclineInvitationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeclineInvitationNotFound creates a DeclineInvitationNotFound with default headers values
func NewDeclineInvitationNotFound() *DeclineInvitationNotFound {
	return &DeclineInvitationNotFound{}
}

/*DeclineInvitationNotFound handles this case with default header values.

not found
*/
type DeclineInvitationNotFound struct {
}

func (o *DeclineInvitationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /invitations/{id}][%d] declineInvitationNotFound ", 404)
}

func (o *DeclineInvitationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
