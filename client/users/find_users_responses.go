// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindUsersReader is a Reader for the FindUsers structure.
type FindUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindUsersOK creates a FindUsersOK with default headers values
func NewFindUsersOK() *FindUsersOK {
	return &FindUsersOK{}
}

/*FindUsersOK handles this case with default header values.

ok
*/
type FindUsersOK struct {
	Payload *types.UserList
}

func (o *FindUsersOK) Error() string {
	return fmt.Sprintf("[GET /users][%d] findUsersOK  %+v", 200, o.Payload)
}

func (o *FindUsersOK) GetPayload() *types.UserList {
	return o.Payload
}

func (o *FindUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.UserList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindUsersUnauthorized creates a FindUsersUnauthorized with default headers values
func NewFindUsersUnauthorized() *FindUsersUnauthorized {
	return &FindUsersUnauthorized{}
}

/*FindUsersUnauthorized handles this case with default header values.

unauthorized
*/
type FindUsersUnauthorized struct {
}

func (o *FindUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users][%d] findUsersUnauthorized ", 401)
}

func (o *FindUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
