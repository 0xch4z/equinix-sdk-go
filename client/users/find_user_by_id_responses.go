// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindUserByIDReader is a Reader for the FindUserByID structure.
type FindUserByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindUserByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindUserByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindUserByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindUserByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindUserByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindUserByIDOK creates a FindUserByIDOK with default headers values
func NewFindUserByIDOK() *FindUserByIDOK {
	return &FindUserByIDOK{}
}

/* FindUserByIDOK describes a response with status code 200, with default header values.

ok
*/
type FindUserByIDOK struct {
	Payload *types.User
}

func (o *FindUserByIDOK) Error() string {
	return fmt.Sprintf("[GET /users/{id}][%d] findUserByIdOK  %+v", 200, o.Payload)
}
func (o *FindUserByIDOK) GetPayload() *types.User {
	return o.Payload
}

func (o *FindUserByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindUserByIDUnauthorized creates a FindUserByIDUnauthorized with default headers values
func NewFindUserByIDUnauthorized() *FindUserByIDUnauthorized {
	return &FindUserByIDUnauthorized{}
}

/* FindUserByIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindUserByIDUnauthorized struct {
}

func (o *FindUserByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{id}][%d] findUserByIdUnauthorized ", 401)
}

func (o *FindUserByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindUserByIDForbidden creates a FindUserByIDForbidden with default headers values
func NewFindUserByIDForbidden() *FindUserByIDForbidden {
	return &FindUserByIDForbidden{}
}

/* FindUserByIDForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindUserByIDForbidden struct {
}

func (o *FindUserByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{id}][%d] findUserByIdForbidden ", 403)
}

func (o *FindUserByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindUserByIDNotFound creates a FindUserByIDNotFound with default headers values
func NewFindUserByIDNotFound() *FindUserByIDNotFound {
	return &FindUserByIDNotFound{}
}

/* FindUserByIDNotFound describes a response with status code 404, with default header values.

not found
*/
type FindUserByIDNotFound struct {
}

func (o *FindUserByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{id}][%d] findUserByIdNotFound ", 404)
}

func (o *FindUserByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
