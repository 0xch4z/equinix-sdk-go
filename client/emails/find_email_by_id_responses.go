// Code generated by go-swagger; DO NOT EDIT.

package emails

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindEmailByIDReader is a Reader for the FindEmailByID structure.
type FindEmailByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindEmailByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindEmailByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindEmailByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindEmailByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindEmailByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindEmailByIDOK creates a FindEmailByIDOK with default headers values
func NewFindEmailByIDOK() *FindEmailByIDOK {
	return &FindEmailByIDOK{}
}

/*FindEmailByIDOK handles this case with default header values.

ok
*/
type FindEmailByIDOK struct {
	Payload *types.Email
}

func (o *FindEmailByIDOK) Error() string {
	return fmt.Sprintf("[GET /emails/{id}][%d] findEmailByIdOK  %+v", 200, o.Payload)
}

func (o *FindEmailByIDOK) GetPayload() *types.Email {
	return o.Payload
}

func (o *FindEmailByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Email)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindEmailByIDUnauthorized creates a FindEmailByIDUnauthorized with default headers values
func NewFindEmailByIDUnauthorized() *FindEmailByIDUnauthorized {
	return &FindEmailByIDUnauthorized{}
}

/*FindEmailByIDUnauthorized handles this case with default header values.

unauthorized
*/
type FindEmailByIDUnauthorized struct {
}

func (o *FindEmailByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /emails/{id}][%d] findEmailByIdUnauthorized ", 401)
}

func (o *FindEmailByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindEmailByIDForbidden creates a FindEmailByIDForbidden with default headers values
func NewFindEmailByIDForbidden() *FindEmailByIDForbidden {
	return &FindEmailByIDForbidden{}
}

/*FindEmailByIDForbidden handles this case with default header values.

forbidden
*/
type FindEmailByIDForbidden struct {
}

func (o *FindEmailByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /emails/{id}][%d] findEmailByIdForbidden ", 403)
}

func (o *FindEmailByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindEmailByIDNotFound creates a FindEmailByIDNotFound with default headers values
func NewFindEmailByIDNotFound() *FindEmailByIDNotFound {
	return &FindEmailByIDNotFound{}
}

/*FindEmailByIDNotFound handles this case with default header values.

not found
*/
type FindEmailByIDNotFound struct {
}

func (o *FindEmailByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /emails/{id}][%d] findEmailByIdNotFound ", 404)
}

func (o *FindEmailByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
