// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/models"
)

// NewUpdateInterconnectionParams creates a new UpdateInterconnectionParams object
// with the default values initialized.
func NewUpdateInterconnectionParams() *UpdateInterconnectionParams {
	var ()
	return &UpdateInterconnectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateInterconnectionParamsWithTimeout creates a new UpdateInterconnectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateInterconnectionParamsWithTimeout(timeout time.Duration) *UpdateInterconnectionParams {
	var ()
	return &UpdateInterconnectionParams{

		timeout: timeout,
	}
}

// NewUpdateInterconnectionParamsWithContext creates a new UpdateInterconnectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateInterconnectionParamsWithContext(ctx context.Context) *UpdateInterconnectionParams {
	var ()
	return &UpdateInterconnectionParams{

		Context: ctx,
	}
}

// NewUpdateInterconnectionParamsWithHTTPClient creates a new UpdateInterconnectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateInterconnectionParamsWithHTTPClient(client *http.Client) *UpdateInterconnectionParams {
	var ()
	return &UpdateInterconnectionParams{
		HTTPClient: client,
	}
}

/*UpdateInterconnectionParams contains all the parameters to send to the API endpoint
for the update interconnection operation typically these are written to a http.Request
*/
type UpdateInterconnectionParams struct {

	/*Connection
	  Updated connection details

	*/
	Connection *models.InterconnectionUpdateInput
	/*ID
	  Connection UUID

	*/
	ID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update interconnection params
func (o *UpdateInterconnectionParams) WithTimeout(timeout time.Duration) *UpdateInterconnectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update interconnection params
func (o *UpdateInterconnectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update interconnection params
func (o *UpdateInterconnectionParams) WithContext(ctx context.Context) *UpdateInterconnectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update interconnection params
func (o *UpdateInterconnectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update interconnection params
func (o *UpdateInterconnectionParams) WithHTTPClient(client *http.Client) *UpdateInterconnectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update interconnection params
func (o *UpdateInterconnectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnection adds the connection to the update interconnection params
func (o *UpdateInterconnectionParams) WithConnection(connection *models.InterconnectionUpdateInput) *UpdateInterconnectionParams {
	o.SetConnection(connection)
	return o
}

// SetConnection adds the connection to the update interconnection params
func (o *UpdateInterconnectionParams) SetConnection(connection *models.InterconnectionUpdateInput) {
	o.Connection = connection
}

// WithID adds the id to the update interconnection params
func (o *UpdateInterconnectionParams) WithID(id strfmt.UUID) *UpdateInterconnectionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update interconnection params
func (o *UpdateInterconnectionParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateInterconnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Connection != nil {
		if err := r.SetBodyParam(o.Connection); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
