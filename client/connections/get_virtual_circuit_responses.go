// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// GetVirtualCircuitReader is a Reader for the GetVirtualCircuit structure.
type GetVirtualCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVirtualCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVirtualCircuitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetVirtualCircuitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVirtualCircuitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVirtualCircuitOK creates a GetVirtualCircuitOK with default headers values
func NewGetVirtualCircuitOK() *GetVirtualCircuitOK {
	return &GetVirtualCircuitOK{}
}

/* GetVirtualCircuitOK describes a response with status code 200, with default header values.

ok
*/
type GetVirtualCircuitOK struct {
	Payload *types.VirtualCircuit
}

func (o *GetVirtualCircuitOK) Error() string {
	return fmt.Sprintf("[GET /virtual-circuits/{id}][%d] getVirtualCircuitOK  %+v", 200, o.Payload)
}
func (o *GetVirtualCircuitOK) GetPayload() *types.VirtualCircuit {
	return o.Payload
}

func (o *GetVirtualCircuitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.VirtualCircuit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVirtualCircuitForbidden creates a GetVirtualCircuitForbidden with default headers values
func NewGetVirtualCircuitForbidden() *GetVirtualCircuitForbidden {
	return &GetVirtualCircuitForbidden{}
}

/* GetVirtualCircuitForbidden describes a response with status code 403, with default header values.

forbidden
*/
type GetVirtualCircuitForbidden struct {
}

func (o *GetVirtualCircuitForbidden) Error() string {
	return fmt.Sprintf("[GET /virtual-circuits/{id}][%d] getVirtualCircuitForbidden ", 403)
}

func (o *GetVirtualCircuitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVirtualCircuitNotFound creates a GetVirtualCircuitNotFound with default headers values
func NewGetVirtualCircuitNotFound() *GetVirtualCircuitNotFound {
	return &GetVirtualCircuitNotFound{}
}

/* GetVirtualCircuitNotFound describes a response with status code 404, with default header values.

not found
*/
type GetVirtualCircuitNotFound struct {
}

func (o *GetVirtualCircuitNotFound) Error() string {
	return fmt.Sprintf("[GET /virtual-circuits/{id}][%d] getVirtualCircuitNotFound ", 404)
}

func (o *GetVirtualCircuitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
