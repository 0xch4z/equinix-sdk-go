// Code generated by go-swagger; DO NOT EDIT.

package connections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// DeleteVirtualCircuitReader is a Reader for the DeleteVirtualCircuit structure.
type DeleteVirtualCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVirtualCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewDeleteVirtualCircuitAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteVirtualCircuitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVirtualCircuitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteVirtualCircuitAccepted creates a DeleteVirtualCircuitAccepted with default headers values
func NewDeleteVirtualCircuitAccepted() *DeleteVirtualCircuitAccepted {
	return &DeleteVirtualCircuitAccepted{}
}

/*DeleteVirtualCircuitAccepted handles this case with default header values.

accepted
*/
type DeleteVirtualCircuitAccepted struct {
	Payload *types.VirtualCircuit
}

func (o *DeleteVirtualCircuitAccepted) Error() string {
	return fmt.Sprintf("[DELETE /virtual-circuits/{id}][%d] deleteVirtualCircuitAccepted  %+v", 202, o.Payload)
}

func (o *DeleteVirtualCircuitAccepted) GetPayload() *types.VirtualCircuit {
	return o.Payload
}

func (o *DeleteVirtualCircuitAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.VirtualCircuit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVirtualCircuitForbidden creates a DeleteVirtualCircuitForbidden with default headers values
func NewDeleteVirtualCircuitForbidden() *DeleteVirtualCircuitForbidden {
	return &DeleteVirtualCircuitForbidden{}
}

/*DeleteVirtualCircuitForbidden handles this case with default header values.

forbidden
*/
type DeleteVirtualCircuitForbidden struct {
}

func (o *DeleteVirtualCircuitForbidden) Error() string {
	return fmt.Sprintf("[DELETE /virtual-circuits/{id}][%d] deleteVirtualCircuitForbidden ", 403)
}

func (o *DeleteVirtualCircuitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVirtualCircuitNotFound creates a DeleteVirtualCircuitNotFound with default headers values
func NewDeleteVirtualCircuitNotFound() *DeleteVirtualCircuitNotFound {
	return &DeleteVirtualCircuitNotFound{}
}

/*DeleteVirtualCircuitNotFound handles this case with default header values.

not found
*/
type DeleteVirtualCircuitNotFound struct {
}

func (o *DeleteVirtualCircuitNotFound) Error() string {
	return fmt.Sprintf("[DELETE /virtual-circuits/{id}][%d] deleteVirtualCircuitNotFound ", 404)
}

func (o *DeleteVirtualCircuitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
