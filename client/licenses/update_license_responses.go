// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// UpdateLicenseReader is a Reader for the UpdateLicense structure.
type UpdateLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateLicenseUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateLicenseOK creates a UpdateLicenseOK with default headers values
func NewUpdateLicenseOK() *UpdateLicenseOK {
	return &UpdateLicenseOK{}
}

/* UpdateLicenseOK describes a response with status code 200, with default header values.

ok
*/
type UpdateLicenseOK struct {
	Payload *types.License
}

func (o *UpdateLicenseOK) Error() string {
	return fmt.Sprintf("[PUT /licenses/{id}][%d] updateLicenseOK  %+v", 200, o.Payload)
}
func (o *UpdateLicenseOK) GetPayload() *types.License {
	return o.Payload
}

func (o *UpdateLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLicenseUnauthorized creates a UpdateLicenseUnauthorized with default headers values
func NewUpdateLicenseUnauthorized() *UpdateLicenseUnauthorized {
	return &UpdateLicenseUnauthorized{}
}

/* UpdateLicenseUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type UpdateLicenseUnauthorized struct {
}

func (o *UpdateLicenseUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /licenses/{id}][%d] updateLicenseUnauthorized ", 401)
}

func (o *UpdateLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLicenseForbidden creates a UpdateLicenseForbidden with default headers values
func NewUpdateLicenseForbidden() *UpdateLicenseForbidden {
	return &UpdateLicenseForbidden{}
}

/* UpdateLicenseForbidden describes a response with status code 403, with default header values.

forbidden
*/
type UpdateLicenseForbidden struct {
}

func (o *UpdateLicenseForbidden) Error() string {
	return fmt.Sprintf("[PUT /licenses/{id}][%d] updateLicenseForbidden ", 403)
}

func (o *UpdateLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLicenseNotFound creates a UpdateLicenseNotFound with default headers values
func NewUpdateLicenseNotFound() *UpdateLicenseNotFound {
	return &UpdateLicenseNotFound{}
}

/* UpdateLicenseNotFound describes a response with status code 404, with default header values.

not found
*/
type UpdateLicenseNotFound struct {
}

func (o *UpdateLicenseNotFound) Error() string {
	return fmt.Sprintf("[PUT /licenses/{id}][%d] updateLicenseNotFound ", 404)
}

func (o *UpdateLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLicenseUnprocessableEntity creates a UpdateLicenseUnprocessableEntity with default headers values
func NewUpdateLicenseUnprocessableEntity() *UpdateLicenseUnprocessableEntity {
	return &UpdateLicenseUnprocessableEntity{}
}

/* UpdateLicenseUnprocessableEntity describes a response with status code 422, with default header values.

unprocessable entity
*/
type UpdateLicenseUnprocessableEntity struct {
}

func (o *UpdateLicenseUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /licenses/{id}][%d] updateLicenseUnprocessableEntity ", 422)
}

func (o *UpdateLicenseUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
