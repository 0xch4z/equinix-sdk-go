// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/models"
)

// FindLicenseByIDReader is a Reader for the FindLicenseByID structure.
type FindLicenseByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindLicenseByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindLicenseByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindLicenseByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindLicenseByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindLicenseByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindLicenseByIDOK creates a FindLicenseByIDOK with default headers values
func NewFindLicenseByIDOK() *FindLicenseByIDOK {
	return &FindLicenseByIDOK{}
}

/*FindLicenseByIDOK handles this case with default header values.

ok
*/
type FindLicenseByIDOK struct {
	Payload *models.License
}

func (o *FindLicenseByIDOK) Error() string {
	return fmt.Sprintf("[GET /licenses/{id}][%d] findLicenseByIdOK  %+v", 200, o.Payload)
}

func (o *FindLicenseByIDOK) GetPayload() *models.License {
	return o.Payload
}

func (o *FindLicenseByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindLicenseByIDUnauthorized creates a FindLicenseByIDUnauthorized with default headers values
func NewFindLicenseByIDUnauthorized() *FindLicenseByIDUnauthorized {
	return &FindLicenseByIDUnauthorized{}
}

/*FindLicenseByIDUnauthorized handles this case with default header values.

unauthorized
*/
type FindLicenseByIDUnauthorized struct {
}

func (o *FindLicenseByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /licenses/{id}][%d] findLicenseByIdUnauthorized ", 401)
}

func (o *FindLicenseByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindLicenseByIDForbidden creates a FindLicenseByIDForbidden with default headers values
func NewFindLicenseByIDForbidden() *FindLicenseByIDForbidden {
	return &FindLicenseByIDForbidden{}
}

/*FindLicenseByIDForbidden handles this case with default header values.

forbidden
*/
type FindLicenseByIDForbidden struct {
}

func (o *FindLicenseByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /licenses/{id}][%d] findLicenseByIdForbidden ", 403)
}

func (o *FindLicenseByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindLicenseByIDNotFound creates a FindLicenseByIDNotFound with default headers values
func NewFindLicenseByIDNotFound() *FindLicenseByIDNotFound {
	return &FindLicenseByIDNotFound{}
}

/*FindLicenseByIDNotFound handles this case with default header values.

not found
*/
type FindLicenseByIDNotFound struct {
}

func (o *FindLicenseByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /licenses/{id}][%d] findLicenseByIdNotFound ", 404)
}

func (o *FindLicenseByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
