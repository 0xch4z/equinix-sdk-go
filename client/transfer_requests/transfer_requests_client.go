// Code generated by go-swagger; DO NOT EDIT.

package transfer_requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transfer requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transfer requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptTransferRequest(params *AcceptTransferRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptTransferRequestNoContent, error)

	DeclineTransferRequest(params *DeclineTransferRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeclineTransferRequestNoContent, error)

	FindTransferRequestByID(params *FindTransferRequestByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindTransferRequestByIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptTransferRequest accepts a transfer request

  Accept a transfer request.
*/
func (a *Client) AcceptTransferRequest(params *AcceptTransferRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptTransferRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptTransferRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptTransferRequest",
		Method:             "PUT",
		PathPattern:        "/transfers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AcceptTransferRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptTransferRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptTransferRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeclineTransferRequest declines a transfer request

  Decline a transfer request.
*/
func (a *Client) DeclineTransferRequest(params *DeclineTransferRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeclineTransferRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeclineTransferRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "declineTransferRequest",
		Method:             "DELETE",
		PathPattern:        "/transfers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeclineTransferRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeclineTransferRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for declineTransferRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindTransferRequestByID views a transfer request

  Returns a single transfer request.
*/
func (a *Client) FindTransferRequestByID(params *FindTransferRequestByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindTransferRequestByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindTransferRequestByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findTransferRequestById",
		Method:             "GET",
		PathPattern:        "/transfers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindTransferRequestByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindTransferRequestByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findTransferRequestById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
