// Code generated by go-swagger; DO NOT EDIT.

package b_g_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateBgpSessionParams creates a new UpdateBgpSessionParams object
// with the default values initialized.
func NewUpdateBgpSessionParams() *UpdateBgpSessionParams {
	var ()
	return &UpdateBgpSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateBgpSessionParamsWithTimeout creates a new UpdateBgpSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateBgpSessionParamsWithTimeout(timeout time.Duration) *UpdateBgpSessionParams {
	var ()
	return &UpdateBgpSessionParams{

		timeout: timeout,
	}
}

// NewUpdateBgpSessionParamsWithContext creates a new UpdateBgpSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateBgpSessionParamsWithContext(ctx context.Context) *UpdateBgpSessionParams {
	var ()
	return &UpdateBgpSessionParams{

		Context: ctx,
	}
}

// NewUpdateBgpSessionParamsWithHTTPClient creates a new UpdateBgpSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateBgpSessionParamsWithHTTPClient(client *http.Client) *UpdateBgpSessionParams {
	var ()
	return &UpdateBgpSessionParams{
		HTTPClient: client,
	}
}

/*UpdateBgpSessionParams contains all the parameters to send to the API endpoint
for the update bgp session operation typically these are written to a http.Request
*/
type UpdateBgpSessionParams struct {

	/*DefaultRoute
	  Default route

	*/
	DefaultRoute bool
	/*ID
	  BGP session UUID

	*/
	ID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update bgp session params
func (o *UpdateBgpSessionParams) WithTimeout(timeout time.Duration) *UpdateBgpSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update bgp session params
func (o *UpdateBgpSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update bgp session params
func (o *UpdateBgpSessionParams) WithContext(ctx context.Context) *UpdateBgpSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update bgp session params
func (o *UpdateBgpSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update bgp session params
func (o *UpdateBgpSessionParams) WithHTTPClient(client *http.Client) *UpdateBgpSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update bgp session params
func (o *UpdateBgpSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDefaultRoute adds the defaultRoute to the update bgp session params
func (o *UpdateBgpSessionParams) WithDefaultRoute(defaultRoute bool) *UpdateBgpSessionParams {
	o.SetDefaultRoute(defaultRoute)
	return o
}

// SetDefaultRoute adds the defaultRoute to the update bgp session params
func (o *UpdateBgpSessionParams) SetDefaultRoute(defaultRoute bool) {
	o.DefaultRoute = defaultRoute
}

// WithID adds the id to the update bgp session params
func (o *UpdateBgpSessionParams) WithID(id strfmt.UUID) *UpdateBgpSessionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update bgp session params
func (o *UpdateBgpSessionParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateBgpSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.DefaultRoute); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
