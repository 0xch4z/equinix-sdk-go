// Code generated by go-swagger; DO NOT EDIT.

package ip_addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/models"
)

// FindIPAddressByIDReader is a Reader for the FindIPAddressByID structure.
type FindIPAddressByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindIPAddressByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindIPAddressByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindIPAddressByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindIPAddressByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindIPAddressByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindIPAddressByIDOK creates a FindIPAddressByIDOK with default headers values
func NewFindIPAddressByIDOK() *FindIPAddressByIDOK {
	return &FindIPAddressByIDOK{}
}

/*FindIPAddressByIDOK handles this case with default header values.

ok
*/
type FindIPAddressByIDOK struct {
	Payload *models.IPAssignment
}

func (o *FindIPAddressByIDOK) Error() string {
	return fmt.Sprintf("[GET /ips/{id}][%d] findIpAddressByIdOK  %+v", 200, o.Payload)
}

func (o *FindIPAddressByIDOK) GetPayload() *models.IPAssignment {
	return o.Payload
}

func (o *FindIPAddressByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPAssignment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindIPAddressByIDUnauthorized creates a FindIPAddressByIDUnauthorized with default headers values
func NewFindIPAddressByIDUnauthorized() *FindIPAddressByIDUnauthorized {
	return &FindIPAddressByIDUnauthorized{}
}

/*FindIPAddressByIDUnauthorized handles this case with default header values.

unauthorized
*/
type FindIPAddressByIDUnauthorized struct {
}

func (o *FindIPAddressByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ips/{id}][%d] findIpAddressByIdUnauthorized ", 401)
}

func (o *FindIPAddressByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindIPAddressByIDForbidden creates a FindIPAddressByIDForbidden with default headers values
func NewFindIPAddressByIDForbidden() *FindIPAddressByIDForbidden {
	return &FindIPAddressByIDForbidden{}
}

/*FindIPAddressByIDForbidden handles this case with default header values.

forbidden
*/
type FindIPAddressByIDForbidden struct {
}

func (o *FindIPAddressByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /ips/{id}][%d] findIpAddressByIdForbidden ", 403)
}

func (o *FindIPAddressByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindIPAddressByIDNotFound creates a FindIPAddressByIDNotFound with default headers values
func NewFindIPAddressByIDNotFound() *FindIPAddressByIDNotFound {
	return &FindIPAddressByIDNotFound{}
}

/*FindIPAddressByIDNotFound handles this case with default header values.

not found
*/
type FindIPAddressByIDNotFound struct {
}

func (o *FindIPAddressByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /ips/{id}][%d] findIpAddressByIdNotFound ", 404)
}

func (o *FindIPAddressByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
