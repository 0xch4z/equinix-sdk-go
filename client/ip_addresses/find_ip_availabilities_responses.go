// Code generated by go-swagger; DO NOT EDIT.

package ip_addresses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindIPAvailabilitiesReader is a Reader for the FindIPAvailabilities structure.
type FindIPAvailabilitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindIPAvailabilitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindIPAvailabilitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindIPAvailabilitiesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindIPAvailabilitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindIPAvailabilitiesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindIPAvailabilitiesOK creates a FindIPAvailabilitiesOK with default headers values
func NewFindIPAvailabilitiesOK() *FindIPAvailabilitiesOK {
	return &FindIPAvailabilitiesOK{}
}

/*FindIPAvailabilitiesOK handles this case with default header values.

ok
*/
type FindIPAvailabilitiesOK struct {
	Payload *types.IPAvailabilitiesList
}

func (o *FindIPAvailabilitiesOK) Error() string {
	return fmt.Sprintf("[GET /ips/{id}/available][%d] findIpAvailabilitiesOK  %+v", 200, o.Payload)
}

func (o *FindIPAvailabilitiesOK) GetPayload() *types.IPAvailabilitiesList {
	return o.Payload
}

func (o *FindIPAvailabilitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.IPAvailabilitiesList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindIPAvailabilitiesUnauthorized creates a FindIPAvailabilitiesUnauthorized with default headers values
func NewFindIPAvailabilitiesUnauthorized() *FindIPAvailabilitiesUnauthorized {
	return &FindIPAvailabilitiesUnauthorized{}
}

/*FindIPAvailabilitiesUnauthorized handles this case with default header values.

unauthorized
*/
type FindIPAvailabilitiesUnauthorized struct {
}

func (o *FindIPAvailabilitiesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ips/{id}/available][%d] findIpAvailabilitiesUnauthorized ", 401)
}

func (o *FindIPAvailabilitiesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindIPAvailabilitiesForbidden creates a FindIPAvailabilitiesForbidden with default headers values
func NewFindIPAvailabilitiesForbidden() *FindIPAvailabilitiesForbidden {
	return &FindIPAvailabilitiesForbidden{}
}

/*FindIPAvailabilitiesForbidden handles this case with default header values.

forbidden
*/
type FindIPAvailabilitiesForbidden struct {
}

func (o *FindIPAvailabilitiesForbidden) Error() string {
	return fmt.Sprintf("[GET /ips/{id}/available][%d] findIpAvailabilitiesForbidden ", 403)
}

func (o *FindIPAvailabilitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindIPAvailabilitiesNotFound creates a FindIPAvailabilitiesNotFound with default headers values
func NewFindIPAvailabilitiesNotFound() *FindIPAvailabilitiesNotFound {
	return &FindIPAvailabilitiesNotFound{}
}

/*FindIPAvailabilitiesNotFound handles this case with default header values.

not found
*/
type FindIPAvailabilitiesNotFound struct {
}

func (o *FindIPAvailabilitiesNotFound) Error() string {
	return fmt.Sprintf("[GET /ips/{id}/available][%d] findIpAvailabilitiesNotFound ", 404)
}

func (o *FindIPAvailabilitiesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
