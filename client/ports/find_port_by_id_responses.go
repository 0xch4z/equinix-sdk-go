// Code generated by go-swagger; DO NOT EDIT.

package ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindPortByIDReader is a Reader for the FindPortByID structure.
type FindPortByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindPortByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindPortByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindPortByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindPortByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindPortByIDOK creates a FindPortByIDOK with default headers values
func NewFindPortByIDOK() *FindPortByIDOK {
	return &FindPortByIDOK{}
}

/* FindPortByIDOK describes a response with status code 200, with default header values.

ok
*/
type FindPortByIDOK struct {
	Payload *types.Port
}

func (o *FindPortByIDOK) Error() string {
	return fmt.Sprintf("[GET /ports/{id}][%d] findPortByIdOK  %+v", 200, o.Payload)
}
func (o *FindPortByIDOK) GetPayload() *types.Port {
	return o.Payload
}

func (o *FindPortByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Port)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindPortByIDUnauthorized creates a FindPortByIDUnauthorized with default headers values
func NewFindPortByIDUnauthorized() *FindPortByIDUnauthorized {
	return &FindPortByIDUnauthorized{}
}

/* FindPortByIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindPortByIDUnauthorized struct {
}

func (o *FindPortByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /ports/{id}][%d] findPortByIdUnauthorized ", 401)
}

func (o *FindPortByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindPortByIDNotFound creates a FindPortByIDNotFound with default headers values
func NewFindPortByIDNotFound() *FindPortByIDNotFound {
	return &FindPortByIDNotFound{}
}

/* FindPortByIDNotFound describes a response with status code 404, with default header values.

not found
*/
type FindPortByIDNotFound struct {
}

func (o *FindPortByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /ports/{id}][%d] findPortByIdNotFound ", 404)
}

func (o *FindPortByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
