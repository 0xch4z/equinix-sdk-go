// Code generated by go-swagger; DO NOT EDIT.

package ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// NewConvertLayer3Params creates a new ConvertLayer3Params object
// with the default values initialized.
func NewConvertLayer3Params() *ConvertLayer3Params {
	var ()
	return &ConvertLayer3Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewConvertLayer3ParamsWithTimeout creates a new ConvertLayer3Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewConvertLayer3ParamsWithTimeout(timeout time.Duration) *ConvertLayer3Params {
	var ()
	return &ConvertLayer3Params{

		timeout: timeout,
	}
}

// NewConvertLayer3ParamsWithContext creates a new ConvertLayer3Params object
// with the default values initialized, and the ability to set a context for a request
func NewConvertLayer3ParamsWithContext(ctx context.Context) *ConvertLayer3Params {
	var ()
	return &ConvertLayer3Params{

		Context: ctx,
	}
}

// NewConvertLayer3ParamsWithHTTPClient creates a new ConvertLayer3Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConvertLayer3ParamsWithHTTPClient(client *http.Client) *ConvertLayer3Params {
	var ()
	return &ConvertLayer3Params{
		HTTPClient: client,
	}
}

/*ConvertLayer3Params contains all the parameters to send to the API endpoint
for the convert layer3 operation typically these are written to a http.Request
*/
type ConvertLayer3Params struct {

	/*ID
	  Port UUID

	*/
	ID strfmt.UUID
	/*RequestIps
	  IPs to request

	*/
	RequestIps *types.PortConvertLayer3Input

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the convert layer3 params
func (o *ConvertLayer3Params) WithTimeout(timeout time.Duration) *ConvertLayer3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the convert layer3 params
func (o *ConvertLayer3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the convert layer3 params
func (o *ConvertLayer3Params) WithContext(ctx context.Context) *ConvertLayer3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the convert layer3 params
func (o *ConvertLayer3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the convert layer3 params
func (o *ConvertLayer3Params) WithHTTPClient(client *http.Client) *ConvertLayer3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the convert layer3 params
func (o *ConvertLayer3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the convert layer3 params
func (o *ConvertLayer3Params) WithID(id strfmt.UUID) *ConvertLayer3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the convert layer3 params
func (o *ConvertLayer3Params) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithRequestIps adds the requestIps to the convert layer3 params
func (o *ConvertLayer3Params) WithRequestIps(requestIps *types.PortConvertLayer3Input) *ConvertLayer3Params {
	o.SetRequestIps(requestIps)
	return o
}

// SetRequestIps adds the requestIps to the convert layer3 params
func (o *ConvertLayer3Params) SetRequestIps(requestIps *types.PortConvertLayer3Input) {
	o.RequestIps = requestIps
}

// WriteToRequest writes these params to a swagger request
func (o *ConvertLayer3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.RequestIps != nil {
		if err := r.SetBodyParam(o.RequestIps); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
