// Code generated by go-swagger; DO NOT EDIT.

package ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/models"
)

// AssignPortReader is a Reader for the AssignPort structure.
type AssignPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAssignPortUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssignPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAssignPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAssignPortUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssignPortOK creates a AssignPortOK with default headers values
func NewAssignPortOK() *AssignPortOK {
	return &AssignPortOK{}
}

/*AssignPortOK handles this case with default header values.

ok
*/
type AssignPortOK struct {
	Payload *models.Port
}

func (o *AssignPortOK) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/assign][%d] assignPortOK  %+v", 200, o.Payload)
}

func (o *AssignPortOK) GetPayload() *models.Port {
	return o.Payload
}

func (o *AssignPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Port)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignPortUnauthorized creates a AssignPortUnauthorized with default headers values
func NewAssignPortUnauthorized() *AssignPortUnauthorized {
	return &AssignPortUnauthorized{}
}

/*AssignPortUnauthorized handles this case with default header values.

unauthorized
*/
type AssignPortUnauthorized struct {
}

func (o *AssignPortUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/assign][%d] assignPortUnauthorized ", 401)
}

func (o *AssignPortUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignPortForbidden creates a AssignPortForbidden with default headers values
func NewAssignPortForbidden() *AssignPortForbidden {
	return &AssignPortForbidden{}
}

/*AssignPortForbidden handles this case with default header values.

forbidden
*/
type AssignPortForbidden struct {
}

func (o *AssignPortForbidden) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/assign][%d] assignPortForbidden ", 403)
}

func (o *AssignPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignPortNotFound creates a AssignPortNotFound with default headers values
func NewAssignPortNotFound() *AssignPortNotFound {
	return &AssignPortNotFound{}
}

/*AssignPortNotFound handles this case with default header values.

not found
*/
type AssignPortNotFound struct {
}

func (o *AssignPortNotFound) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/assign][%d] assignPortNotFound ", 404)
}

func (o *AssignPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignPortUnprocessableEntity creates a AssignPortUnprocessableEntity with default headers values
func NewAssignPortUnprocessableEntity() *AssignPortUnprocessableEntity {
	return &AssignPortUnprocessableEntity{}
}

/*AssignPortUnprocessableEntity handles this case with default header values.

unprocessable entity
*/
type AssignPortUnprocessableEntity struct {
}

func (o *AssignPortUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/assign][%d] assignPortUnprocessableEntity ", 422)
}

func (o *AssignPortUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
