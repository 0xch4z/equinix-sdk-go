// Code generated by go-swagger; DO NOT EDIT.

package ports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// BondPortReader is a Reader for the BondPort structure.
type BondPortReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BondPortReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBondPortOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewBondPortUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBondPortForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBondPortNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewBondPortUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBondPortOK creates a BondPortOK with default headers values
func NewBondPortOK() *BondPortOK {
	return &BondPortOK{}
}

/*BondPortOK handles this case with default header values.

ok
*/
type BondPortOK struct {
	Payload *types.Port
}

func (o *BondPortOK) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/bond][%d] bondPortOK  %+v", 200, o.Payload)
}

func (o *BondPortOK) GetPayload() *types.Port {
	return o.Payload
}

func (o *BondPortOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Port)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBondPortUnauthorized creates a BondPortUnauthorized with default headers values
func NewBondPortUnauthorized() *BondPortUnauthorized {
	return &BondPortUnauthorized{}
}

/*BondPortUnauthorized handles this case with default header values.

unauthorized
*/
type BondPortUnauthorized struct {
}

func (o *BondPortUnauthorized) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/bond][%d] bondPortUnauthorized ", 401)
}

func (o *BondPortUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBondPortForbidden creates a BondPortForbidden with default headers values
func NewBondPortForbidden() *BondPortForbidden {
	return &BondPortForbidden{}
}

/*BondPortForbidden handles this case with default header values.

forbidden
*/
type BondPortForbidden struct {
}

func (o *BondPortForbidden) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/bond][%d] bondPortForbidden ", 403)
}

func (o *BondPortForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBondPortNotFound creates a BondPortNotFound with default headers values
func NewBondPortNotFound() *BondPortNotFound {
	return &BondPortNotFound{}
}

/*BondPortNotFound handles this case with default header values.

not found
*/
type BondPortNotFound struct {
}

func (o *BondPortNotFound) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/bond][%d] bondPortNotFound ", 404)
}

func (o *BondPortNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBondPortUnprocessableEntity creates a BondPortUnprocessableEntity with default headers values
func NewBondPortUnprocessableEntity() *BondPortUnprocessableEntity {
	return &BondPortUnprocessableEntity{}
}

/*BondPortUnprocessableEntity handles this case with default header values.

unprocessable entity
*/
type BondPortUnprocessableEntity struct {
}

func (o *BondPortUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /ports/{id}/bond][%d] bondPortUnprocessableEntity ", 422)
}

func (o *BondPortUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
