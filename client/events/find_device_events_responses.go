// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindDeviceEventsReader is a Reader for the FindDeviceEvents structure.
type FindDeviceEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindDeviceEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindDeviceEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindDeviceEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindDeviceEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindDeviceEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindDeviceEventsOK creates a FindDeviceEventsOK with default headers values
func NewFindDeviceEventsOK() *FindDeviceEventsOK {
	return &FindDeviceEventsOK{}
}

/* FindDeviceEventsOK describes a response with status code 200, with default header values.

ok
*/
type FindDeviceEventsOK struct {
	Payload *types.EventList
}

func (o *FindDeviceEventsOK) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/events][%d] findDeviceEventsOK  %+v", 200, o.Payload)
}
func (o *FindDeviceEventsOK) GetPayload() *types.EventList {
	return o.Payload
}

func (o *FindDeviceEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.EventList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindDeviceEventsUnauthorized creates a FindDeviceEventsUnauthorized with default headers values
func NewFindDeviceEventsUnauthorized() *FindDeviceEventsUnauthorized {
	return &FindDeviceEventsUnauthorized{}
}

/* FindDeviceEventsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindDeviceEventsUnauthorized struct {
}

func (o *FindDeviceEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/events][%d] findDeviceEventsUnauthorized ", 401)
}

func (o *FindDeviceEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDeviceEventsForbidden creates a FindDeviceEventsForbidden with default headers values
func NewFindDeviceEventsForbidden() *FindDeviceEventsForbidden {
	return &FindDeviceEventsForbidden{}
}

/* FindDeviceEventsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindDeviceEventsForbidden struct {
}

func (o *FindDeviceEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/events][%d] findDeviceEventsForbidden ", 403)
}

func (o *FindDeviceEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDeviceEventsNotFound creates a FindDeviceEventsNotFound with default headers values
func NewFindDeviceEventsNotFound() *FindDeviceEventsNotFound {
	return &FindDeviceEventsNotFound{}
}

/* FindDeviceEventsNotFound describes a response with status code 404, with default header values.

not found
*/
type FindDeviceEventsNotFound struct {
}

func (o *FindDeviceEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /devices/{id}/events][%d] findDeviceEventsNotFound ", 404)
}

func (o *FindDeviceEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
