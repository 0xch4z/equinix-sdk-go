// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindVolumeEventsReader is a Reader for the FindVolumeEvents structure.
type FindVolumeEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindVolumeEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindVolumeEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindVolumeEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindVolumeEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindVolumeEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindVolumeEventsOK creates a FindVolumeEventsOK with default headers values
func NewFindVolumeEventsOK() *FindVolumeEventsOK {
	return &FindVolumeEventsOK{}
}

/* FindVolumeEventsOK describes a response with status code 200, with default header values.

ok
*/
type FindVolumeEventsOK struct {
	Payload *types.EventList
}

func (o *FindVolumeEventsOK) Error() string {
	return fmt.Sprintf("[GET /volumes/{id}/events][%d] findVolumeEventsOK  %+v", 200, o.Payload)
}
func (o *FindVolumeEventsOK) GetPayload() *types.EventList {
	return o.Payload
}

func (o *FindVolumeEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.EventList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindVolumeEventsUnauthorized creates a FindVolumeEventsUnauthorized with default headers values
func NewFindVolumeEventsUnauthorized() *FindVolumeEventsUnauthorized {
	return &FindVolumeEventsUnauthorized{}
}

/* FindVolumeEventsUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindVolumeEventsUnauthorized struct {
}

func (o *FindVolumeEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /volumes/{id}/events][%d] findVolumeEventsUnauthorized ", 401)
}

func (o *FindVolumeEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindVolumeEventsForbidden creates a FindVolumeEventsForbidden with default headers values
func NewFindVolumeEventsForbidden() *FindVolumeEventsForbidden {
	return &FindVolumeEventsForbidden{}
}

/* FindVolumeEventsForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindVolumeEventsForbidden struct {
}

func (o *FindVolumeEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /volumes/{id}/events][%d] findVolumeEventsForbidden ", 403)
}

func (o *FindVolumeEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindVolumeEventsNotFound creates a FindVolumeEventsNotFound with default headers values
func NewFindVolumeEventsNotFound() *FindVolumeEventsNotFound {
	return &FindVolumeEventsNotFound{}
}

/* FindVolumeEventsNotFound describes a response with status code 404, with default header values.

not found
*/
type FindVolumeEventsNotFound struct {
}

func (o *FindVolumeEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /volumes/{id}/events][%d] findVolumeEventsNotFound ", 404)
}

func (o *FindVolumeEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
