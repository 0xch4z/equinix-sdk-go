// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindEventByIDReader is a Reader for the FindEventByID structure.
type FindEventByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindEventByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindEventByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindEventByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindEventByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindEventByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindEventByIDOK creates a FindEventByIDOK with default headers values
func NewFindEventByIDOK() *FindEventByIDOK {
	return &FindEventByIDOK{}
}

/* FindEventByIDOK describes a response with status code 200, with default header values.

ok
*/
type FindEventByIDOK struct {
	Payload *types.Event
}

func (o *FindEventByIDOK) Error() string {
	return fmt.Sprintf("[GET /events/{id}][%d] findEventByIdOK  %+v", 200, o.Payload)
}
func (o *FindEventByIDOK) GetPayload() *types.Event {
	return o.Payload
}

func (o *FindEventByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Event)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindEventByIDUnauthorized creates a FindEventByIDUnauthorized with default headers values
func NewFindEventByIDUnauthorized() *FindEventByIDUnauthorized {
	return &FindEventByIDUnauthorized{}
}

/* FindEventByIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindEventByIDUnauthorized struct {
}

func (o *FindEventByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /events/{id}][%d] findEventByIdUnauthorized ", 401)
}

func (o *FindEventByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindEventByIDForbidden creates a FindEventByIDForbidden with default headers values
func NewFindEventByIDForbidden() *FindEventByIDForbidden {
	return &FindEventByIDForbidden{}
}

/* FindEventByIDForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindEventByIDForbidden struct {
}

func (o *FindEventByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /events/{id}][%d] findEventByIdForbidden ", 403)
}

func (o *FindEventByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindEventByIDNotFound creates a FindEventByIDNotFound with default headers values
func NewFindEventByIDNotFound() *FindEventByIDNotFound {
	return &FindEventByIDNotFound{}
}

/* FindEventByIDNotFound describes a response with status code 404, with default header values.

not found
*/
type FindEventByIDNotFound struct {
}

func (o *FindEventByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /events/{id}][%d] findEventByIdNotFound ", 404)
}

func (o *FindEventByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
