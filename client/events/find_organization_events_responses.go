// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindOrganizationEventsReader is a Reader for the FindOrganizationEvents structure.
type FindOrganizationEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindOrganizationEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindOrganizationEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindOrganizationEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindOrganizationEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindOrganizationEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindOrganizationEventsOK creates a FindOrganizationEventsOK with default headers values
func NewFindOrganizationEventsOK() *FindOrganizationEventsOK {
	return &FindOrganizationEventsOK{}
}

/*FindOrganizationEventsOK handles this case with default header values.

ok
*/
type FindOrganizationEventsOK struct {
	Payload *types.EventList
}

func (o *FindOrganizationEventsOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/events][%d] findOrganizationEventsOK  %+v", 200, o.Payload)
}

func (o *FindOrganizationEventsOK) GetPayload() *types.EventList {
	return o.Payload
}

func (o *FindOrganizationEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.EventList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindOrganizationEventsUnauthorized creates a FindOrganizationEventsUnauthorized with default headers values
func NewFindOrganizationEventsUnauthorized() *FindOrganizationEventsUnauthorized {
	return &FindOrganizationEventsUnauthorized{}
}

/*FindOrganizationEventsUnauthorized handles this case with default header values.

unauthorized
*/
type FindOrganizationEventsUnauthorized struct {
}

func (o *FindOrganizationEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/events][%d] findOrganizationEventsUnauthorized ", 401)
}

func (o *FindOrganizationEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindOrganizationEventsForbidden creates a FindOrganizationEventsForbidden with default headers values
func NewFindOrganizationEventsForbidden() *FindOrganizationEventsForbidden {
	return &FindOrganizationEventsForbidden{}
}

/*FindOrganizationEventsForbidden handles this case with default header values.

forbidden
*/
type FindOrganizationEventsForbidden struct {
}

func (o *FindOrganizationEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/events][%d] findOrganizationEventsForbidden ", 403)
}

func (o *FindOrganizationEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindOrganizationEventsNotFound creates a FindOrganizationEventsNotFound with default headers values
func NewFindOrganizationEventsNotFound() *FindOrganizationEventsNotFound {
	return &FindOrganizationEventsNotFound{}
}

/*FindOrganizationEventsNotFound handles this case with default header values.

not found
*/
type FindOrganizationEventsNotFound struct {
}

func (o *FindOrganizationEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{id}/events][%d] findOrganizationEventsNotFound ", 404)
}

func (o *FindOrganizationEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
