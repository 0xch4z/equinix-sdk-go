// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/models"
)

// FindVirtualCircuitEventsReader is a Reader for the FindVirtualCircuitEvents structure.
type FindVirtualCircuitEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindVirtualCircuitEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindVirtualCircuitEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindVirtualCircuitEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindVirtualCircuitEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindVirtualCircuitEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindVirtualCircuitEventsOK creates a FindVirtualCircuitEventsOK with default headers values
func NewFindVirtualCircuitEventsOK() *FindVirtualCircuitEventsOK {
	return &FindVirtualCircuitEventsOK{}
}

/*FindVirtualCircuitEventsOK handles this case with default header values.

ok
*/
type FindVirtualCircuitEventsOK struct {
	Payload *models.Event
}

func (o *FindVirtualCircuitEventsOK) Error() string {
	return fmt.Sprintf("[GET /virtual-circuit/{id}/events][%d] findVirtualCircuitEventsOK  %+v", 200, o.Payload)
}

func (o *FindVirtualCircuitEventsOK) GetPayload() *models.Event {
	return o.Payload
}

func (o *FindVirtualCircuitEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Event)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindVirtualCircuitEventsUnauthorized creates a FindVirtualCircuitEventsUnauthorized with default headers values
func NewFindVirtualCircuitEventsUnauthorized() *FindVirtualCircuitEventsUnauthorized {
	return &FindVirtualCircuitEventsUnauthorized{}
}

/*FindVirtualCircuitEventsUnauthorized handles this case with default header values.

unauthorized
*/
type FindVirtualCircuitEventsUnauthorized struct {
}

func (o *FindVirtualCircuitEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /virtual-circuit/{id}/events][%d] findVirtualCircuitEventsUnauthorized ", 401)
}

func (o *FindVirtualCircuitEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindVirtualCircuitEventsForbidden creates a FindVirtualCircuitEventsForbidden with default headers values
func NewFindVirtualCircuitEventsForbidden() *FindVirtualCircuitEventsForbidden {
	return &FindVirtualCircuitEventsForbidden{}
}

/*FindVirtualCircuitEventsForbidden handles this case with default header values.

forbidden
*/
type FindVirtualCircuitEventsForbidden struct {
}

func (o *FindVirtualCircuitEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /virtual-circuit/{id}/events][%d] findVirtualCircuitEventsForbidden ", 403)
}

func (o *FindVirtualCircuitEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindVirtualCircuitEventsNotFound creates a FindVirtualCircuitEventsNotFound with default headers values
func NewFindVirtualCircuitEventsNotFound() *FindVirtualCircuitEventsNotFound {
	return &FindVirtualCircuitEventsNotFound{}
}

/*FindVirtualCircuitEventsNotFound handles this case with default header values.

not found
*/
type FindVirtualCircuitEventsNotFound struct {
}

func (o *FindVirtualCircuitEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /virtual-circuit/{id}/events][%d] findVirtualCircuitEventsNotFound ", 404)
}

func (o *FindVirtualCircuitEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
