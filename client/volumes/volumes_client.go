// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volumes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volumes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloneVolume(params *CloneVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneVolumeCreated, error)

	CreateVolume(params *CreateVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeCreated, error)

	CreateVolumeAttachment(params *CreateVolumeAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeAttachmentCreated, error)

	CreateVolumeSnapshotPolicy(params *CreateVolumeSnapshotPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeSnapshotPolicyCreated, error)

	DeleteVolume(params *DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeNoContent, error)

	DeleteVolumeAttachment(params *DeleteVolumeAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeAttachmentNoContent, error)

	DeleteVolumeSnapshot(params *DeleteVolumeSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeSnapshotNoContent, error)

	DeleteVolumeSnapshotPolicy(params *DeleteVolumeSnapshotPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeSnapshotPolicyNoContent, error)

	FindVolumeAttachmentByID(params *FindVolumeAttachmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeAttachmentByIDOK, error)

	FindVolumeAttachments(params *FindVolumeAttachmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeAttachmentsOK, error)

	FindVolumeByID(params *FindVolumeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeByIDOK, error)

	FindVolumeCustomdata(params *FindVolumeCustomdataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeCustomdataOK, error)

	FindVolumeSnapshots(params *FindVolumeSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeSnapshotsOK, error)

	FindVolumes(params *FindVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumesOK, error)

	RestoreVolume(params *RestoreVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreVolumeOK, error)

	UpdateVolume(params *UpdateVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVolumeOK, error)

	UpdateVolumeSnapshotPolicy(params *UpdateVolumeSnapshotPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVolumeSnapshotPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CloneVolume clones volume snapshot

  Clone your volume or snapshot into a new volume. To clone the volume, send an empty body. To promote a volume snapshot into a new volume, include the snapshot_timestamp attribute in the request body.
*/
func (a *Client) CloneVolume(params *CloneVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneVolumeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneVolume",
		Method:             "POST",
		PathPattern:        "/storage/{id}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneVolumeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVolume creates a volume

  Creates a new volume in our datacenter. The valid attribute values for `plan` and `facility` are:

         "facility": "ams1", "ewr1", "nrt1", "sjc1"
         "plan": "storage_1" (Standard), "storage_2" (Performance)
*/
func (a *Client) CreateVolume(params *CreateVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVolume",
		Method:             "POST",
		PathPattern:        "/projects/{id}/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVolumeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVolumeAttachment attaches your volume

  Attach your volume to a device.
*/
func (a *Client) CreateVolumeAttachment(params *CreateVolumeAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeAttachmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeAttachmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVolumeAttachment",
		Method:             "POST",
		PathPattern:        "/storage/{id}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVolumeAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVolumeAttachmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVolumeSnapshotPolicy creates a volume snapshot policy

  Creates a new snapshot policy of your volume.
*/
func (a *Client) CreateVolumeSnapshotPolicy(params *CreateVolumeSnapshotPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVolumeSnapshotPolicyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeSnapshotPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVolumeSnapshotPolicy",
		Method:             "POST",
		PathPattern:        "/storage/{id}/snapshot-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVolumeSnapshotPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVolumeSnapshotPolicyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVolumeSnapshotPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVolume deletes the volume

  Deletes the volume.
*/
func (a *Client) DeleteVolume(params *DeleteVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVolume",
		Method:             "DELETE",
		PathPattern:        "/storage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVolumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVolumeAttachment detaches volume

  Detach volume.
*/
func (a *Client) DeleteVolumeAttachment(params *DeleteVolumeAttachmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeAttachmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeAttachmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVolumeAttachment",
		Method:             "DELETE",
		PathPattern:        "/storage/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeAttachmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVolumeAttachmentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVolumeAttachment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVolumeSnapshot deletes volume snapshot

  Delete volume snapshot.
*/
func (a *Client) DeleteVolumeSnapshot(params *DeleteVolumeSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeSnapshotNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVolumeSnapshot",
		Method:             "DELETE",
		PathPattern:        "/storage/{volume_id}/snapshots/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVolumeSnapshotNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVolumeSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVolumeSnapshotPolicy deletes the volume snapshot policy

  Deletes the volume snapshot policy.
*/
func (a *Client) DeleteVolumeSnapshotPolicy(params *DeleteVolumeSnapshotPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVolumeSnapshotPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeSnapshotPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVolumeSnapshotPolicy",
		Method:             "DELETE",
		PathPattern:        "/storage/snapshot-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVolumeSnapshotPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVolumeSnapshotPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVolumeSnapshotPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumeAttachmentByID retrieves an attachment

  Returns a single attachment if the user has access
*/
func (a *Client) FindVolumeAttachmentByID(params *FindVolumeAttachmentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeAttachmentByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumeAttachmentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVolumeAttachmentById",
		Method:             "GET",
		PathPattern:        "/storage/attachments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumeAttachmentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumeAttachmentByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumeAttachmentById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumeAttachments retrieves all volume attachment

  Returns a list of the current volume’s attachments.
*/
func (a *Client) FindVolumeAttachments(params *FindVolumeAttachmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeAttachmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumeAttachmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVolumeAttachments",
		Method:             "GET",
		PathPattern:        "/storage/{id}/attachments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumeAttachmentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumeAttachmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumeAttachments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumeByID retrieves a volume

  Returns a single volume if the user has access
*/
func (a *Client) FindVolumeByID(params *FindVolumeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVolumeById",
		Method:             "GET",
		PathPattern:        "/storage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumeById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumeCustomdata retrieves the custom metadata of a storage volume

  Provides the custom metadata stored for this storage volume in json format
*/
func (a *Client) FindVolumeCustomdata(params *FindVolumeCustomdataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeCustomdataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumeCustomdataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVolumeCustomdata",
		Method:             "GET",
		PathPattern:        "/storage/{id}/customdata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumeCustomdataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumeCustomdataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumeCustomdata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumeSnapshots retrieves all volume snapshot

  Returns a list of the current volume’s snapshots. To create Volume Snapshots, please check the Volume Snapshot Policies feature.
*/
func (a *Client) FindVolumeSnapshots(params *FindVolumeSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumeSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumeSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVolumeSnapshots",
		Method:             "GET",
		PathPattern:        "/storage/{id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumeSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumeSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumeSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  FindVolumes retrieves all volumes

  Returns a list of the current projects’s volumes.
*/
func (a *Client) FindVolumes(params *FindVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FindVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindVolumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findVolumes",
		Method:             "GET",
		PathPattern:        "/projects/{id}/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FindVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestoreVolume restores volume

  Restore the volume to the given snapshot.
*/
func (a *Client) RestoreVolume(params *RestoreVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestoreVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restoreVolume",
		Method:             "POST",
		PathPattern:        "/storage/{id}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restoreVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVolume updates the volume

  Updates the volume.
*/
func (a *Client) UpdateVolume(params *UpdateVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVolume",
		Method:             "PUT",
		PathPattern:        "/storage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVolumeSnapshotPolicy updates the volume snapshot policy

  Updates the volume snapshot policy.
*/
func (a *Client) UpdateVolumeSnapshotPolicy(params *UpdateVolumeSnapshotPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVolumeSnapshotPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVolumeSnapshotPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateVolumeSnapshotPolicy",
		Method:             "PUT",
		PathPattern:        "/storage/snapshot-policies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateVolumeSnapshotPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVolumeSnapshotPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateVolumeSnapshotPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
