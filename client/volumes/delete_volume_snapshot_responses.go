// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeleteVolumeSnapshotReader is a Reader for the DeleteVolumeSnapshot structure.
type DeleteVolumeSnapshotReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVolumeSnapshotReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteVolumeSnapshotNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteVolumeSnapshotUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVolumeSnapshotForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVolumeSnapshotNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteVolumeSnapshotNoContent creates a DeleteVolumeSnapshotNoContent with default headers values
func NewDeleteVolumeSnapshotNoContent() *DeleteVolumeSnapshotNoContent {
	return &DeleteVolumeSnapshotNoContent{}
}

/*DeleteVolumeSnapshotNoContent handles this case with default header values.

no content
*/
type DeleteVolumeSnapshotNoContent struct {
}

func (o *DeleteVolumeSnapshotNoContent) Error() string {
	return fmt.Sprintf("[DELETE /storage/{volume_id}/snapshots/{id}][%d] deleteVolumeSnapshotNoContent ", 204)
}

func (o *DeleteVolumeSnapshotNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVolumeSnapshotUnauthorized creates a DeleteVolumeSnapshotUnauthorized with default headers values
func NewDeleteVolumeSnapshotUnauthorized() *DeleteVolumeSnapshotUnauthorized {
	return &DeleteVolumeSnapshotUnauthorized{}
}

/*DeleteVolumeSnapshotUnauthorized handles this case with default header values.

unauthorized
*/
type DeleteVolumeSnapshotUnauthorized struct {
}

func (o *DeleteVolumeSnapshotUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /storage/{volume_id}/snapshots/{id}][%d] deleteVolumeSnapshotUnauthorized ", 401)
}

func (o *DeleteVolumeSnapshotUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVolumeSnapshotForbidden creates a DeleteVolumeSnapshotForbidden with default headers values
func NewDeleteVolumeSnapshotForbidden() *DeleteVolumeSnapshotForbidden {
	return &DeleteVolumeSnapshotForbidden{}
}

/*DeleteVolumeSnapshotForbidden handles this case with default header values.

forbidden
*/
type DeleteVolumeSnapshotForbidden struct {
}

func (o *DeleteVolumeSnapshotForbidden) Error() string {
	return fmt.Sprintf("[DELETE /storage/{volume_id}/snapshots/{id}][%d] deleteVolumeSnapshotForbidden ", 403)
}

func (o *DeleteVolumeSnapshotForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVolumeSnapshotNotFound creates a DeleteVolumeSnapshotNotFound with default headers values
func NewDeleteVolumeSnapshotNotFound() *DeleteVolumeSnapshotNotFound {
	return &DeleteVolumeSnapshotNotFound{}
}

/*DeleteVolumeSnapshotNotFound handles this case with default header values.

not found
*/
type DeleteVolumeSnapshotNotFound struct {
}

func (o *DeleteVolumeSnapshotNotFound) Error() string {
	return fmt.Sprintf("[DELETE /storage/{volume_id}/snapshots/{id}][%d] deleteVolumeSnapshotNotFound ", 404)
}

func (o *DeleteVolumeSnapshotNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
