// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCloneVolumeParams creates a new CloneVolumeParams object
// with the default values initialized.
func NewCloneVolumeParams() *CloneVolumeParams {
	var ()
	return &CloneVolumeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCloneVolumeParamsWithTimeout creates a new CloneVolumeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCloneVolumeParamsWithTimeout(timeout time.Duration) *CloneVolumeParams {
	var ()
	return &CloneVolumeParams{

		timeout: timeout,
	}
}

// NewCloneVolumeParamsWithContext creates a new CloneVolumeParams object
// with the default values initialized, and the ability to set a context for a request
func NewCloneVolumeParamsWithContext(ctx context.Context) *CloneVolumeParams {
	var ()
	return &CloneVolumeParams{

		Context: ctx,
	}
}

// NewCloneVolumeParamsWithHTTPClient creates a new CloneVolumeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCloneVolumeParamsWithHTTPClient(client *http.Client) *CloneVolumeParams {
	var ()
	return &CloneVolumeParams{
		HTTPClient: client,
	}
}

/*CloneVolumeParams contains all the parameters to send to the API endpoint
for the clone volume operation typically these are written to a http.Request
*/
type CloneVolumeParams struct {

	/*ID
	  Volume UUID

	*/
	ID strfmt.UUID
	/*SnapshotTimestamp
	  snapshot timestamp

	*/
	SnapshotTimestamp *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the clone volume params
func (o *CloneVolumeParams) WithTimeout(timeout time.Duration) *CloneVolumeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the clone volume params
func (o *CloneVolumeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the clone volume params
func (o *CloneVolumeParams) WithContext(ctx context.Context) *CloneVolumeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the clone volume params
func (o *CloneVolumeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the clone volume params
func (o *CloneVolumeParams) WithHTTPClient(client *http.Client) *CloneVolumeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the clone volume params
func (o *CloneVolumeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the clone volume params
func (o *CloneVolumeParams) WithID(id strfmt.UUID) *CloneVolumeParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the clone volume params
func (o *CloneVolumeParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithSnapshotTimestamp adds the snapshotTimestamp to the clone volume params
func (o *CloneVolumeParams) WithSnapshotTimestamp(snapshotTimestamp *string) *CloneVolumeParams {
	o.SetSnapshotTimestamp(snapshotTimestamp)
	return o
}

// SetSnapshotTimestamp adds the snapshotTimestamp to the clone volume params
func (o *CloneVolumeParams) SetSnapshotTimestamp(snapshotTimestamp *string) {
	o.SnapshotTimestamp = snapshotTimestamp
}

// WriteToRequest writes these params to a swagger request
func (o *CloneVolumeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.SnapshotTimestamp != nil {

		// query param snapshot_timestamp
		var qrSnapshotTimestamp string
		if o.SnapshotTimestamp != nil {
			qrSnapshotTimestamp = *o.SnapshotTimestamp
		}
		qSnapshotTimestamp := qrSnapshotTimestamp
		if qSnapshotTimestamp != "" {
			if err := r.SetQueryParam("snapshot_timestamp", qSnapshotTimestamp); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
