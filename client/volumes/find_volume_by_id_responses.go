// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/t0mk/gometal/types"
)

// FindVolumeByIDReader is a Reader for the FindVolumeByID structure.
type FindVolumeByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindVolumeByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindVolumeByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewFindVolumeByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindVolumeByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindVolumeByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindVolumeByIDOK creates a FindVolumeByIDOK with default headers values
func NewFindVolumeByIDOK() *FindVolumeByIDOK {
	return &FindVolumeByIDOK{}
}

/* FindVolumeByIDOK describes a response with status code 200, with default header values.

ok
*/
type FindVolumeByIDOK struct {
	Payload *types.Volume
}

func (o *FindVolumeByIDOK) Error() string {
	return fmt.Sprintf("[GET /storage/{id}][%d] findVolumeByIdOK  %+v", 200, o.Payload)
}
func (o *FindVolumeByIDOK) GetPayload() *types.Volume {
	return o.Payload
}

func (o *FindVolumeByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(types.Volume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindVolumeByIDUnauthorized creates a FindVolumeByIDUnauthorized with default headers values
func NewFindVolumeByIDUnauthorized() *FindVolumeByIDUnauthorized {
	return &FindVolumeByIDUnauthorized{}
}

/* FindVolumeByIDUnauthorized describes a response with status code 401, with default header values.

unauthorized
*/
type FindVolumeByIDUnauthorized struct {
}

func (o *FindVolumeByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /storage/{id}][%d] findVolumeByIdUnauthorized ", 401)
}

func (o *FindVolumeByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindVolumeByIDForbidden creates a FindVolumeByIDForbidden with default headers values
func NewFindVolumeByIDForbidden() *FindVolumeByIDForbidden {
	return &FindVolumeByIDForbidden{}
}

/* FindVolumeByIDForbidden describes a response with status code 403, with default header values.

forbidden
*/
type FindVolumeByIDForbidden struct {
}

func (o *FindVolumeByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /storage/{id}][%d] findVolumeByIdForbidden ", 403)
}

func (o *FindVolumeByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindVolumeByIDNotFound creates a FindVolumeByIDNotFound with default headers values
func NewFindVolumeByIDNotFound() *FindVolumeByIDNotFound {
	return &FindVolumeByIDNotFound{}
}

/* FindVolumeByIDNotFound describes a response with status code 404, with default header values.

not found
*/
type FindVolumeByIDNotFound struct {
}

func (o *FindVolumeByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /storage/{id}][%d] findVolumeByIdNotFound ", 404)
}

func (o *FindVolumeByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
