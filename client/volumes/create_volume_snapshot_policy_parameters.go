// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateVolumeSnapshotPolicyParams creates a new CreateVolumeSnapshotPolicyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateVolumeSnapshotPolicyParams() *CreateVolumeSnapshotPolicyParams {
	return &CreateVolumeSnapshotPolicyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateVolumeSnapshotPolicyParamsWithTimeout creates a new CreateVolumeSnapshotPolicyParams object
// with the ability to set a timeout on a request.
func NewCreateVolumeSnapshotPolicyParamsWithTimeout(timeout time.Duration) *CreateVolumeSnapshotPolicyParams {
	return &CreateVolumeSnapshotPolicyParams{
		timeout: timeout,
	}
}

// NewCreateVolumeSnapshotPolicyParamsWithContext creates a new CreateVolumeSnapshotPolicyParams object
// with the ability to set a context for a request.
func NewCreateVolumeSnapshotPolicyParamsWithContext(ctx context.Context) *CreateVolumeSnapshotPolicyParams {
	return &CreateVolumeSnapshotPolicyParams{
		Context: ctx,
	}
}

// NewCreateVolumeSnapshotPolicyParamsWithHTTPClient creates a new CreateVolumeSnapshotPolicyParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateVolumeSnapshotPolicyParamsWithHTTPClient(client *http.Client) *CreateVolumeSnapshotPolicyParams {
	return &CreateVolumeSnapshotPolicyParams{
		HTTPClient: client,
	}
}

/* CreateVolumeSnapshotPolicyParams contains all the parameters to send to the API endpoint
   for the create volume snapshot policy operation.

   Typically these are written to a http.Request.
*/
type CreateVolumeSnapshotPolicyParams struct {

	/* ID.

	   Volume UUID

	   Format: uuid
	*/
	ID strfmt.UUID

	/* SnapshotCount.

	   Snapshot count
	*/
	SnapshotCount *int64

	/* SnapshotFrequency.

	   Snapshot frequency
	*/
	SnapshotFrequency string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create volume snapshot policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateVolumeSnapshotPolicyParams) WithDefaults() *CreateVolumeSnapshotPolicyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create volume snapshot policy params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateVolumeSnapshotPolicyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) WithTimeout(timeout time.Duration) *CreateVolumeSnapshotPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) WithContext(ctx context.Context) *CreateVolumeSnapshotPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) WithHTTPClient(client *http.Client) *CreateVolumeSnapshotPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) WithID(id strfmt.UUID) *CreateVolumeSnapshotPolicyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithSnapshotCount adds the snapshotCount to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) WithSnapshotCount(snapshotCount *int64) *CreateVolumeSnapshotPolicyParams {
	o.SetSnapshotCount(snapshotCount)
	return o
}

// SetSnapshotCount adds the snapshotCount to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) SetSnapshotCount(snapshotCount *int64) {
	o.SnapshotCount = snapshotCount
}

// WithSnapshotFrequency adds the snapshotFrequency to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) WithSnapshotFrequency(snapshotFrequency string) *CreateVolumeSnapshotPolicyParams {
	o.SetSnapshotFrequency(snapshotFrequency)
	return o
}

// SetSnapshotFrequency adds the snapshotFrequency to the create volume snapshot policy params
func (o *CreateVolumeSnapshotPolicyParams) SetSnapshotFrequency(snapshotFrequency string) {
	o.SnapshotFrequency = snapshotFrequency
}

// WriteToRequest writes these params to a swagger request
func (o *CreateVolumeSnapshotPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if o.SnapshotCount != nil {

		// query param snapshot_count
		var qrSnapshotCount int64

		if o.SnapshotCount != nil {
			qrSnapshotCount = *o.SnapshotCount
		}
		qSnapshotCount := swag.FormatInt64(qrSnapshotCount)
		if qSnapshotCount != "" {

			if err := r.SetQueryParam("snapshot_count", qSnapshotCount); err != nil {
				return err
			}
		}
	}

	// query param snapshot_frequency
	qrSnapshotFrequency := o.SnapshotFrequency
	qSnapshotFrequency := qrSnapshotFrequency
	if qSnapshotFrequency != "" {

		if err := r.SetQueryParam("snapshot_frequency", qSnapshotFrequency); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
