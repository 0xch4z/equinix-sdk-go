// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindSpotMarketPricesParams creates a new FindSpotMarketPricesParams object
// with the default values initialized.
func NewFindSpotMarketPricesParams() *FindSpotMarketPricesParams {
	var ()
	return &FindSpotMarketPricesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFindSpotMarketPricesParamsWithTimeout creates a new FindSpotMarketPricesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFindSpotMarketPricesParamsWithTimeout(timeout time.Duration) *FindSpotMarketPricesParams {
	var ()
	return &FindSpotMarketPricesParams{

		timeout: timeout,
	}
}

// NewFindSpotMarketPricesParamsWithContext creates a new FindSpotMarketPricesParams object
// with the default values initialized, and the ability to set a context for a request
func NewFindSpotMarketPricesParamsWithContext(ctx context.Context) *FindSpotMarketPricesParams {
	var ()
	return &FindSpotMarketPricesParams{

		Context: ctx,
	}
}

// NewFindSpotMarketPricesParamsWithHTTPClient creates a new FindSpotMarketPricesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFindSpotMarketPricesParamsWithHTTPClient(client *http.Client) *FindSpotMarketPricesParams {
	var ()
	return &FindSpotMarketPricesParams{
		HTTPClient: client,
	}
}

/*FindSpotMarketPricesParams contains all the parameters to send to the API endpoint
for the find spot market prices operation typically these are written to a http.Request
*/
type FindSpotMarketPricesParams struct {

	/*Facility
	  Facility to check spot market prices

	*/
	Facility *string
	/*Plan
	  Plan to check spot market prices

	*/
	Plan *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the find spot market prices params
func (o *FindSpotMarketPricesParams) WithTimeout(timeout time.Duration) *FindSpotMarketPricesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find spot market prices params
func (o *FindSpotMarketPricesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find spot market prices params
func (o *FindSpotMarketPricesParams) WithContext(ctx context.Context) *FindSpotMarketPricesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find spot market prices params
func (o *FindSpotMarketPricesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find spot market prices params
func (o *FindSpotMarketPricesParams) WithHTTPClient(client *http.Client) *FindSpotMarketPricesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find spot market prices params
func (o *FindSpotMarketPricesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFacility adds the facility to the find spot market prices params
func (o *FindSpotMarketPricesParams) WithFacility(facility *string) *FindSpotMarketPricesParams {
	o.SetFacility(facility)
	return o
}

// SetFacility adds the facility to the find spot market prices params
func (o *FindSpotMarketPricesParams) SetFacility(facility *string) {
	o.Facility = facility
}

// WithPlan adds the plan to the find spot market prices params
func (o *FindSpotMarketPricesParams) WithPlan(plan *string) *FindSpotMarketPricesParams {
	o.SetPlan(plan)
	return o
}

// SetPlan adds the plan to the find spot market prices params
func (o *FindSpotMarketPricesParams) SetPlan(plan *string) {
	o.Plan = plan
}

// WriteToRequest writes these params to a swagger request
func (o *FindSpotMarketPricesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Facility != nil {

		// query param facility
		var qrFacility string
		if o.Facility != nil {
			qrFacility = *o.Facility
		}
		qFacility := qrFacility
		if qFacility != "" {
			if err := r.SetQueryParam("facility", qFacility); err != nil {
				return err
			}
		}

	}

	if o.Plan != nil {

		// query param plan
		var qrPlan string
		if o.Plan != nil {
			qrPlan = *o.Plan
		}
		qPlan := qrPlan
		if qPlan != "" {
			if err := r.SetQueryParam("plan", qPlan); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
