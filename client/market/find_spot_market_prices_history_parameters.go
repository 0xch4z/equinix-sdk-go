// Code generated by go-swagger; DO NOT EDIT.

package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFindSpotMarketPricesHistoryParams creates a new FindSpotMarketPricesHistoryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewFindSpotMarketPricesHistoryParams() *FindSpotMarketPricesHistoryParams {
	return &FindSpotMarketPricesHistoryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewFindSpotMarketPricesHistoryParamsWithTimeout creates a new FindSpotMarketPricesHistoryParams object
// with the ability to set a timeout on a request.
func NewFindSpotMarketPricesHistoryParamsWithTimeout(timeout time.Duration) *FindSpotMarketPricesHistoryParams {
	return &FindSpotMarketPricesHistoryParams{
		timeout: timeout,
	}
}

// NewFindSpotMarketPricesHistoryParamsWithContext creates a new FindSpotMarketPricesHistoryParams object
// with the ability to set a context for a request.
func NewFindSpotMarketPricesHistoryParamsWithContext(ctx context.Context) *FindSpotMarketPricesHistoryParams {
	return &FindSpotMarketPricesHistoryParams{
		Context: ctx,
	}
}

// NewFindSpotMarketPricesHistoryParamsWithHTTPClient creates a new FindSpotMarketPricesHistoryParams object
// with the ability to set a custom HTTPClient for a request.
func NewFindSpotMarketPricesHistoryParamsWithHTTPClient(client *http.Client) *FindSpotMarketPricesHistoryParams {
	return &FindSpotMarketPricesHistoryParams{
		HTTPClient: client,
	}
}

/* FindSpotMarketPricesHistoryParams contains all the parameters to send to the API endpoint
   for the find spot market prices history operation.

   Typically these are written to a http.Request.
*/
type FindSpotMarketPricesHistoryParams struct {

	/* Facility.

	   Facility to check spot market prices
	*/
	Facility string

	/* From.

	   Timestamp from range
	*/
	From string

	/* Plan.

	   Plan to check spot market prices
	*/
	Plan string

	/* Until.

	   Timestamp to range
	*/
	Until string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the find spot market prices history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindSpotMarketPricesHistoryParams) WithDefaults() *FindSpotMarketPricesHistoryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the find spot market prices history params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *FindSpotMarketPricesHistoryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithTimeout(timeout time.Duration) *FindSpotMarketPricesHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithContext(ctx context.Context) *FindSpotMarketPricesHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithHTTPClient(client *http.Client) *FindSpotMarketPricesHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFacility adds the facility to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithFacility(facility string) *FindSpotMarketPricesHistoryParams {
	o.SetFacility(facility)
	return o
}

// SetFacility adds the facility to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetFacility(facility string) {
	o.Facility = facility
}

// WithFrom adds the from to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithFrom(from string) *FindSpotMarketPricesHistoryParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetFrom(from string) {
	o.From = from
}

// WithPlan adds the plan to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithPlan(plan string) *FindSpotMarketPricesHistoryParams {
	o.SetPlan(plan)
	return o
}

// SetPlan adds the plan to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetPlan(plan string) {
	o.Plan = plan
}

// WithUntil adds the until to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) WithUntil(until string) *FindSpotMarketPricesHistoryParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the find spot market prices history params
func (o *FindSpotMarketPricesHistoryParams) SetUntil(until string) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *FindSpotMarketPricesHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param facility
	qrFacility := o.Facility
	qFacility := qrFacility
	if qFacility != "" {

		if err := r.SetQueryParam("facility", qFacility); err != nil {
			return err
		}
	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {

		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// query param plan
	qrPlan := o.Plan
	qPlan := qrPlan
	if qPlan != "" {

		if err := r.SetQueryParam("plan", qPlan); err != nil {
			return err
		}
	}

	// query param until
	qrUntil := o.Until
	qUntil := qrUntil
	if qUntil != "" {

		if err := r.SetQueryParam("until", qUntil); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
